
Sound-20D01MB_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008524  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080086e8  080086e8  000186e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008740  08008740  0002013c  2**0
                  CONTENTS
  4 .ARM          00000008  08008740  08008740  00018740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008748  08008748  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008748  08008748  00018748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800874c  0800874c  0001874c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  08008750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000463c  2000013c  0800888c  0002013c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004778  0800888c  00024778  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017871  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000391b  00000000  00000000  000379dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  0003b2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d28  00000000  00000000  0003c1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024b49  00000000  00000000  0003cec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d93  00000000  00000000  00061a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd256  00000000  00000000  000757a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001429fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a54  00000000  00000000  00142a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000013c 	.word	0x2000013c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080086d0 	.word	0x080086d0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000140 	.word	0x20000140
 8000200:	080086d0 	.word	0x080086d0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 faf0 	bl	8000ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f80a 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f900 	bl	800070c <MX_GPIO_Init>
  MX_DMA_Init();
 800050c:	f000 f8de 	bl	80006cc <MX_DMA_Init>
  MX_SAI1_Init();
 8000510:	f000 f8a2 	bl	8000658 <MX_SAI1_Init>
  MX_USB_DEVICE_Init();
 8000514:	f007 fb86 	bl	8007c24 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000518:	e7fe      	b.n	8000518 <main+0x1c>
	...

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b0ac      	sub	sp, #176	; 0xb0
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000526:	2234      	movs	r2, #52	; 0x34
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f008 f8c8 	bl	80086c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	225c      	movs	r2, #92	; 0x5c
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f008 f8b9 	bl	80086c0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	4b3f      	ldr	r3, [pc, #252]	; (8000650 <SystemClock_Config+0x134>)
 8000554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000556:	4a3e      	ldr	r2, [pc, #248]	; (8000650 <SystemClock_Config+0x134>)
 8000558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055c:	6413      	str	r3, [r2, #64]	; 0x40
 800055e:	4b3c      	ldr	r3, [pc, #240]	; (8000650 <SystemClock_Config+0x134>)
 8000560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	4b39      	ldr	r3, [pc, #228]	; (8000654 <SystemClock_Config+0x138>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a38      	ldr	r2, [pc, #224]	; (8000654 <SystemClock_Config+0x138>)
 8000574:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000578:	6013      	str	r3, [r2, #0]
 800057a:	4b36      	ldr	r3, [pc, #216]	; (8000654 <SystemClock_Config+0x138>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000586:	2301      	movs	r3, #1
 8000588:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800058a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000592:	2302      	movs	r3, #2
 8000594:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000598:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800059c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005a0:	2304      	movs	r3, #4
 80005a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005a6:	23b4      	movs	r3, #180	; 0xb4
 80005a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ac:	2302      	movs	r3, #2
 80005ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80005c2:	4618      	mov	r0, r3
 80005c4:	f003 fb70 	bl	8003ca8 <HAL_RCC_OscConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005ce:	f000 f8f9 	bl	80007c4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005d2:	f002 fb03 	bl	8002bdc <HAL_PWREx_EnableOverDrive>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005dc:	f000 f8f2 	bl	80007c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e0:	230f      	movs	r3, #15
 80005e2:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e4:	2302      	movs	r3, #2
 80005e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005f0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f6:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005f8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005fc:	2105      	movs	r1, #5
 80005fe:	4618      	mov	r0, r3
 8000600:	f002 fb3c 	bl	8002c7c <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800060a:	f000 f8db 	bl	80007c4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_CLK48;
 800060e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000612:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 4;
 8000614:	2304      	movs	r3, #4
 8000616:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 8000618:	2360      	movs	r3, #96	; 0x60
 800061a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800061c:	2302      	movs	r3, #2
 800061e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8000620:	2304      	movs	r3, #4
 8000622:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000624:	2301      	movs	r3, #1
 8000626:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8000628:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800062c:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_EXT;
 800062e:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8000632:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	4618      	mov	r0, r3
 800063a:	f002 fc11 	bl	8002e60 <HAL_RCCEx_PeriphCLKConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8000644:	f000 f8be 	bl	80007c4 <Error_Handler>
  }
}
 8000648:	bf00      	nop
 800064a:	37b0      	adds	r7, #176	; 0xb0
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 800065c:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <MX_SAI1_Init+0x6c>)
 800065e:	4a1a      	ldr	r2, [pc, #104]	; (80006c8 <MX_SAI1_Init+0x70>)
 8000660:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000662:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <MX_SAI1_Init+0x6c>)
 8000664:	2200      	movs	r2, #0
 8000666:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000668:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <MX_SAI1_Init+0x6c>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <MX_SAI1_Init+0x6c>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000674:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <MX_SAI1_Init+0x6c>)
 8000676:	2200      	movs	r2, #0
 8000678:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <MX_SAI1_Init+0x6c>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.ClockSource = SAI_CLKSOURCE_NA;
 8000680:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <MX_SAI1_Init+0x6c>)
 8000682:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000686:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_SAI1_Init+0x6c>)
 800068a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800068e:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_SAI1_Init+0x6c>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_SAI1_Init+0x6c>)
 8000698:	2200      	movs	r2, #0
 800069a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_SAI1_Init+0x6c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_SAI1_Init+0x6c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 80006a8:	2302      	movs	r3, #2
 80006aa:	2200      	movs	r2, #0
 80006ac:	2100      	movs	r1, #0
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_SAI1_Init+0x6c>)
 80006b0:	f003 fd98 	bl	80041e4 <HAL_SAI_InitProtocol>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_SAI1_Init+0x66>
  {
    Error_Handler();
 80006ba:	f000 f883 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20003db4 	.word	0x20003db4
 80006c8:	40015824 	.word	0x40015824

080006cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_DMA_Init+0x3c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a0b      	ldr	r2, [pc, #44]	; (8000708 <MX_DMA_Init+0x3c>)
 80006dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_DMA_Init+0x3c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2100      	movs	r1, #0
 80006f2:	2044      	movs	r0, #68	; 0x44
 80006f4:	f000 fb67 	bl	8000dc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80006f8:	2044      	movs	r0, #68	; 0x44
 80006fa:	f000 fb80 	bl	8000dfe <HAL_NVIC_EnableIRQ>

}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	; 0x28
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
 8000726:	4b25      	ldr	r3, [pc, #148]	; (80007bc <MX_GPIO_Init+0xb0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a24      	ldr	r2, [pc, #144]	; (80007bc <MX_GPIO_Init+0xb0>)
 800072c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b22      	ldr	r3, [pc, #136]	; (80007bc <MX_GPIO_Init+0xb0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	4b1e      	ldr	r3, [pc, #120]	; (80007bc <MX_GPIO_Init+0xb0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a1d      	ldr	r2, [pc, #116]	; (80007bc <MX_GPIO_Init+0xb0>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <MX_GPIO_Init+0xb0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	4b17      	ldr	r3, [pc, #92]	; (80007bc <MX_GPIO_Init+0xb0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a16      	ldr	r2, [pc, #88]	; (80007bc <MX_GPIO_Init+0xb0>)
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_GPIO_Init+0xb0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <MX_GPIO_Init+0xb0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a0f      	ldr	r2, [pc, #60]	; (80007bc <MX_GPIO_Init+0xb0>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <MX_GPIO_Init+0xb0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000792:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000798:	2302      	movs	r3, #2
 800079a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a0:	2300      	movs	r3, #0
 80007a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007a4:	2305      	movs	r3, #5
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	4619      	mov	r1, r3
 80007ae:	4804      	ldr	r0, [pc, #16]	; (80007c0 <MX_GPIO_Init+0xb4>)
 80007b0:	f000 feb0 	bl	8001514 <HAL_GPIO_Init>

}
 80007b4:	bf00      	nop
 80007b6:	3728      	adds	r7, #40	; 0x28
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40020800 	.word	0x40020800

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c8:	b672      	cpsid	i
}
 80007ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007cc:	e7fe      	b.n	80007cc <Error_Handler+0x8>
	...

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <HAL_MspInit+0x4c>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007de:	4a0f      	ldr	r2, [pc, #60]	; (800081c <HAL_MspInit+0x4c>)
 80007e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e4:	6453      	str	r3, [r2, #68]	; 0x44
 80007e6:	4b0d      	ldr	r3, [pc, #52]	; (800081c <HAL_MspInit+0x4c>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <HAL_MspInit+0x4c>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	4a08      	ldr	r2, [pc, #32]	; (800081c <HAL_MspInit+0x4c>)
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000800:	6413      	str	r3, [r2, #64]	; 0x40
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <HAL_MspInit+0x4c>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800

08000820 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b088      	sub	sp, #32
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a47      	ldr	r2, [pc, #284]	; (800094c <HAL_SAI_MspInit+0x12c>)
 800082e:	4293      	cmp	r3, r2
 8000830:	f040 8088 	bne.w	8000944 <HAL_SAI_MspInit+0x124>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8000834:	4b46      	ldr	r3, [pc, #280]	; (8000950 <HAL_SAI_MspInit+0x130>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d10d      	bne.n	8000858 <HAL_SAI_MspInit+0x38>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800083c:	2300      	movs	r3, #0
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	4b44      	ldr	r3, [pc, #272]	; (8000954 <HAL_SAI_MspInit+0x134>)
 8000842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000844:	4a43      	ldr	r2, [pc, #268]	; (8000954 <HAL_SAI_MspInit+0x134>)
 8000846:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800084a:	6453      	str	r3, [r2, #68]	; 0x44
 800084c:	4b41      	ldr	r3, [pc, #260]	; (8000954 <HAL_SAI_MspInit+0x134>)
 800084e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000850:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 8000858:	4b3d      	ldr	r3, [pc, #244]	; (8000950 <HAL_SAI_MspInit+0x130>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	3301      	adds	r3, #1
 800085e:	4a3c      	ldr	r2, [pc, #240]	; (8000950 <HAL_SAI_MspInit+0x130>)
 8000860:	6013      	str	r3, [r2, #0]
    PC0     ------> SAI1_MCLK_B
    PB12     ------> SAI1_SCK_B
    PA9     ------> SAI1_SD_B
    PB9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000862:	2301      	movs	r3, #1
 8000864:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000872:	2306      	movs	r3, #6
 8000874:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	4619      	mov	r1, r3
 800087c:	4836      	ldr	r0, [pc, #216]	; (8000958 <HAL_SAI_MspInit+0x138>)
 800087e:	f000 fe49 	bl	8001514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_9;
 8000882:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8000886:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000894:	2306      	movs	r3, #6
 8000896:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	4619      	mov	r1, r3
 800089e:	482f      	ldr	r0, [pc, #188]	; (800095c <HAL_SAI_MspInit+0x13c>)
 80008a0:	f000 fe38 	bl	8001514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80008b6:	2306      	movs	r3, #6
 80008b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	4619      	mov	r1, r3
 80008c0:	4827      	ldr	r0, [pc, #156]	; (8000960 <HAL_SAI_MspInit+0x140>)
 80008c2:	f000 fe27 	bl	8001514 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream5;
 80008c6:	4b27      	ldr	r3, [pc, #156]	; (8000964 <HAL_SAI_MspInit+0x144>)
 80008c8:	4a27      	ldr	r2, [pc, #156]	; (8000968 <HAL_SAI_MspInit+0x148>)
 80008ca:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_0;
 80008cc:	4b25      	ldr	r3, [pc, #148]	; (8000964 <HAL_SAI_MspInit+0x144>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008d2:	4b24      	ldr	r3, [pc, #144]	; (8000964 <HAL_SAI_MspInit+0x144>)
 80008d4:	2240      	movs	r2, #64	; 0x40
 80008d6:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80008d8:	4b22      	ldr	r3, [pc, #136]	; (8000964 <HAL_SAI_MspInit+0x144>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 80008de:	4b21      	ldr	r3, [pc, #132]	; (8000964 <HAL_SAI_MspInit+0x144>)
 80008e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008e4:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008e6:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <HAL_SAI_MspInit+0x144>)
 80008e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008ec:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008ee:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <HAL_SAI_MspInit+0x144>)
 80008f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008f4:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_NORMAL;
 80008f6:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <HAL_SAI_MspInit+0x144>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_LOW;
 80008fc:	4b19      	ldr	r3, [pc, #100]	; (8000964 <HAL_SAI_MspInit+0x144>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000902:	4b18      	ldr	r3, [pc, #96]	; (8000964 <HAL_SAI_MspInit+0x144>)
 8000904:	2204      	movs	r2, #4
 8000906:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000908:	4b16      	ldr	r3, [pc, #88]	; (8000964 <HAL_SAI_MspInit+0x144>)
 800090a:	2203      	movs	r2, #3
 800090c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_INC8;
 800090e:	4b15      	ldr	r3, [pc, #84]	; (8000964 <HAL_SAI_MspInit+0x144>)
 8000910:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000914:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000916:	4b13      	ldr	r3, [pc, #76]	; (8000964 <HAL_SAI_MspInit+0x144>)
 8000918:	2200      	movs	r2, #0
 800091a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800091c:	4811      	ldr	r0, [pc, #68]	; (8000964 <HAL_SAI_MspInit+0x144>)
 800091e:	f000 fa89 	bl	8000e34 <HAL_DMA_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <HAL_SAI_MspInit+0x10c>
    {
      Error_Handler();
 8000928:	f7ff ff4c 	bl	80007c4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <HAL_SAI_MspInit+0x144>)
 8000930:	675a      	str	r2, [r3, #116]	; 0x74
 8000932:	4a0c      	ldr	r2, [pc, #48]	; (8000964 <HAL_SAI_MspInit+0x144>)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <HAL_SAI_MspInit+0x144>)
 800093c:	671a      	str	r2, [r3, #112]	; 0x70
 800093e:	4a09      	ldr	r2, [pc, #36]	; (8000964 <HAL_SAI_MspInit+0x144>)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8000944:	bf00      	nop
 8000946:	3720      	adds	r7, #32
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40015824 	.word	0x40015824
 8000950:	20000158 	.word	0x20000158
 8000954:	40023800 	.word	0x40023800
 8000958:	40020800 	.word	0x40020800
 800095c:	40020400 	.word	0x40020400
 8000960:	40020000 	.word	0x40020000
 8000964:	20003e3c 	.word	0x20003e3c
 8000968:	40026488 	.word	0x40026488

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <NMI_Handler+0x4>

08000972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <MemManage_Handler+0x4>

0800097e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <BusFault_Handler+0x4>

08000984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <UsageFault_Handler+0x4>

0800098a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b8:	f000 f8e6 	bl	8000b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}

080009c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009c4:	4802      	ldr	r0, [pc, #8]	; (80009d0 <OTG_FS_IRQHandler+0x10>)
 80009c6:	f001 f890 	bl	8001aea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20004370 	.word	0x20004370

080009d4 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 80009d8:	4802      	ldr	r0, [pc, #8]	; (80009e4 <DMA2_Stream5_IRQHandler+0x10>)
 80009da:	f000 fb31 	bl	8001040 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20003e3c 	.word	0x20003e3c

080009e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <SystemInit+0x20>)
 80009ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f2:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <SystemInit+0x20>)
 80009f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a10:	480d      	ldr	r0, [pc, #52]	; (8000a48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a12:	490e      	ldr	r1, [pc, #56]	; (8000a4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a14:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a18:	e002      	b.n	8000a20 <LoopCopyDataInit>

08000a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1e:	3304      	adds	r3, #4

08000a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a24:	d3f9      	bcc.n	8000a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a26:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a28:	4c0b      	ldr	r4, [pc, #44]	; (8000a58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a2c:	e001      	b.n	8000a32 <LoopFillZerobss>

08000a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a30:	3204      	adds	r2, #4

08000a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a34:	d3fb      	bcc.n	8000a2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a36:	f7ff ffd7 	bl	80009e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a3a:	f007 fe1d 	bl	8008678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a3e:	f7ff fd5d 	bl	80004fc <main>
  bx  lr    
 8000a42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a4c:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 8000a50:	08008750 	.word	0x08008750
  ldr r2, =_sbss
 8000a54:	2000013c 	.word	0x2000013c
  ldr r4, =_ebss
 8000a58:	20004778 	.word	0x20004778

08000a5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <ADC_IRQHandler>

08000a5e <HAL_SAI_TxCpltCallback>:

void TransferComplete_CallBack_FS(void);
void HalfTransfer_CallBack_FS(void);
void Error_CallBack_FS(void);

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
	TransferComplete_CallBack_FS();
 8000a66:	f007 f96f 	bl	8007d48 <TransferComplete_CallBack_FS>
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
	HalfTransfer_CallBack_FS();
 8000a7a:	f007 f96f 	bl	8007d5c <HalfTransfer_CallBack_FS>
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <BSP_AUDIO_OUT_Play>:

uint8_t BSP_AUDIO_OUT_Play(uint8_t *pbuf, uint32_t size) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
	HAL_SAI_Transmit_DMA(&hsai_BlockB1, (uint8_t*) pbuf,
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000a98:	d203      	bcs.n	8000aa2 <BSP_AUDIO_OUT_Play+0x1a>
			DMA_MAX(size / AUDIODATA_SIZE));
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	085b      	lsrs	r3, r3, #1
	HAL_SAI_Transmit_DMA(&hsai_BlockB1, (uint8_t*) pbuf,
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	e001      	b.n	8000aa6 <BSP_AUDIO_OUT_Play+0x1e>
 8000aa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	6879      	ldr	r1, [r7, #4]
 8000aaa:	4804      	ldr	r0, [pc, #16]	; (8000abc <BSP_AUDIO_OUT_Play+0x34>)
 8000aac:	f003 fcf6 	bl	800449c <HAL_SAI_Transmit_DMA>
	return 0;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20003db4 	.word	0x20003db4

08000ac0 <BSP_AUDIO_OUT_ChangeBuffer>:

void BSP_AUDIO_OUT_ChangeBuffer(uint8_t *pbuf, uint32_t size) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
	HAL_SAI_Transmit_DMA(&hsai_BlockB1, (uint8_t*) pbuf, size);
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	461a      	mov	r2, r3
 8000ad0:	6879      	ldr	r1, [r7, #4]
 8000ad2:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <BSP_AUDIO_OUT_ChangeBuffer+0x20>)
 8000ad4:	f003 fce2 	bl	800449c <HAL_SAI_Transmit_DMA>
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20003db4 	.word	0x20003db4

08000ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <HAL_Init+0x40>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a0d      	ldr	r2, [pc, #52]	; (8000b24 <HAL_Init+0x40>)
 8000aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000af2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000af4:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <HAL_Init+0x40>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <HAL_Init+0x40>)
 8000afa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000afe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <HAL_Init+0x40>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <HAL_Init+0x40>)
 8000b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b0c:	2003      	movs	r0, #3
 8000b0e:	f000 f94f 	bl	8000db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b12:	2000      	movs	r0, #0
 8000b14:	f000 f808 	bl	8000b28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b18:	f7ff fe5a 	bl	80007d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023c00 	.word	0x40023c00

08000b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_InitTick+0x54>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_InitTick+0x58>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 f967 	bl	8000e1a <HAL_SYSTICK_Config>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e00e      	b.n	8000b74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2b0f      	cmp	r3, #15
 8000b5a:	d80a      	bhi.n	8000b72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b64:	f000 f92f 	bl	8000dc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b68:	4a06      	ldr	r2, [pc, #24]	; (8000b84 <HAL_InitTick+0x5c>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	e000      	b.n	8000b74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000000 	.word	0x20000000
 8000b80:	20000008 	.word	0x20000008
 8000b84:	20000004 	.word	0x20000004

08000b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_IncTick+0x20>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	461a      	mov	r2, r3
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x24>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4413      	add	r3, r2
 8000b98:	4a04      	ldr	r2, [pc, #16]	; (8000bac <HAL_IncTick+0x24>)
 8000b9a:	6013      	str	r3, [r2, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	20003e9c 	.word	0x20003e9c

08000bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <HAL_GetTick+0x14>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	20003e9c 	.word	0x20003e9c

08000bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd0:	f7ff ffee 	bl	8000bb0 <HAL_GetTick>
 8000bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000be0:	d005      	beq.n	8000bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000be2:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <HAL_Delay+0x44>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	461a      	mov	r2, r3
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4413      	add	r3, r2
 8000bec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bee:	bf00      	nop
 8000bf0:	f7ff ffde 	bl	8000bb0 <HAL_GetTick>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d8f7      	bhi.n	8000bf0 <HAL_Delay+0x28>
  {
  }
}
 8000c00:	bf00      	nop
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000008 	.word	0x20000008

08000c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c42:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	60d3      	str	r3, [r2, #12]
}
 8000c48:	bf00      	nop
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <__NVIC_GetPriorityGrouping+0x18>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	f003 0307 	and.w	r3, r3, #7
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	db0b      	blt.n	8000c9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	f003 021f 	and.w	r2, r3, #31
 8000c8c:	4907      	ldr	r1, [pc, #28]	; (8000cac <__NVIC_EnableIRQ+0x38>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	095b      	lsrs	r3, r3, #5
 8000c94:	2001      	movs	r0, #1
 8000c96:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000e100 	.word	0xe000e100

08000cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	db0a      	blt.n	8000cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	490c      	ldr	r1, [pc, #48]	; (8000cfc <__NVIC_SetPriority+0x4c>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	0112      	lsls	r2, r2, #4
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd8:	e00a      	b.n	8000cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4908      	ldr	r1, [pc, #32]	; (8000d00 <__NVIC_SetPriority+0x50>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	3b04      	subs	r3, #4
 8000ce8:	0112      	lsls	r2, r2, #4
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	440b      	add	r3, r1
 8000cee:	761a      	strb	r2, [r3, #24]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000e100 	.word	0xe000e100
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f1c3 0307 	rsb	r3, r3, #7
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	bf28      	it	cs
 8000d22:	2304      	movcs	r3, #4
 8000d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	2b06      	cmp	r3, #6
 8000d2c:	d902      	bls.n	8000d34 <NVIC_EncodePriority+0x30>
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3b03      	subs	r3, #3
 8000d32:	e000      	b.n	8000d36 <NVIC_EncodePriority+0x32>
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43da      	mvns	r2, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	401a      	ands	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43d9      	mvns	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	4313      	orrs	r3, r2
         );
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3724      	adds	r7, #36	; 0x24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
	...

08000d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d7c:	d301      	bcc.n	8000d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e00f      	b.n	8000da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <SysTick_Config+0x40>)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8a:	210f      	movs	r1, #15
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d90:	f7ff ff8e 	bl	8000cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <SysTick_Config+0x40>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9a:	4b04      	ldr	r3, [pc, #16]	; (8000dac <SysTick_Config+0x40>)
 8000d9c:	2207      	movs	r2, #7
 8000d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	e000e010 	.word	0xe000e010

08000db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff ff29 	bl	8000c10 <__NVIC_SetPriorityGrouping>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b086      	sub	sp, #24
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	4603      	mov	r3, r0
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
 8000dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd8:	f7ff ff3e 	bl	8000c58 <__NVIC_GetPriorityGrouping>
 8000ddc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	68b9      	ldr	r1, [r7, #8]
 8000de2:	6978      	ldr	r0, [r7, #20]
 8000de4:	f7ff ff8e 	bl	8000d04 <NVIC_EncodePriority>
 8000de8:	4602      	mov	r2, r0
 8000dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff5d 	bl	8000cb0 <__NVIC_SetPriority>
}
 8000df6:	bf00      	nop
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	4603      	mov	r3, r0
 8000e06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff31 	bl	8000c74 <__NVIC_EnableIRQ>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ffa2 	bl	8000d6c <SysTick_Config>
 8000e28:	4603      	mov	r3, r0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e40:	f7ff feb6 	bl	8000bb0 <HAL_GetTick>
 8000e44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d101      	bne.n	8000e50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e099      	b.n	8000f84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2202      	movs	r2, #2
 8000e54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f022 0201 	bic.w	r2, r2, #1
 8000e6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e70:	e00f      	b.n	8000e92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e72:	f7ff fe9d 	bl	8000bb0 <HAL_GetTick>
 8000e76:	4602      	mov	r2, r0
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	2b05      	cmp	r3, #5
 8000e7e:	d908      	bls.n	8000e92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2220      	movs	r2, #32
 8000e84:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2203      	movs	r2, #3
 8000e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e078      	b.n	8000f84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d1e8      	bne.n	8000e72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	4b38      	ldr	r3, [pc, #224]	; (8000f8c <HAL_DMA_Init+0x158>)
 8000eac:	4013      	ands	r3, r2
 8000eae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ebe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	691b      	ldr	r3, [r3, #16]
 8000ec4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ed6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6a1b      	ldr	r3, [r3, #32]
 8000edc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee8:	2b04      	cmp	r3, #4
 8000eea:	d107      	bne.n	8000efc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	f023 0307 	bic.w	r3, r3, #7
 8000f12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f22:	2b04      	cmp	r3, #4
 8000f24:	d117      	bne.n	8000f56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2a:	697a      	ldr	r2, [r7, #20]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d00e      	beq.n	8000f56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f000 fa6f 	bl	800141c <DMA_CheckFifoParam>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d008      	beq.n	8000f56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2240      	movs	r2, #64	; 0x40
 8000f48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000f52:	2301      	movs	r3, #1
 8000f54:	e016      	b.n	8000f84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 fa26 	bl	80013b0 <DMA_CalcBaseAndBitshift>
 8000f64:	4603      	mov	r3, r0
 8000f66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f6c:	223f      	movs	r2, #63	; 0x3f
 8000f6e:	409a      	lsls	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	f010803f 	.word	0xf010803f

08000f90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d101      	bne.n	8000fb6 <HAL_DMA_Start_IT+0x26>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e040      	b.n	8001038 <HAL_DMA_Start_IT+0xa8>
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d12f      	bne.n	800102a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2202      	movs	r2, #2
 8000fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	68b9      	ldr	r1, [r7, #8]
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	f000 f9b8 	bl	8001354 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fe8:	223f      	movs	r2, #63	; 0x3f
 8000fea:	409a      	lsls	r2, r3
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f042 0216 	orr.w	r2, r2, #22
 8000ffe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001004:	2b00      	cmp	r3, #0
 8001006:	d007      	beq.n	8001018 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f042 0208 	orr.w	r2, r2, #8
 8001016:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f042 0201 	orr.w	r2, r2, #1
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	e005      	b.n	8001036 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001032:	2302      	movs	r3, #2
 8001034:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001036:	7dfb      	ldrb	r3, [r7, #23]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800104c:	4b92      	ldr	r3, [pc, #584]	; (8001298 <HAL_DMA_IRQHandler+0x258>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a92      	ldr	r2, [pc, #584]	; (800129c <HAL_DMA_IRQHandler+0x25c>)
 8001052:	fba2 2303 	umull	r2, r3, r2, r3
 8001056:	0a9b      	lsrs	r3, r3, #10
 8001058:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800106a:	2208      	movs	r2, #8
 800106c:	409a      	lsls	r2, r3
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4013      	ands	r3, r2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d01a      	beq.n	80010ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0304 	and.w	r3, r3, #4
 8001080:	2b00      	cmp	r3, #0
 8001082:	d013      	beq.n	80010ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f022 0204 	bic.w	r2, r2, #4
 8001092:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001098:	2208      	movs	r2, #8
 800109a:	409a      	lsls	r2, r3
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010a4:	f043 0201 	orr.w	r2, r3, #1
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b0:	2201      	movs	r2, #1
 80010b2:	409a      	lsls	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4013      	ands	r3, r2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d012      	beq.n	80010e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00b      	beq.n	80010e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ce:	2201      	movs	r2, #1
 80010d0:	409a      	lsls	r2, r3
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010da:	f043 0202 	orr.w	r2, r3, #2
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010e6:	2204      	movs	r2, #4
 80010e8:	409a      	lsls	r2, r3
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4013      	ands	r3, r2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d012      	beq.n	8001118 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00b      	beq.n	8001118 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001104:	2204      	movs	r2, #4
 8001106:	409a      	lsls	r2, r3
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001110:	f043 0204 	orr.w	r2, r3, #4
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800111c:	2210      	movs	r2, #16
 800111e:	409a      	lsls	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4013      	ands	r3, r2
 8001124:	2b00      	cmp	r3, #0
 8001126:	d043      	beq.n	80011b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	2b00      	cmp	r3, #0
 8001134:	d03c      	beq.n	80011b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800113a:	2210      	movs	r2, #16
 800113c:	409a      	lsls	r2, r3
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d018      	beq.n	8001182 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d108      	bne.n	8001170 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	2b00      	cmp	r3, #0
 8001164:	d024      	beq.n	80011b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	4798      	blx	r3
 800116e:	e01f      	b.n	80011b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001174:	2b00      	cmp	r3, #0
 8001176:	d01b      	beq.n	80011b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	4798      	blx	r3
 8001180:	e016      	b.n	80011b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800118c:	2b00      	cmp	r3, #0
 800118e:	d107      	bne.n	80011a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 0208 	bic.w	r2, r2, #8
 800119e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b4:	2220      	movs	r2, #32
 80011b6:	409a      	lsls	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4013      	ands	r3, r2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 808e 	beq.w	80012de <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0310 	and.w	r3, r3, #16
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f000 8086 	beq.w	80012de <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d6:	2220      	movs	r2, #32
 80011d8:	409a      	lsls	r2, r3
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b05      	cmp	r3, #5
 80011e8:	d136      	bne.n	8001258 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f022 0216 	bic.w	r2, r2, #22
 80011f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	695a      	ldr	r2, [r3, #20]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001208:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	2b00      	cmp	r3, #0
 8001210:	d103      	bne.n	800121a <HAL_DMA_IRQHandler+0x1da>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001216:	2b00      	cmp	r3, #0
 8001218:	d007      	beq.n	800122a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 0208 	bic.w	r2, r2, #8
 8001228:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800122e:	223f      	movs	r2, #63	; 0x3f
 8001230:	409a      	lsls	r2, r3
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2201      	movs	r2, #1
 800123a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800124a:	2b00      	cmp	r3, #0
 800124c:	d07d      	beq.n	800134a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	4798      	blx	r3
        }
        return;
 8001256:	e078      	b.n	800134a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d01c      	beq.n	80012a0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d108      	bne.n	8001286 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001278:	2b00      	cmp	r3, #0
 800127a:	d030      	beq.n	80012de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	4798      	blx	r3
 8001284:	e02b      	b.n	80012de <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800128a:	2b00      	cmp	r3, #0
 800128c:	d027      	beq.n	80012de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	4798      	blx	r3
 8001296:	e022      	b.n	80012de <HAL_DMA_IRQHandler+0x29e>
 8001298:	20000000 	.word	0x20000000
 800129c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d10f      	bne.n	80012ce <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0210 	bic.w	r2, r2, #16
 80012bc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d032      	beq.n	800134c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d022      	beq.n	8001338 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2205      	movs	r2, #5
 80012f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0201 	bic.w	r2, r2, #1
 8001308:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	3301      	adds	r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	429a      	cmp	r2, r3
 8001314:	d307      	bcc.n	8001326 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1f2      	bne.n	800130a <HAL_DMA_IRQHandler+0x2ca>
 8001324:	e000      	b.n	8001328 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001326:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2201      	movs	r2, #1
 800132c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133c:	2b00      	cmp	r3, #0
 800133e:	d005      	beq.n	800134c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	4798      	blx	r3
 8001348:	e000      	b.n	800134c <HAL_DMA_IRQHandler+0x30c>
        return;
 800134a:	bf00      	nop
    }
  }
}
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop

08001354 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
 8001360:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001370:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	2b40      	cmp	r3, #64	; 0x40
 8001380:	d108      	bne.n	8001394 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001392:	e007      	b.n	80013a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	68ba      	ldr	r2, [r7, #8]
 800139a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	60da      	str	r2, [r3, #12]
}
 80013a4:	bf00      	nop
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	3b10      	subs	r3, #16
 80013c0:	4a14      	ldr	r2, [pc, #80]	; (8001414 <DMA_CalcBaseAndBitshift+0x64>)
 80013c2:	fba2 2303 	umull	r2, r3, r2, r3
 80013c6:	091b      	lsrs	r3, r3, #4
 80013c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013ca:	4a13      	ldr	r2, [pc, #76]	; (8001418 <DMA_CalcBaseAndBitshift+0x68>)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4413      	add	r3, r2
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2b03      	cmp	r3, #3
 80013dc:	d909      	bls.n	80013f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013e6:	f023 0303 	bic.w	r3, r3, #3
 80013ea:	1d1a      	adds	r2, r3, #4
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	659a      	str	r2, [r3, #88]	; 0x58
 80013f0:	e007      	b.n	8001402 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013fa:	f023 0303 	bic.w	r3, r3, #3
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001406:	4618      	mov	r0, r3
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	aaaaaaab 	.word	0xaaaaaaab
 8001418:	08008738 	.word	0x08008738

0800141c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001424:	2300      	movs	r3, #0
 8001426:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d11f      	bne.n	8001476 <DMA_CheckFifoParam+0x5a>
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	2b03      	cmp	r3, #3
 800143a:	d856      	bhi.n	80014ea <DMA_CheckFifoParam+0xce>
 800143c:	a201      	add	r2, pc, #4	; (adr r2, 8001444 <DMA_CheckFifoParam+0x28>)
 800143e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001442:	bf00      	nop
 8001444:	08001455 	.word	0x08001455
 8001448:	08001467 	.word	0x08001467
 800144c:	08001455 	.word	0x08001455
 8001450:	080014eb 	.word	0x080014eb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001458:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d046      	beq.n	80014ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001464:	e043      	b.n	80014ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800146e:	d140      	bne.n	80014f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001474:	e03d      	b.n	80014f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800147e:	d121      	bne.n	80014c4 <DMA_CheckFifoParam+0xa8>
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	2b03      	cmp	r3, #3
 8001484:	d837      	bhi.n	80014f6 <DMA_CheckFifoParam+0xda>
 8001486:	a201      	add	r2, pc, #4	; (adr r2, 800148c <DMA_CheckFifoParam+0x70>)
 8001488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148c:	0800149d 	.word	0x0800149d
 8001490:	080014a3 	.word	0x080014a3
 8001494:	0800149d 	.word	0x0800149d
 8001498:	080014b5 	.word	0x080014b5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	73fb      	strb	r3, [r7, #15]
      break;
 80014a0:	e030      	b.n	8001504 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d025      	beq.n	80014fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014b2:	e022      	b.n	80014fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014bc:	d11f      	bne.n	80014fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80014c2:	e01c      	b.n	80014fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d903      	bls.n	80014d2 <DMA_CheckFifoParam+0xb6>
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d003      	beq.n	80014d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80014d0:	e018      	b.n	8001504 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	73fb      	strb	r3, [r7, #15]
      break;
 80014d6:	e015      	b.n	8001504 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00e      	beq.n	8001502 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	73fb      	strb	r3, [r7, #15]
      break;
 80014e8:	e00b      	b.n	8001502 <DMA_CheckFifoParam+0xe6>
      break;
 80014ea:	bf00      	nop
 80014ec:	e00a      	b.n	8001504 <DMA_CheckFifoParam+0xe8>
      break;
 80014ee:	bf00      	nop
 80014f0:	e008      	b.n	8001504 <DMA_CheckFifoParam+0xe8>
      break;
 80014f2:	bf00      	nop
 80014f4:	e006      	b.n	8001504 <DMA_CheckFifoParam+0xe8>
      break;
 80014f6:	bf00      	nop
 80014f8:	e004      	b.n	8001504 <DMA_CheckFifoParam+0xe8>
      break;
 80014fa:	bf00      	nop
 80014fc:	e002      	b.n	8001504 <DMA_CheckFifoParam+0xe8>
      break;   
 80014fe:	bf00      	nop
 8001500:	e000      	b.n	8001504 <DMA_CheckFifoParam+0xe8>
      break;
 8001502:	bf00      	nop
    }
  } 
  
  return status; 
 8001504:	7bfb      	ldrb	r3, [r7, #15]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop

08001514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001514:	b480      	push	{r7}
 8001516:	b089      	sub	sp, #36	; 0x24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
 800152e:	e165      	b.n	80017fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001530:	2201      	movs	r2, #1
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	429a      	cmp	r2, r3
 800154a:	f040 8154 	bne.w	80017f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	2b01      	cmp	r3, #1
 8001558:	d005      	beq.n	8001566 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001562:	2b02      	cmp	r3, #2
 8001564:	d130      	bne.n	80015c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800159c:	2201      	movs	r2, #1
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	f003 0201 	and.w	r2, r3, #1
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	2b03      	cmp	r3, #3
 80015d2:	d017      	beq.n	8001604 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	2203      	movs	r2, #3
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d123      	bne.n	8001658 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	08da      	lsrs	r2, r3, #3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3208      	adds	r2, #8
 8001618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800161c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	220f      	movs	r2, #15
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	691a      	ldr	r2, [r3, #16]
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	08da      	lsrs	r2, r3, #3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3208      	adds	r2, #8
 8001652:	69b9      	ldr	r1, [r7, #24]
 8001654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	2203      	movs	r2, #3
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0203 	and.w	r2, r3, #3
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 80ae 	beq.w	80017f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b5d      	ldr	r3, [pc, #372]	; (8001814 <HAL_GPIO_Init+0x300>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	4a5c      	ldr	r2, [pc, #368]	; (8001814 <HAL_GPIO_Init+0x300>)
 80016a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a8:	6453      	str	r3, [r2, #68]	; 0x44
 80016aa:	4b5a      	ldr	r3, [pc, #360]	; (8001814 <HAL_GPIO_Init+0x300>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016b6:	4a58      	ldr	r2, [pc, #352]	; (8001818 <HAL_GPIO_Init+0x304>)
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	089b      	lsrs	r3, r3, #2
 80016bc:	3302      	adds	r3, #2
 80016be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	220f      	movs	r2, #15
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a4f      	ldr	r2, [pc, #316]	; (800181c <HAL_GPIO_Init+0x308>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d025      	beq.n	800172e <HAL_GPIO_Init+0x21a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a4e      	ldr	r2, [pc, #312]	; (8001820 <HAL_GPIO_Init+0x30c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d01f      	beq.n	800172a <HAL_GPIO_Init+0x216>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a4d      	ldr	r2, [pc, #308]	; (8001824 <HAL_GPIO_Init+0x310>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d019      	beq.n	8001726 <HAL_GPIO_Init+0x212>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a4c      	ldr	r2, [pc, #304]	; (8001828 <HAL_GPIO_Init+0x314>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d013      	beq.n	8001722 <HAL_GPIO_Init+0x20e>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a4b      	ldr	r2, [pc, #300]	; (800182c <HAL_GPIO_Init+0x318>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d00d      	beq.n	800171e <HAL_GPIO_Init+0x20a>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a4a      	ldr	r2, [pc, #296]	; (8001830 <HAL_GPIO_Init+0x31c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d007      	beq.n	800171a <HAL_GPIO_Init+0x206>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a49      	ldr	r2, [pc, #292]	; (8001834 <HAL_GPIO_Init+0x320>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d101      	bne.n	8001716 <HAL_GPIO_Init+0x202>
 8001712:	2306      	movs	r3, #6
 8001714:	e00c      	b.n	8001730 <HAL_GPIO_Init+0x21c>
 8001716:	2307      	movs	r3, #7
 8001718:	e00a      	b.n	8001730 <HAL_GPIO_Init+0x21c>
 800171a:	2305      	movs	r3, #5
 800171c:	e008      	b.n	8001730 <HAL_GPIO_Init+0x21c>
 800171e:	2304      	movs	r3, #4
 8001720:	e006      	b.n	8001730 <HAL_GPIO_Init+0x21c>
 8001722:	2303      	movs	r3, #3
 8001724:	e004      	b.n	8001730 <HAL_GPIO_Init+0x21c>
 8001726:	2302      	movs	r3, #2
 8001728:	e002      	b.n	8001730 <HAL_GPIO_Init+0x21c>
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <HAL_GPIO_Init+0x21c>
 800172e:	2300      	movs	r3, #0
 8001730:	69fa      	ldr	r2, [r7, #28]
 8001732:	f002 0203 	and.w	r2, r2, #3
 8001736:	0092      	lsls	r2, r2, #2
 8001738:	4093      	lsls	r3, r2
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001740:	4935      	ldr	r1, [pc, #212]	; (8001818 <HAL_GPIO_Init+0x304>)
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	089b      	lsrs	r3, r3, #2
 8001746:	3302      	adds	r3, #2
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800174e:	4b3a      	ldr	r3, [pc, #232]	; (8001838 <HAL_GPIO_Init+0x324>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001772:	4a31      	ldr	r2, [pc, #196]	; (8001838 <HAL_GPIO_Init+0x324>)
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001778:	4b2f      	ldr	r3, [pc, #188]	; (8001838 <HAL_GPIO_Init+0x324>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800179c:	4a26      	ldr	r2, [pc, #152]	; (8001838 <HAL_GPIO_Init+0x324>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017a2:	4b25      	ldr	r3, [pc, #148]	; (8001838 <HAL_GPIO_Init+0x324>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017c6:	4a1c      	ldr	r2, [pc, #112]	; (8001838 <HAL_GPIO_Init+0x324>)
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017cc:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <HAL_GPIO_Init+0x324>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017f0:	4a11      	ldr	r2, [pc, #68]	; (8001838 <HAL_GPIO_Init+0x324>)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3301      	adds	r3, #1
 80017fa:	61fb      	str	r3, [r7, #28]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	2b0f      	cmp	r3, #15
 8001800:	f67f ae96 	bls.w	8001530 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	3724      	adds	r7, #36	; 0x24
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	40013800 	.word	0x40013800
 800181c:	40020000 	.word	0x40020000
 8001820:	40020400 	.word	0x40020400
 8001824:	40020800 	.word	0x40020800
 8001828:	40020c00 	.word	0x40020c00
 800182c:	40021000 	.word	0x40021000
 8001830:	40021400 	.word	0x40021400
 8001834:	40021800 	.word	0x40021800
 8001838:	40013c00 	.word	0x40013c00

0800183c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800183c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800183e:	b08f      	sub	sp, #60	; 0x3c
 8001840:	af0a      	add	r7, sp, #40	; 0x28
 8001842:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e116      	b.n	8001a7c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	d106      	bne.n	800186e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f006 fba3 	bl	8007fb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2203      	movs	r2, #3
 8001872:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800187a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187e:	2b00      	cmp	r3, #0
 8001880:	d102      	bne.n	8001888 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f003 fa48 	bl	8004d22 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	687e      	ldr	r6, [r7, #4]
 800189a:	466d      	mov	r5, sp
 800189c:	f106 0410 	add.w	r4, r6, #16
 80018a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80018b0:	1d33      	adds	r3, r6, #4
 80018b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018b4:	6838      	ldr	r0, [r7, #0]
 80018b6:	f003 f91f 	bl	8004af8 <USB_CoreInit>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2202      	movs	r2, #2
 80018c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e0d7      	b.n	8001a7c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2100      	movs	r1, #0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f003 fa36 	bl	8004d44 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018d8:	2300      	movs	r3, #0
 80018da:	73fb      	strb	r3, [r7, #15]
 80018dc:	e04a      	b.n	8001974 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018de:	7bfa      	ldrb	r2, [r7, #15]
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	1a9b      	subs	r3, r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	440b      	add	r3, r1
 80018ec:	333d      	adds	r3, #61	; 0x3d
 80018ee:	2201      	movs	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018f2:	7bfa      	ldrb	r2, [r7, #15]
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	1a9b      	subs	r3, r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	440b      	add	r3, r1
 8001900:	333c      	adds	r3, #60	; 0x3c
 8001902:	7bfa      	ldrb	r2, [r7, #15]
 8001904:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001906:	7bfa      	ldrb	r2, [r7, #15]
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	b298      	uxth	r0, r3
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	1a9b      	subs	r3, r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	440b      	add	r3, r1
 8001918:	3342      	adds	r3, #66	; 0x42
 800191a:	4602      	mov	r2, r0
 800191c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800191e:	7bfa      	ldrb	r2, [r7, #15]
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	1a9b      	subs	r3, r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	440b      	add	r3, r1
 800192c:	333f      	adds	r3, #63	; 0x3f
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001932:	7bfa      	ldrb	r2, [r7, #15]
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	1a9b      	subs	r3, r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	440b      	add	r3, r1
 8001940:	3344      	adds	r3, #68	; 0x44
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001946:	7bfa      	ldrb	r2, [r7, #15]
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	1a9b      	subs	r3, r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	3348      	adds	r3, #72	; 0x48
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800195a:	7bfa      	ldrb	r2, [r7, #15]
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	4613      	mov	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	1a9b      	subs	r3, r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	440b      	add	r3, r1
 8001968:	3350      	adds	r3, #80	; 0x50
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	3301      	adds	r3, #1
 8001972:	73fb      	strb	r3, [r7, #15]
 8001974:	7bfa      	ldrb	r2, [r7, #15]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	429a      	cmp	r2, r3
 800197c:	d3af      	bcc.n	80018de <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800197e:	2300      	movs	r3, #0
 8001980:	73fb      	strb	r3, [r7, #15]
 8001982:	e044      	b.n	8001a0e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001984:	7bfa      	ldrb	r2, [r7, #15]
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	1a9b      	subs	r3, r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800199a:	7bfa      	ldrb	r2, [r7, #15]
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	1a9b      	subs	r3, r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	440b      	add	r3, r1
 80019a8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80019ac:	7bfa      	ldrb	r2, [r7, #15]
 80019ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019b0:	7bfa      	ldrb	r2, [r7, #15]
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	4613      	mov	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	1a9b      	subs	r3, r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019c6:	7bfa      	ldrb	r2, [r7, #15]
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	4613      	mov	r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	1a9b      	subs	r3, r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	440b      	add	r3, r1
 80019d4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019dc:	7bfa      	ldrb	r2, [r7, #15]
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	1a9b      	subs	r3, r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019f2:	7bfa      	ldrb	r2, [r7, #15]
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	4613      	mov	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	1a9b      	subs	r3, r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	440b      	add	r3, r1
 8001a00:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	73fb      	strb	r3, [r7, #15]
 8001a0e:	7bfa      	ldrb	r2, [r7, #15]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d3b5      	bcc.n	8001984 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	603b      	str	r3, [r7, #0]
 8001a1e:	687e      	ldr	r6, [r7, #4]
 8001a20:	466d      	mov	r5, sp
 8001a22:	f106 0410 	add.w	r4, r6, #16
 8001a26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a32:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a36:	1d33      	adds	r3, r6, #4
 8001a38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a3a:	6838      	ldr	r0, [r7, #0]
 8001a3c:	f003 f9ce 	bl	8004ddc <USB_DevInit>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d005      	beq.n	8001a52 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2202      	movs	r2, #2
 8001a4a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e014      	b.n	8001a7c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d102      	bne.n	8001a70 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f001 f892 	bl	8002b94 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f004 fa3d 	bl	8005ef4 <USB_DevDisconnect>

  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a84 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <HAL_PCD_Start+0x1c>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e020      	b.n	8001ae2 <HAL_PCD_Start+0x5e>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d109      	bne.n	8001ac4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d005      	beq.n	8001ac4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001abc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f003 f919 	bl	8004d00 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f004 f9ed 	bl	8005eb2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001aea:	b590      	push	{r4, r7, lr}
 8001aec:	b08d      	sub	sp, #52	; 0x34
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001af8:	6a3b      	ldr	r3, [r7, #32]
 8001afa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f004 faab 	bl	800605c <USB_GetMode>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f040 83ca 	bne.w	80022a2 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f004 fa0f 	bl	8005f36 <USB_ReadInterrupts>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 83c0 	beq.w	80022a0 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f004 fa06 	bl	8005f36 <USB_ReadInterrupts>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d107      	bne.n	8001b44 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	695a      	ldr	r2, [r3, #20]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f002 0202 	and.w	r2, r2, #2
 8001b42:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f004 f9f4 	bl	8005f36 <USB_ReadInterrupts>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	f003 0310 	and.w	r3, r3, #16
 8001b54:	2b10      	cmp	r3, #16
 8001b56:	d161      	bne.n	8001c1c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	699a      	ldr	r2, [r3, #24]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 0210 	bic.w	r2, r2, #16
 8001b66:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001b68:	6a3b      	ldr	r3, [r7, #32]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	f003 020f 	and.w	r2, r3, #15
 8001b74:	4613      	mov	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	1a9b      	subs	r3, r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	4413      	add	r3, r2
 8001b84:	3304      	adds	r3, #4
 8001b86:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	0c5b      	lsrs	r3, r3, #17
 8001b8c:	f003 030f 	and.w	r3, r3, #15
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d124      	bne.n	8001bde <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d035      	beq.n	8001c0c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	091b      	lsrs	r3, r3, #4
 8001ba8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001baa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	6a38      	ldr	r0, [r7, #32]
 8001bb4:	f004 f82b 	bl	8005c0e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	091b      	lsrs	r3, r3, #4
 8001bc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bc4:	441a      	add	r2, r3
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	699a      	ldr	r2, [r3, #24]
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	091b      	lsrs	r3, r3, #4
 8001bd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bd6:	441a      	add	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	619a      	str	r2, [r3, #24]
 8001bdc:	e016      	b.n	8001c0c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	0c5b      	lsrs	r3, r3, #17
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	2b06      	cmp	r3, #6
 8001be8:	d110      	bne.n	8001c0c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001bf0:	2208      	movs	r2, #8
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	6a38      	ldr	r0, [r7, #32]
 8001bf6:	f004 f80a 	bl	8005c0e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	699a      	ldr	r2, [r3, #24]
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c06:	441a      	add	r2, r3
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699a      	ldr	r2, [r3, #24]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0210 	orr.w	r2, r2, #16
 8001c1a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f004 f988 	bl	8005f36 <USB_ReadInterrupts>
 8001c26:	4603      	mov	r3, r0
 8001c28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c2c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001c30:	d16e      	bne.n	8001d10 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f004 f98e 	bl	8005f5c <USB_ReadDevAllOutEpInterrupt>
 8001c40:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001c42:	e062      	b.n	8001d0a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d057      	beq.n	8001cfe <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	4611      	mov	r1, r2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f004 f9b3 	bl	8005fc4 <USB_ReadDevOutEPInterrupt>
 8001c5e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00c      	beq.n	8001c84 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	015a      	lsls	r2, r3, #5
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	4413      	add	r3, r2
 8001c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c76:	461a      	mov	r2, r3
 8001c78:	2301      	movs	r3, #1
 8001c7a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001c7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 fdde 	bl	8002840 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00c      	beq.n	8001ca8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	015a      	lsls	r2, r3, #5
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	4413      	add	r3, r2
 8001c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	2308      	movs	r3, #8
 8001c9e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001ca0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 fed8 	bl	8002a58 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	f003 0310 	and.w	r3, r3, #16
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d008      	beq.n	8001cc4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	015a      	lsls	r2, r3, #5
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	4413      	add	r3, r2
 8001cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	2310      	movs	r3, #16
 8001cc2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	f003 0320 	and.w	r3, r3, #32
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d008      	beq.n	8001ce0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	015a      	lsls	r2, r3, #5
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cda:	461a      	mov	r2, r3
 8001cdc:	2320      	movs	r3, #32
 8001cde:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d009      	beq.n	8001cfe <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	015a      	lsls	r2, r3, #5
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cfc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	3301      	adds	r3, #1
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d06:	085b      	lsrs	r3, r3, #1
 8001d08:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d199      	bne.n	8001c44 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f004 f90e 	bl	8005f36 <USB_ReadInterrupts>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d24:	f040 80c0 	bne.w	8001ea8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f004 f92f 	bl	8005f90 <USB_ReadDevAllInEpInterrupt>
 8001d32:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001d38:	e0b2      	b.n	8001ea0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 80a7 	beq.w	8001e94 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	4611      	mov	r1, r2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f004 f955 	bl	8006000 <USB_ReadDevInEPInterrupt>
 8001d56:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d057      	beq.n	8001e12 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	f003 030f 	and.w	r3, r3, #15
 8001d68:	2201      	movs	r2, #1
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69f9      	ldr	r1, [r7, #28]
 8001d7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d82:	4013      	ands	r3, r2
 8001d84:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	015a      	lsls	r2, r3, #5
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d92:	461a      	mov	r2, r3
 8001d94:	2301      	movs	r3, #1
 8001d96:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d132      	bne.n	8001e06 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da4:	4613      	mov	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	1a9b      	subs	r3, r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	440b      	add	r3, r1
 8001dae:	3348      	adds	r3, #72	; 0x48
 8001db0:	6819      	ldr	r1, [r3, #0]
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db6:	4613      	mov	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	1a9b      	subs	r3, r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4403      	add	r3, r0
 8001dc0:	3344      	adds	r3, #68	; 0x44
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4419      	add	r1, r3
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dca:	4613      	mov	r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	1a9b      	subs	r3, r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4403      	add	r3, r0
 8001dd4:	3348      	adds	r3, #72	; 0x48
 8001dd6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d113      	bne.n	8001e06 <HAL_PCD_IRQHandler+0x31c>
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de2:	4613      	mov	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	1a9b      	subs	r3, r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	440b      	add	r3, r1
 8001dec:	3350      	adds	r3, #80	; 0x50
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d108      	bne.n	8001e06 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6818      	ldr	r0, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001dfe:	461a      	mov	r2, r3
 8001e00:	2101      	movs	r1, #1
 8001e02:	f004 f95d 	bl	80060c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f006 f952 	bl	80080b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d008      	beq.n	8001e2e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	015a      	lsls	r2, r3, #5
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	4413      	add	r3, r2
 8001e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e28:	461a      	mov	r2, r3
 8001e2a:	2308      	movs	r3, #8
 8001e2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	f003 0310 	and.w	r3, r3, #16
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d008      	beq.n	8001e4a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	015a      	lsls	r2, r3, #5
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	4413      	add	r3, r2
 8001e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e44:	461a      	mov	r2, r3
 8001e46:	2310      	movs	r3, #16
 8001e48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d008      	beq.n	8001e66 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	015a      	lsls	r2, r3, #5
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e60:	461a      	mov	r2, r3
 8001e62:	2340      	movs	r3, #64	; 0x40
 8001e64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d008      	beq.n	8001e82 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	015a      	lsls	r2, r3, #5
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	4413      	add	r3, r2
 8001e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	2302      	movs	r3, #2
 8001e80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001e8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 fc48 	bl	8002724 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	3301      	adds	r3, #1
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e9c:	085b      	lsrs	r3, r3, #1
 8001e9e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f47f af49 	bne.w	8001d3a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f004 f842 	bl	8005f36 <USB_ReadInterrupts>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001eb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ebc:	d122      	bne.n	8001f04 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	69fa      	ldr	r2, [r7, #28]
 8001ec8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ecc:	f023 0301 	bic.w	r3, r3, #1
 8001ed0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d108      	bne.n	8001eee <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f006 fb34 	bl	8008554 <HAL_PCDEx_LPM_Callback>
 8001eec:	e002      	b.n	8001ef4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f006 f958 	bl	80081a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	695a      	ldr	r2, [r3, #20]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001f02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f004 f814 	bl	8005f36 <USB_ReadInterrupts>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f18:	d112      	bne.n	8001f40 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d102      	bne.n	8001f30 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f006 f914 	bl	8008158 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695a      	ldr	r2, [r3, #20]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001f3e:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f003 fff6 	bl	8005f36 <USB_ReadInterrupts>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f54:	d121      	bne.n	8001f9a <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	695a      	ldr	r2, [r3, #20]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001f64:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d111      	bne.n	8001f94 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7e:	089b      	lsrs	r3, r3, #2
 8001f80:	f003 020f 	and.w	r2, r3, #15
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f006 fae1 	bl	8008554 <HAL_PCDEx_LPM_Callback>
 8001f92:	e002      	b.n	8001f9a <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f006 f8df 	bl	8008158 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f003 ffc9 	bl	8005f36 <USB_ReadInterrupts>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fae:	f040 80c7 	bne.w	8002140 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fc0:	f023 0301 	bic.w	r3, r3, #1
 8001fc4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2110      	movs	r1, #16
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f003 f863 	bl	8005098 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fd6:	e056      	b.n	8002086 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fda:	015a      	lsls	r2, r3, #5
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	4413      	add	r3, r2
 8001fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001fea:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fee:	015a      	lsls	r2, r3, #5
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ffc:	0151      	lsls	r1, r2, #5
 8001ffe:	69fa      	ldr	r2, [r7, #28]
 8002000:	440a      	add	r2, r1
 8002002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002006:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800200a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800200c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200e:	015a      	lsls	r2, r3, #5
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	4413      	add	r3, r2
 8002014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800201c:	0151      	lsls	r1, r2, #5
 800201e:	69fa      	ldr	r2, [r7, #28]
 8002020:	440a      	add	r2, r1
 8002022:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002026:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800202a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800202c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800202e:	015a      	lsls	r2, r3, #5
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	4413      	add	r3, r2
 8002034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002038:	461a      	mov	r2, r3
 800203a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800203e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002042:	015a      	lsls	r2, r3, #5
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	4413      	add	r3, r2
 8002048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002050:	0151      	lsls	r1, r2, #5
 8002052:	69fa      	ldr	r2, [r7, #28]
 8002054:	440a      	add	r2, r1
 8002056:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800205a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800205e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002062:	015a      	lsls	r2, r3, #5
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	4413      	add	r3, r2
 8002068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002070:	0151      	lsls	r1, r2, #5
 8002072:	69fa      	ldr	r2, [r7, #28]
 8002074:	440a      	add	r2, r1
 8002076:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800207a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800207e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002082:	3301      	adds	r3, #1
 8002084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800208c:	429a      	cmp	r2, r3
 800208e:	d3a3      	bcc.n	8001fd8 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	69fa      	ldr	r2, [r7, #28]
 800209a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800209e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80020a2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d016      	beq.n	80020da <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020b6:	69fa      	ldr	r2, [r7, #28]
 80020b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020bc:	f043 030b 	orr.w	r3, r3, #11
 80020c0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020cc:	69fa      	ldr	r2, [r7, #28]
 80020ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020d2:	f043 030b 	orr.w	r3, r3, #11
 80020d6:	6453      	str	r3, [r2, #68]	; 0x44
 80020d8:	e015      	b.n	8002106 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	69fa      	ldr	r2, [r7, #28]
 80020e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020ec:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80020f0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	69fa      	ldr	r2, [r7, #28]
 80020fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002100:	f043 030b 	orr.w	r3, r3, #11
 8002104:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	69fa      	ldr	r2, [r7, #28]
 8002110:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002114:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002118:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6818      	ldr	r0, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800212a:	461a      	mov	r2, r3
 800212c:	f003 ffc8 	bl	80060c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695a      	ldr	r2, [r3, #20]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800213e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f003 fef6 	bl	8005f36 <USB_ReadInterrupts>
 800214a:	4603      	mov	r3, r0
 800214c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002150:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002154:	d124      	bne.n	80021a0 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f003 ff8c 	bl	8006078 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f002 fff4 	bl	8005152 <USB_GetDevSpeed>
 800216a:	4603      	mov	r3, r0
 800216c:	461a      	mov	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681c      	ldr	r4, [r3, #0]
 8002176:	f000 fe67 	bl	8002e48 <HAL_RCC_GetHCLKFreq>
 800217a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002180:	b2db      	uxtb	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	4620      	mov	r0, r4
 8002186:	f002 fd19 	bl	8004bbc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f005 ffbb 	bl	8008106 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	695a      	ldr	r2, [r3, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800219e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f003 fec6 	bl	8005f36 <USB_ReadInterrupts>
 80021aa:	4603      	mov	r3, r0
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d10a      	bne.n	80021ca <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f005 ff98 	bl	80080ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	695a      	ldr	r2, [r3, #20]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f002 0208 	and.w	r2, r2, #8
 80021c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f003 feb1 	bl	8005f36 <USB_ReadInterrupts>
 80021d4:	4603      	mov	r3, r0
 80021d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021de:	d10f      	bne.n	8002200 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	4619      	mov	r1, r3
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f005 fffa 	bl	80081e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	695a      	ldr	r2, [r3, #20]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80021fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f003 fe96 	bl	8005f36 <USB_ReadInterrupts>
 800220a:	4603      	mov	r3, r0
 800220c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002210:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002214:	d10f      	bne.n	8002236 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002216:	2300      	movs	r3, #0
 8002218:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	b2db      	uxtb	r3, r3
 800221e:	4619      	mov	r1, r3
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f005 ffcd 	bl	80081c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	695a      	ldr	r2, [r3, #20]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002234:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f003 fe7b 	bl	8005f36 <USB_ReadInterrupts>
 8002240:	4603      	mov	r3, r0
 8002242:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800224a:	d10a      	bne.n	8002262 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f005 ffdb 	bl	8008208 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	695a      	ldr	r2, [r3, #20]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002260:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f003 fe65 	bl	8005f36 <USB_ReadInterrupts>
 800226c:	4603      	mov	r3, r0
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	2b04      	cmp	r3, #4
 8002274:	d115      	bne.n	80022a2 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b00      	cmp	r3, #0
 8002286:	d002      	beq.n	800228e <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f005 ffcb 	bl	8008224 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6859      	ldr	r1, [r3, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	430a      	orrs	r2, r1
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	e000      	b.n	80022a2 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80022a0:	bf00      	nop
    }
  }
}
 80022a2:	3734      	adds	r7, #52	; 0x34
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd90      	pop	{r4, r7, pc}

080022a8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_PCD_SetAddress+0x1a>
 80022be:	2302      	movs	r3, #2
 80022c0:	e013      	b.n	80022ea <HAL_PCD_SetAddress+0x42>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	78fa      	ldrb	r2, [r7, #3]
 80022ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	78fa      	ldrb	r2, [r7, #3]
 80022d8:	4611      	mov	r1, r2
 80022da:	4618      	mov	r0, r3
 80022dc:	f003 fdc3 	bl	8005e66 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b084      	sub	sp, #16
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	4608      	mov	r0, r1
 80022fc:	4611      	mov	r1, r2
 80022fe:	461a      	mov	r2, r3
 8002300:	4603      	mov	r3, r0
 8002302:	70fb      	strb	r3, [r7, #3]
 8002304:	460b      	mov	r3, r1
 8002306:	803b      	strh	r3, [r7, #0]
 8002308:	4613      	mov	r3, r2
 800230a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800230c:	2300      	movs	r3, #0
 800230e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002310:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002314:	2b00      	cmp	r3, #0
 8002316:	da0f      	bge.n	8002338 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	f003 020f 	and.w	r2, r3, #15
 800231e:	4613      	mov	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	1a9b      	subs	r3, r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	3338      	adds	r3, #56	; 0x38
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	4413      	add	r3, r2
 800232c:	3304      	adds	r3, #4
 800232e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2201      	movs	r2, #1
 8002334:	705a      	strb	r2, [r3, #1]
 8002336:	e00f      	b.n	8002358 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	f003 020f 	and.w	r2, r3, #15
 800233e:	4613      	mov	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	1a9b      	subs	r3, r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	3304      	adds	r3, #4
 8002350:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002358:	78fb      	ldrb	r3, [r7, #3]
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	b2da      	uxtb	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002364:	883a      	ldrh	r2, [r7, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	78ba      	ldrb	r2, [r7, #2]
 800236e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	785b      	ldrb	r3, [r3, #1]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d004      	beq.n	8002382 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	b29a      	uxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002382:	78bb      	ldrb	r3, [r7, #2]
 8002384:	2b02      	cmp	r3, #2
 8002386:	d102      	bne.n	800238e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002394:	2b01      	cmp	r3, #1
 8002396:	d101      	bne.n	800239c <HAL_PCD_EP_Open+0xaa>
 8002398:	2302      	movs	r3, #2
 800239a:	e00e      	b.n	80023ba <HAL_PCD_EP_Open+0xc8>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68f9      	ldr	r1, [r7, #12]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f002 fef6 	bl	800519c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80023b8:	7afb      	ldrb	r3, [r7, #11]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b084      	sub	sp, #16
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	460b      	mov	r3, r1
 80023cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	da0f      	bge.n	80023f6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023d6:	78fb      	ldrb	r3, [r7, #3]
 80023d8:	f003 020f 	and.w	r2, r3, #15
 80023dc:	4613      	mov	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	1a9b      	subs	r3, r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	3338      	adds	r3, #56	; 0x38
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	4413      	add	r3, r2
 80023ea:	3304      	adds	r3, #4
 80023ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2201      	movs	r2, #1
 80023f2:	705a      	strb	r2, [r3, #1]
 80023f4:	e00f      	b.n	8002416 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	f003 020f 	and.w	r2, r3, #15
 80023fc:	4613      	mov	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	4413      	add	r3, r2
 800240c:	3304      	adds	r3, #4
 800240e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002416:	78fb      	ldrb	r3, [r7, #3]
 8002418:	f003 030f 	and.w	r3, r3, #15
 800241c:	b2da      	uxtb	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <HAL_PCD_EP_Close+0x6e>
 800242c:	2302      	movs	r3, #2
 800242e:	e00e      	b.n	800244e <HAL_PCD_EP_Close+0x8c>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68f9      	ldr	r1, [r7, #12]
 800243e:	4618      	mov	r0, r3
 8002440:	f002 ff34 	bl	80052ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b086      	sub	sp, #24
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	607a      	str	r2, [r7, #4]
 8002460:	603b      	str	r3, [r7, #0]
 8002462:	460b      	mov	r3, r1
 8002464:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002466:	7afb      	ldrb	r3, [r7, #11]
 8002468:	f003 020f 	and.w	r2, r3, #15
 800246c:	4613      	mov	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	1a9b      	subs	r3, r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	4413      	add	r3, r2
 800247c:	3304      	adds	r3, #4
 800247e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	2200      	movs	r2, #0
 8002490:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	2200      	movs	r2, #0
 8002496:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002498:	7afb      	ldrb	r3, [r7, #11]
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d102      	bne.n	80024b2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024b2:	7afb      	ldrb	r3, [r7, #11]
 80024b4:	f003 030f 	and.w	r3, r3, #15
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d109      	bne.n	80024d0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6818      	ldr	r0, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	461a      	mov	r2, r3
 80024c8:	6979      	ldr	r1, [r7, #20]
 80024ca:	f003 fa0f 	bl	80058ec <USB_EP0StartXfer>
 80024ce:	e008      	b.n	80024e2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6818      	ldr	r0, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	461a      	mov	r2, r3
 80024dc:	6979      	ldr	r1, [r7, #20]
 80024de:	f002 ffc1 	bl	8005464 <USB_EPStartXfer>
  }

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80024f8:	78fb      	ldrb	r3, [r7, #3]
 80024fa:	f003 020f 	and.w	r2, r3, #15
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	1a9b      	subs	r3, r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800250e:	681b      	ldr	r3, [r3, #0]
}
 8002510:	4618      	mov	r0, r3
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	607a      	str	r2, [r7, #4]
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	460b      	mov	r3, r1
 800252a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800252c:	7afb      	ldrb	r3, [r7, #11]
 800252e:	f003 020f 	and.w	r2, r3, #15
 8002532:	4613      	mov	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	1a9b      	subs	r3, r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	3338      	adds	r3, #56	; 0x38
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	4413      	add	r3, r2
 8002540:	3304      	adds	r3, #4
 8002542:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	2200      	movs	r2, #0
 8002554:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	2201      	movs	r2, #1
 800255a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800255c:	7afb      	ldrb	r3, [r7, #11]
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	b2da      	uxtb	r2, r3
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d102      	bne.n	8002576 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002576:	7afb      	ldrb	r3, [r7, #11]
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	2b00      	cmp	r3, #0
 800257e:	d109      	bne.n	8002594 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	6979      	ldr	r1, [r7, #20]
 800258e:	f003 f9ad 	bl	80058ec <USB_EP0StartXfer>
 8002592:	e008      	b.n	80025a6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6818      	ldr	r0, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	461a      	mov	r2, r3
 80025a0:	6979      	ldr	r1, [r7, #20]
 80025a2:	f002 ff5f 	bl	8005464 <USB_EPStartXfer>
  }

  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80025bc:	78fb      	ldrb	r3, [r7, #3]
 80025be:	f003 020f 	and.w	r2, r3, #15
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d901      	bls.n	80025ce <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e050      	b.n	8002670 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	da0f      	bge.n	80025f6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025d6:	78fb      	ldrb	r3, [r7, #3]
 80025d8:	f003 020f 	and.w	r2, r3, #15
 80025dc:	4613      	mov	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	3338      	adds	r3, #56	; 0x38
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	3304      	adds	r3, #4
 80025ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2201      	movs	r2, #1
 80025f2:	705a      	strb	r2, [r3, #1]
 80025f4:	e00d      	b.n	8002612 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80025f6:	78fa      	ldrb	r2, [r7, #3]
 80025f8:	4613      	mov	r3, r2
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	1a9b      	subs	r3, r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	4413      	add	r3, r2
 8002608:	3304      	adds	r3, #4
 800260a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2201      	movs	r2, #1
 8002616:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002618:	78fb      	ldrb	r3, [r7, #3]
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	b2da      	uxtb	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800262a:	2b01      	cmp	r3, #1
 800262c:	d101      	bne.n	8002632 <HAL_PCD_EP_SetStall+0x82>
 800262e:	2302      	movs	r3, #2
 8002630:	e01e      	b.n	8002670 <HAL_PCD_EP_SetStall+0xc0>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68f9      	ldr	r1, [r7, #12]
 8002640:	4618      	mov	r0, r3
 8002642:	f003 fb3c 	bl	8005cbe <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002646:	78fb      	ldrb	r3, [r7, #3]
 8002648:	f003 030f 	and.w	r3, r3, #15
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10a      	bne.n	8002666 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	b2d9      	uxtb	r1, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002660:	461a      	mov	r2, r3
 8002662:	f003 fd2d 	bl	80060c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002684:	78fb      	ldrb	r3, [r7, #3]
 8002686:	f003 020f 	and.w	r2, r3, #15
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	429a      	cmp	r2, r3
 8002690:	d901      	bls.n	8002696 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e042      	b.n	800271c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002696:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800269a:	2b00      	cmp	r3, #0
 800269c:	da0f      	bge.n	80026be <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800269e:	78fb      	ldrb	r3, [r7, #3]
 80026a0:	f003 020f 	and.w	r2, r3, #15
 80026a4:	4613      	mov	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	3338      	adds	r3, #56	; 0x38
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	4413      	add	r3, r2
 80026b2:	3304      	adds	r3, #4
 80026b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2201      	movs	r2, #1
 80026ba:	705a      	strb	r2, [r3, #1]
 80026bc:	e00f      	b.n	80026de <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026be:	78fb      	ldrb	r3, [r7, #3]
 80026c0:	f003 020f 	and.w	r2, r3, #15
 80026c4:	4613      	mov	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	1a9b      	subs	r3, r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	4413      	add	r3, r2
 80026d4:	3304      	adds	r3, #4
 80026d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d101      	bne.n	80026fe <HAL_PCD_EP_ClrStall+0x86>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e00e      	b.n	800271c <HAL_PCD_EP_ClrStall+0xa4>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68f9      	ldr	r1, [r7, #12]
 800270c:	4618      	mov	r0, r3
 800270e:	f003 fb44 	bl	8005d9a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08a      	sub	sp, #40	; 0x28
 8002728:	af02      	add	r7, sp, #8
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	4613      	mov	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	1a9b      	subs	r3, r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	3338      	adds	r3, #56	; 0x38
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	4413      	add	r3, r2
 8002748:	3304      	adds	r3, #4
 800274a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	699a      	ldr	r2, [r3, #24]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	429a      	cmp	r2, r3
 8002756:	d901      	bls.n	800275c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e06c      	b.n	8002836 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	695a      	ldr	r2, [r3, #20]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	69fa      	ldr	r2, [r7, #28]
 800276e:	429a      	cmp	r2, r3
 8002770:	d902      	bls.n	8002778 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	3303      	adds	r3, #3
 800277c:	089b      	lsrs	r3, r3, #2
 800277e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002780:	e02b      	b.n	80027da <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	695a      	ldr	r2, [r3, #20]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	69fa      	ldr	r2, [r7, #28]
 8002794:	429a      	cmp	r2, r3
 8002796:	d902      	bls.n	800279e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3303      	adds	r3, #3
 80027a2:	089b      	lsrs	r3, r3, #2
 80027a4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	68d9      	ldr	r1, [r3, #12]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	4603      	mov	r3, r0
 80027bc:	6978      	ldr	r0, [r7, #20]
 80027be:	f003 f9e8 	bl	8005b92 <USB_WritePacket>

    ep->xfer_buff  += len;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	441a      	add	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	699a      	ldr	r2, [r3, #24]
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	441a      	add	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d809      	bhi.n	8002804 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	699a      	ldr	r2, [r3, #24]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d203      	bcs.n	8002804 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1be      	bne.n	8002782 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	695a      	ldr	r2, [r3, #20]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	429a      	cmp	r2, r3
 800280e:	d811      	bhi.n	8002834 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	2201      	movs	r2, #1
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	43db      	mvns	r3, r3
 800282a:	6939      	ldr	r1, [r7, #16]
 800282c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002830:	4013      	ands	r3, r2
 8002832:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3720      	adds	r7, #32
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	333c      	adds	r3, #60	; 0x3c
 8002858:	3304      	adds	r3, #4
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	015a      	lsls	r2, r3, #5
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4413      	add	r3, r2
 8002866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	2b01      	cmp	r3, #1
 8002874:	f040 80a0 	bne.w	80029b8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d015      	beq.n	80028ae <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	4a72      	ldr	r2, [pc, #456]	; (8002a50 <PCD_EP_OutXfrComplete_int+0x210>)
 8002886:	4293      	cmp	r3, r2
 8002888:	f240 80dd 	bls.w	8002a46 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 80d7 	beq.w	8002a46 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028a4:	461a      	mov	r2, r3
 80028a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028aa:	6093      	str	r3, [r2, #8]
 80028ac:	e0cb      	b.n	8002a46 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	f003 0320 	and.w	r3, r3, #32
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d009      	beq.n	80028cc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	015a      	lsls	r2, r3, #5
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	4413      	add	r3, r2
 80028c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028c4:	461a      	mov	r2, r3
 80028c6:	2320      	movs	r3, #32
 80028c8:	6093      	str	r3, [r2, #8]
 80028ca:	e0bc      	b.n	8002a46 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f040 80b7 	bne.w	8002a46 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4a5d      	ldr	r2, [pc, #372]	; (8002a50 <PCD_EP_OutXfrComplete_int+0x210>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d90f      	bls.n	8002900 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00a      	beq.n	8002900 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	015a      	lsls	r2, r3, #5
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028f6:	461a      	mov	r2, r3
 80028f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028fc:	6093      	str	r3, [r2, #8]
 80028fe:	e0a2      	b.n	8002a46 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	4613      	mov	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002912:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	0159      	lsls	r1, r3, #5
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	440b      	add	r3, r1
 800291c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002926:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	4613      	mov	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	1a9b      	subs	r3, r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4403      	add	r3, r0
 8002936:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800293a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	4613      	mov	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	1a9b      	subs	r3, r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800294e:	6819      	ldr	r1, [r3, #0]
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	4613      	mov	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4403      	add	r3, r0
 800295e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4419      	add	r1, r3
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	4613      	mov	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	1a9b      	subs	r3, r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4403      	add	r3, r0
 8002974:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002978:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d114      	bne.n	80029aa <PCD_EP_OutXfrComplete_int+0x16a>
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	4613      	mov	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d108      	bne.n	80029aa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029a2:	461a      	mov	r2, r3
 80029a4:	2101      	movs	r1, #1
 80029a6:	f003 fb8b 	bl	80060c0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	4619      	mov	r1, r3
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f005 fb65 	bl	8008080 <HAL_PCD_DataOutStageCallback>
 80029b6:	e046      	b.n	8002a46 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4a26      	ldr	r2, [pc, #152]	; (8002a54 <PCD_EP_OutXfrComplete_int+0x214>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d124      	bne.n	8002a0a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00a      	beq.n	80029e0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	015a      	lsls	r2, r3, #5
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	4413      	add	r3, r2
 80029d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d6:	461a      	mov	r2, r3
 80029d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029dc:	6093      	str	r3, [r2, #8]
 80029de:	e032      	b.n	8002a46 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	f003 0320 	and.w	r3, r3, #32
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d008      	beq.n	80029fc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	015a      	lsls	r2, r3, #5
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	4413      	add	r3, r2
 80029f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029f6:	461a      	mov	r2, r3
 80029f8:	2320      	movs	r3, #32
 80029fa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	4619      	mov	r1, r3
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f005 fb3c 	bl	8008080 <HAL_PCD_DataOutStageCallback>
 8002a08:	e01d      	b.n	8002a46 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d114      	bne.n	8002a3a <PCD_EP_OutXfrComplete_int+0x1fa>
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	4613      	mov	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	1a9b      	subs	r3, r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d108      	bne.n	8002a3a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6818      	ldr	r0, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a32:	461a      	mov	r2, r3
 8002a34:	2100      	movs	r1, #0
 8002a36:	f003 fb43 	bl	80060c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	4619      	mov	r1, r3
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f005 fb1d 	bl	8008080 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	4f54300a 	.word	0x4f54300a
 8002a54:	4f54310a 	.word	0x4f54310a

08002a58 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	333c      	adds	r3, #60	; 0x3c
 8002a70:	3304      	adds	r3, #4
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	015a      	lsls	r2, r3, #5
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4a15      	ldr	r2, [pc, #84]	; (8002ae0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d90e      	bls.n	8002aac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d009      	beq.n	8002aac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	015a      	lsls	r2, r3, #5
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002aaa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f005 fad5 	bl	800805c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4a0a      	ldr	r2, [pc, #40]	; (8002ae0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d90c      	bls.n	8002ad4 <PCD_EP_OutSetupPacket_int+0x7c>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d108      	bne.n	8002ad4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002acc:	461a      	mov	r2, r3
 8002ace:	2101      	movs	r1, #1
 8002ad0:	f003 faf6 	bl	80060c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	4f54300a 	.word	0x4f54300a

08002ae4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	70fb      	strb	r3, [r7, #3]
 8002af0:	4613      	mov	r3, r2
 8002af2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002afc:	78fb      	ldrb	r3, [r7, #3]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d107      	bne.n	8002b12 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b02:	883b      	ldrh	r3, [r7, #0]
 8002b04:	0419      	lsls	r1, r3, #16
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	629a      	str	r2, [r3, #40]	; 0x28
 8002b10:	e028      	b.n	8002b64 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b18:	0c1b      	lsrs	r3, r3, #16
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b20:	2300      	movs	r3, #0
 8002b22:	73fb      	strb	r3, [r7, #15]
 8002b24:	e00d      	b.n	8002b42 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
 8002b2c:	3340      	adds	r3, #64	; 0x40
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	0c1b      	lsrs	r3, r3, #16
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	4413      	add	r3, r2
 8002b3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b3c:	7bfb      	ldrb	r3, [r7, #15]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	73fb      	strb	r3, [r7, #15]
 8002b42:	7bfa      	ldrb	r2, [r7, #15]
 8002b44:	78fb      	ldrb	r3, [r7, #3]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d3ec      	bcc.n	8002b26 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002b4c:	883b      	ldrh	r3, [r7, #0]
 8002b4e:	0418      	lsls	r0, r3, #16
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6819      	ldr	r1, [r3, #0]
 8002b54:	78fb      	ldrb	r3, [r7, #3]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	4302      	orrs	r2, r0
 8002b5c:	3340      	adds	r3, #64	; 0x40
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	887a      	ldrh	r2, [r7, #2]
 8002b84:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc6:	f043 0303 	orr.w	r3, r3, #3
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	603b      	str	r3, [r7, #0]
 8002bea:	4b20      	ldr	r3, [pc, #128]	; (8002c6c <HAL_PWREx_EnableOverDrive+0x90>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	4a1f      	ldr	r2, [pc, #124]	; (8002c6c <HAL_PWREx_EnableOverDrive+0x90>)
 8002bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf6:	4b1d      	ldr	r3, [pc, #116]	; (8002c6c <HAL_PWREx_EnableOverDrive+0x90>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfe:	603b      	str	r3, [r7, #0]
 8002c00:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c02:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <HAL_PWREx_EnableOverDrive+0x94>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c08:	f7fd ffd2 	bl	8000bb0 <HAL_GetTick>
 8002c0c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c0e:	e009      	b.n	8002c24 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c10:	f7fd ffce 	bl	8000bb0 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c1e:	d901      	bls.n	8002c24 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e01f      	b.n	8002c64 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c24:	4b13      	ldr	r3, [pc, #76]	; (8002c74 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c30:	d1ee      	bne.n	8002c10 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c32:	4b11      	ldr	r3, [pc, #68]	; (8002c78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c34:	2201      	movs	r2, #1
 8002c36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c38:	f7fd ffba 	bl	8000bb0 <HAL_GetTick>
 8002c3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c3e:	e009      	b.n	8002c54 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c40:	f7fd ffb6 	bl	8000bb0 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c4e:	d901      	bls.n	8002c54 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e007      	b.n	8002c64 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c54:	4b07      	ldr	r3, [pc, #28]	; (8002c74 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c60:	d1ee      	bne.n	8002c40 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	420e0040 	.word	0x420e0040
 8002c74:	40007000 	.word	0x40007000
 8002c78:	420e0044 	.word	0x420e0044

08002c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0cc      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c90:	4b68      	ldr	r3, [pc, #416]	; (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 030f 	and.w	r3, r3, #15
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d90c      	bls.n	8002cb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9e:	4b65      	ldr	r3, [pc, #404]	; (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca6:	4b63      	ldr	r3, [pc, #396]	; (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d001      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0b8      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d020      	beq.n	8002d06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d005      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cd0:	4b59      	ldr	r3, [pc, #356]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	4a58      	ldr	r2, [pc, #352]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0308 	and.w	r3, r3, #8
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d005      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ce8:	4b53      	ldr	r3, [pc, #332]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	4a52      	ldr	r2, [pc, #328]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cf4:	4b50      	ldr	r3, [pc, #320]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	494d      	ldr	r1, [pc, #308]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d044      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d107      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d1a:	4b47      	ldr	r3, [pc, #284]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d119      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e07f      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d003      	beq.n	8002d3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d36:	2b03      	cmp	r3, #3
 8002d38:	d107      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3a:	4b3f      	ldr	r3, [pc, #252]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d109      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e06f      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4a:	4b3b      	ldr	r3, [pc, #236]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e067      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d5a:	4b37      	ldr	r3, [pc, #220]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f023 0203 	bic.w	r2, r3, #3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	4934      	ldr	r1, [pc, #208]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d6c:	f7fd ff20 	bl	8000bb0 <HAL_GetTick>
 8002d70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d72:	e00a      	b.n	8002d8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d74:	f7fd ff1c 	bl	8000bb0 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e04f      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8a:	4b2b      	ldr	r3, [pc, #172]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 020c 	and.w	r2, r3, #12
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d1eb      	bne.n	8002d74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d9c:	4b25      	ldr	r3, [pc, #148]	; (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 030f 	and.w	r3, r3, #15
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d20c      	bcs.n	8002dc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002daa:	4b22      	ldr	r3, [pc, #136]	; (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db2:	4b20      	ldr	r3, [pc, #128]	; (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e032      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dd0:	4b19      	ldr	r3, [pc, #100]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	4916      	ldr	r1, [pc, #88]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d009      	beq.n	8002e02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dee:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	490e      	ldr	r1, [pc, #56]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e02:	f000 fd9f 	bl	8003944 <HAL_RCC_GetSysClockFreq>
 8002e06:	4602      	mov	r2, r0
 8002e08:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	490a      	ldr	r1, [pc, #40]	; (8002e3c <HAL_RCC_ClockConfig+0x1c0>)
 8002e14:	5ccb      	ldrb	r3, [r1, r3]
 8002e16:	fa22 f303 	lsr.w	r3, r2, r3
 8002e1a:	4a09      	ldr	r2, [pc, #36]	; (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e1e:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fd fe80 	bl	8000b28 <HAL_InitTick>

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40023c00 	.word	0x40023c00
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	08008728 	.word	0x08008728
 8002e40:	20000000 	.word	0x20000000
 8002e44:	20000004 	.word	0x20000004

08002e48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e4c:	4b03      	ldr	r3, [pc, #12]	; (8002e5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	20000000 	.word	0x20000000

08002e60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08c      	sub	sp, #48	; 0x30
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d010      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002e98:	4b6f      	ldr	r3, [pc, #444]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e9e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea6:	496c      	ldr	r1, [pc, #432]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d010      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002ec6:	4b64      	ldr	r3, [pc, #400]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ecc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed4:	4960      	ldr	r1, [pc, #384]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d017      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ef4:	4b58      	ldr	r3, [pc, #352]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002efa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	4955      	ldr	r1, [pc, #340]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f12:	d101      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002f14:	2301      	movs	r3, #1
 8002f16:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002f20:	2301      	movs	r3, #1
 8002f22:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d017      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f30:	4b49      	ldr	r3, [pc, #292]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3e:	4946      	ldr	r1, [pc, #280]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002f50:	2301      	movs	r3, #1
 8002f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0320 	and.w	r3, r3, #32
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 808a 	beq.w	8003082 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	4b39      	ldr	r3, [pc, #228]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	4a38      	ldr	r2, [pc, #224]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f7e:	4b36      	ldr	r3, [pc, #216]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f86:	60bb      	str	r3, [r7, #8]
 8002f88:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002f8a:	4b34      	ldr	r3, [pc, #208]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a33      	ldr	r2, [pc, #204]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f94:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f96:	f7fd fe0b 	bl	8000bb0 <HAL_GetTick>
 8002f9a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002f9e:	f7fd fe07 	bl	8000bb0 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e278      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002fb0:	4b2a      	ldr	r3, [pc, #168]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0f0      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fbc:	4b26      	ldr	r3, [pc, #152]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fc4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fc6:	6a3b      	ldr	r3, [r7, #32]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d02f      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd4:	6a3a      	ldr	r2, [r7, #32]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d028      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fda:	4b1f      	ldr	r3, [pc, #124]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fe4:	4b1e      	ldr	r3, [pc, #120]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fea:	4b1d      	ldr	r3, [pc, #116]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002ff0:	4a19      	ldr	r2, [pc, #100]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ff6:	4b18      	ldr	r3, [pc, #96]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d114      	bne.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003002:	f7fd fdd5 	bl	8000bb0 <HAL_GetTick>
 8003006:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003008:	e00a      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800300a:	f7fd fdd1 	bl	8000bb0 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	f241 3288 	movw	r2, #5000	; 0x1388
 8003018:	4293      	cmp	r3, r2
 800301a:	d901      	bls.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e240      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003020:	4b0d      	ldr	r3, [pc, #52]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0ee      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003034:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003038:	d114      	bne.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800303a:	4b07      	ldr	r3, [pc, #28]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800304a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800304e:	4902      	ldr	r1, [pc, #8]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003050:	4313      	orrs	r3, r2
 8003052:	608b      	str	r3, [r1, #8]
 8003054:	e00c      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003056:	bf00      	nop
 8003058:	40023800 	.word	0x40023800
 800305c:	40007000 	.word	0x40007000
 8003060:	42470e40 	.word	0x42470e40
 8003064:	4b4a      	ldr	r3, [pc, #296]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	4a49      	ldr	r2, [pc, #292]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800306a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800306e:	6093      	str	r3, [r2, #8]
 8003070:	4b47      	ldr	r3, [pc, #284]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003072:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800307c:	4944      	ldr	r1, [pc, #272]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800307e:	4313      	orrs	r3, r2
 8003080:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	2b00      	cmp	r3, #0
 800308c:	d004      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003094:	4b3f      	ldr	r3, [pc, #252]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003096:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00a      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80030a4:	4b3a      	ldr	r3, [pc, #232]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b2:	4937      	ldr	r1, [pc, #220]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00a      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030c6:	4b32      	ldr	r3, [pc, #200]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030cc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d4:	492e      	ldr	r1, [pc, #184]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d011      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80030e8:	4b29      	ldr	r3, [pc, #164]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ee:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f6:	4926      	ldr	r1, [pc, #152]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003102:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003106:	d101      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003108:	2301      	movs	r3, #1
 800310a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003118:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800311a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800311e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003126:	491a      	ldr	r1, [pc, #104]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003128:	4313      	orrs	r3, r2
 800312a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003136:	2b00      	cmp	r3, #0
 8003138:	d011      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800313a:	4b15      	ldr	r3, [pc, #84]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800313c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003140:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003148:	4911      	ldr	r1, [pc, #68]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003158:	d101      	bne.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800315a:	2301      	movs	r3, #1
 800315c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800315e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003160:	2b01      	cmp	r3, #1
 8003162:	d005      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800316c:	f040 80ff 	bne.w	800336e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003170:	4b09      	ldr	r3, [pc, #36]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003176:	f7fd fd1b 	bl	8000bb0 <HAL_GetTick>
 800317a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800317c:	e00e      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800317e:	f7fd fd17 	bl	8000bb0 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d907      	bls.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e188      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003190:	40023800 	.word	0x40023800
 8003194:	424711e0 	.word	0x424711e0
 8003198:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800319c:	4b7e      	ldr	r3, [pc, #504]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1ea      	bne.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d009      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d028      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d124      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80031d0:	4b71      	ldr	r3, [pc, #452]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031d6:	0c1b      	lsrs	r3, r3, #16
 80031d8:	f003 0303 	and.w	r3, r3, #3
 80031dc:	3301      	adds	r3, #1
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031e2:	4b6d      	ldr	r3, [pc, #436]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031e8:	0e1b      	lsrs	r3, r3, #24
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	019b      	lsls	r3, r3, #6
 80031fa:	431a      	orrs	r2, r3
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	085b      	lsrs	r3, r3, #1
 8003200:	3b01      	subs	r3, #1
 8003202:	041b      	lsls	r3, r3, #16
 8003204:	431a      	orrs	r2, r3
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	061b      	lsls	r3, r3, #24
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	071b      	lsls	r3, r3, #28
 8003212:	4961      	ldr	r1, [pc, #388]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0304 	and.w	r3, r3, #4
 8003222:	2b00      	cmp	r3, #0
 8003224:	d004      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800322e:	d00a      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003238:	2b00      	cmp	r3, #0
 800323a:	d035      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003240:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003244:	d130      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003246:	4b54      	ldr	r3, [pc, #336]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003248:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800324c:	0c1b      	lsrs	r3, r3, #16
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	3301      	adds	r3, #1
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003258:	4b4f      	ldr	r3, [pc, #316]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800325a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800325e:	0f1b      	lsrs	r3, r3, #28
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	019b      	lsls	r3, r3, #6
 8003270:	431a      	orrs	r2, r3
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	085b      	lsrs	r3, r3, #1
 8003276:	3b01      	subs	r3, #1
 8003278:	041b      	lsls	r3, r3, #16
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	061b      	lsls	r3, r3, #24
 8003282:	431a      	orrs	r2, r3
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	071b      	lsls	r3, r3, #28
 8003288:	4943      	ldr	r1, [pc, #268]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800328a:	4313      	orrs	r3, r2
 800328c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003290:	4b41      	ldr	r3, [pc, #260]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003292:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003296:	f023 021f 	bic.w	r2, r3, #31
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329e:	3b01      	subs	r3, #1
 80032a0:	493d      	ldr	r1, [pc, #244]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d029      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032bc:	d124      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80032be:	4b36      	ldr	r3, [pc, #216]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032c4:	0c1b      	lsrs	r3, r3, #16
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	3301      	adds	r3, #1
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032d0:	4b31      	ldr	r3, [pc, #196]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032d6:	0f1b      	lsrs	r3, r3, #28
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	019b      	lsls	r3, r3, #6
 80032e8:	431a      	orrs	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	085b      	lsrs	r3, r3, #1
 80032f0:	3b01      	subs	r3, #1
 80032f2:	041b      	lsls	r3, r3, #16
 80032f4:	431a      	orrs	r2, r3
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	061b      	lsls	r3, r3, #24
 80032fa:	431a      	orrs	r2, r3
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	071b      	lsls	r3, r3, #28
 8003300:	4925      	ldr	r1, [pc, #148]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003302:	4313      	orrs	r3, r2
 8003304:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003310:	2b00      	cmp	r3, #0
 8003312:	d016      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	019b      	lsls	r3, r3, #6
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	085b      	lsrs	r3, r3, #1
 8003326:	3b01      	subs	r3, #1
 8003328:	041b      	lsls	r3, r3, #16
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	061b      	lsls	r3, r3, #24
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	071b      	lsls	r3, r3, #28
 800333a:	4917      	ldr	r1, [pc, #92]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003342:	4b16      	ldr	r3, [pc, #88]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003344:	2201      	movs	r2, #1
 8003346:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003348:	f7fd fc32 	bl	8000bb0 <HAL_GetTick>
 800334c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003350:	f7fd fc2e 	bl	8000bb0 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e09f      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003362:	4b0d      	ldr	r3, [pc, #52]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f0      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800336e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003370:	2b01      	cmp	r3, #1
 8003372:	f040 8095 	bne.w	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003376:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800337c:	f7fd fc18 	bl	8000bb0 <HAL_GetTick>
 8003380:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003382:	e00f      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003384:	f7fd fc14 	bl	8000bb0 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d908      	bls.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e085      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003396:	bf00      	nop
 8003398:	40023800 	.word	0x40023800
 800339c:	42470068 	.word	0x42470068
 80033a0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033a4:	4b41      	ldr	r3, [pc, #260]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033b0:	d0e8      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0304 	and.w	r3, r3, #4
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d009      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d02b      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d127      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80033da:	4b34      	ldr	r3, [pc, #208]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e0:	0c1b      	lsrs	r3, r3, #16
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	3301      	adds	r3, #1
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	699a      	ldr	r2, [r3, #24]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	019b      	lsls	r3, r3, #6
 80033f6:	431a      	orrs	r2, r3
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	085b      	lsrs	r3, r3, #1
 80033fc:	3b01      	subs	r3, #1
 80033fe:	041b      	lsls	r3, r3, #16
 8003400:	431a      	orrs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	061b      	lsls	r3, r3, #24
 8003408:	4928      	ldr	r1, [pc, #160]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800340a:	4313      	orrs	r3, r2
 800340c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003410:	4b26      	ldr	r3, [pc, #152]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003412:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003416:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	3b01      	subs	r3, #1
 8003420:	021b      	lsls	r3, r3, #8
 8003422:	4922      	ldr	r1, [pc, #136]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003424:	4313      	orrs	r3, r2
 8003426:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003432:	2b00      	cmp	r3, #0
 8003434:	d01d      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800343e:	d118      	bne.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003440:	4b1a      	ldr	r3, [pc, #104]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003446:	0e1b      	lsrs	r3, r3, #24
 8003448:	f003 030f 	and.w	r3, r3, #15
 800344c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699a      	ldr	r2, [r3, #24]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	019b      	lsls	r3, r3, #6
 8003458:	431a      	orrs	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	085b      	lsrs	r3, r3, #1
 8003460:	3b01      	subs	r3, #1
 8003462:	041b      	lsls	r3, r3, #16
 8003464:	431a      	orrs	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	061b      	lsls	r3, r3, #24
 800346a:	4910      	ldr	r1, [pc, #64]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800346c:	4313      	orrs	r3, r2
 800346e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003472:	4b0f      	ldr	r3, [pc, #60]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003474:	2201      	movs	r2, #1
 8003476:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003478:	f7fd fb9a 	bl	8000bb0 <HAL_GetTick>
 800347c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800347e:	e008      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003480:	f7fd fb96 	bl	8000bb0 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e007      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003492:	4b06      	ldr	r3, [pc, #24]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800349a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800349e:	d1ef      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3730      	adds	r7, #48	; 0x30
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40023800 	.word	0x40023800
 80034b0:	42470070 	.word	0x42470070

080034b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b089      	sub	sp, #36	; 0x24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	60bb      	str	r3, [r7, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	2b07      	cmp	r3, #7
 80034da:	f200 8224 	bhi.w	8003926 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80034de:	a201      	add	r2, pc, #4	; (adr r2, 80034e4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80034e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e4:	080036e7 	.word	0x080036e7
 80034e8:	08003811 	.word	0x08003811
 80034ec:	08003927 	.word	0x08003927
 80034f0:	08003505 	.word	0x08003505
 80034f4:	08003927 	.word	0x08003927
 80034f8:	08003927 	.word	0x08003927
 80034fc:	08003927 	.word	0x08003927
 8003500:	08003505 	.word	0x08003505
  switch (PeriphClk)
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8003504:	4ba8      	ldr	r3, [pc, #672]	; (80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003506:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800350a:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800351a:	f000 80d6 	beq.w	80036ca <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003524:	f200 80dd 	bhi.w	80036e2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800352e:	f000 809f 	beq.w	8003670 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003538:	f200 80d3 	bhi.w	80036e2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003542:	d05b      	beq.n	80035fc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800354a:	f200 80ca 	bhi.w	80036e2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003554:	f000 80b6 	beq.w	80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800355e:	f200 80c0 	bhi.w	80036e2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003568:	f000 8082 	beq.w	8003670 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003572:	f200 80b6 	bhi.w	80036e2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d004      	beq.n	8003586 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003582:	d03b      	beq.n	80035fc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8003584:	e0ad      	b.n	80036e2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003586:	4b88      	ldr	r3, [pc, #544]	; (80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d109      	bne.n	80035a6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8003592:	4b85      	ldr	r3, [pc, #532]	; (80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800359c:	4a83      	ldr	r2, [pc, #524]	; (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800359e:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a2:	61bb      	str	r3, [r7, #24]
 80035a4:	e008      	b.n	80035b8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 80035a6:	4b80      	ldr	r3, [pc, #512]	; (80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80035a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035b0:	4a7f      	ldr	r2, [pc, #508]	; (80037b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80035b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b6:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 80035b8:	4b7b      	ldr	r3, [pc, #492]	; (80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035be:	0e1b      	lsrs	r3, r3, #24
 80035c0:	f003 030f 	and.w	r3, r3, #15
 80035c4:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 80035c6:	4b78      	ldr	r3, [pc, #480]	; (80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80035c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035cc:	099b      	lsrs	r3, r3, #6
 80035ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	fb02 f203 	mul.w	r2, r2, r3
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	fbb2 f3f3 	udiv	r3, r2, r3
 80035de:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80035e0:	4b71      	ldr	r3, [pc, #452]	; (80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80035e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035e6:	0a1b      	lsrs	r3, r3, #8
 80035e8:	f003 031f 	and.w	r3, r3, #31
 80035ec:	3301      	adds	r3, #1
 80035ee:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80035f0:	69fa      	ldr	r2, [r7, #28]
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f8:	61fb      	str	r3, [r7, #28]
          break;
 80035fa:	e073      	b.n	80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80035fc:	4b6a      	ldr	r3, [pc, #424]	; (80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d109      	bne.n	800361c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003608:	4b67      	ldr	r3, [pc, #412]	; (80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800360a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800360e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003612:	4a66      	ldr	r2, [pc, #408]	; (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003614:	fbb2 f3f3 	udiv	r3, r2, r3
 8003618:	61bb      	str	r3, [r7, #24]
 800361a:	e008      	b.n	800362e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 800361c:	4b62      	ldr	r3, [pc, #392]	; (80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800361e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003622:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003626:	4a62      	ldr	r2, [pc, #392]	; (80037b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003628:	fbb2 f3f3 	udiv	r3, r2, r3
 800362c:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 800362e:	4b5e      	ldr	r3, [pc, #376]	; (80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003634:	0e1b      	lsrs	r3, r3, #24
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 800363c:	4b5a      	ldr	r3, [pc, #360]	; (80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800363e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003642:	099b      	lsrs	r3, r3, #6
 8003644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	fb02 f203 	mul.w	r2, r2, r3
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	fbb2 f3f3 	udiv	r3, r2, r3
 8003654:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8003656:	4b54      	ldr	r3, [pc, #336]	; (80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003658:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800365c:	f003 031f 	and.w	r3, r3, #31
 8003660:	3301      	adds	r3, #1
 8003662:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8003664:	69fa      	ldr	r2, [r7, #28]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	fbb2 f3f3 	udiv	r3, r2, r3
 800366c:	61fb      	str	r3, [r7, #28]
          break;
 800366e:	e039      	b.n	80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003670:	4b4d      	ldr	r3, [pc, #308]	; (80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d108      	bne.n	800368e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800367c:	4b4a      	ldr	r3, [pc, #296]	; (80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003684:	4a49      	ldr	r2, [pc, #292]	; (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003686:	fbb2 f3f3 	udiv	r3, r2, r3
 800368a:	61bb      	str	r3, [r7, #24]
 800368c:	e007      	b.n	800369e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800368e:	4b46      	ldr	r3, [pc, #280]	; (80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003696:	4a46      	ldr	r2, [pc, #280]	; (80037b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003698:	fbb2 f3f3 	udiv	r3, r2, r3
 800369c:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 800369e:	4b42      	ldr	r3, [pc, #264]	; (80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	0f1b      	lsrs	r3, r3, #28
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 80036aa:	4b3f      	ldr	r3, [pc, #252]	; (80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	099b      	lsrs	r3, r3, #6
 80036b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	fb02 f203 	mul.w	r2, r2, r3
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c0:	61fb      	str	r3, [r7, #28]
          break;
 80036c2:	e00f      	b.n	80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 80036c4:	4b3b      	ldr	r3, [pc, #236]	; (80037b4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80036c6:	61fb      	str	r3, [r7, #28]
          break;
 80036c8:	e00c      	b.n	80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80036ca:	4b37      	ldr	r3, [pc, #220]	; (80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d102      	bne.n	80036dc <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 80036d6:	4b35      	ldr	r3, [pc, #212]	; (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80036d8:	61fb      	str	r3, [r7, #28]
          break;
 80036da:	e003      	b.n	80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 80036dc:	4b34      	ldr	r3, [pc, #208]	; (80037b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80036de:	61fb      	str	r3, [r7, #28]
          break;
 80036e0:	e000      	b.n	80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 80036e2:	bf00      	nop
        }
      }
      break;
 80036e4:	e11f      	b.n	8003926 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80036e6:	4b30      	ldr	r3, [pc, #192]	; (80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80036e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036ec:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80036f8:	d079      	beq.n	80037ee <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003700:	f200 8082 	bhi.w	8003808 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800370a:	d03c      	beq.n	8003786 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003712:	d879      	bhi.n	8003808 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d006      	beq.n	8003728 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003720:	d172      	bne.n	8003808 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003722:	4b24      	ldr	r3, [pc, #144]	; (80037b4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003724:	61fb      	str	r3, [r7, #28]
          break;
 8003726:	e072      	b.n	800380e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003728:	4b1f      	ldr	r3, [pc, #124]	; (80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003730:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003734:	d109      	bne.n	800374a <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003736:	4b1c      	ldr	r3, [pc, #112]	; (80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800373c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003740:	4a1b      	ldr	r2, [pc, #108]	; (80037b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003742:	fbb2 f3f3 	udiv	r3, r2, r3
 8003746:	61bb      	str	r3, [r7, #24]
 8003748:	e008      	b.n	800375c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800374a:	4b17      	ldr	r3, [pc, #92]	; (80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800374c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003754:	4a15      	ldr	r2, [pc, #84]	; (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003756:	fbb2 f3f3 	udiv	r3, r2, r3
 800375a:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800375c:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800375e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003762:	099b      	lsrs	r3, r3, #6
 8003764:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	fb02 f303 	mul.w	r3, r2, r3
 800376e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003770:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003776:	0f1b      	lsrs	r3, r3, #28
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003782:	61fb      	str	r3, [r7, #28]
          break;
 8003784:	e043      	b.n	800380e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003786:	4b08      	ldr	r3, [pc, #32]	; (80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800378e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003792:	d111      	bne.n	80037b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003794:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800379c:	4a04      	ldr	r2, [pc, #16]	; (80037b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800379e:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a2:	61bb      	str	r3, [r7, #24]
 80037a4:	e010      	b.n	80037c8 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80037a6:	bf00      	nop
 80037a8:	40023800 	.word	0x40023800
 80037ac:	00f42400 	.word	0x00f42400
 80037b0:	007a1200 	.word	0x007a1200
 80037b4:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80037b8:	4b5e      	ldr	r3, [pc, #376]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037c0:	4a5d      	ldr	r2, [pc, #372]	; (8003938 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80037c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c6:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80037c8:	4b5a      	ldr	r3, [pc, #360]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	099b      	lsrs	r3, r3, #6
 80037ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	fb02 f303 	mul.w	r3, r2, r3
 80037d8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80037da:	4b56      	ldr	r3, [pc, #344]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	0f1b      	lsrs	r3, r3, #28
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ea:	61fb      	str	r3, [r7, #28]
          break;
 80037ec:	e00f      	b.n	800380e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80037ee:	4b51      	ldr	r3, [pc, #324]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037fa:	d102      	bne.n	8003802 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 80037fc:	4b4f      	ldr	r3, [pc, #316]	; (800393c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80037fe:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003800:	e005      	b.n	800380e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8003802:	4b4d      	ldr	r3, [pc, #308]	; (8003938 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003804:	61fb      	str	r3, [r7, #28]
          break;
 8003806:	e002      	b.n	800380e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	61fb      	str	r3, [r7, #28]
          break;
 800380c:	bf00      	nop
        }
      }
      break;
 800380e:	e08a      	b.n	8003926 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8003810:	4b48      	ldr	r3, [pc, #288]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003812:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003816:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003822:	d06f      	beq.n	8003904 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800382a:	d878      	bhi.n	800391e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003832:	d03c      	beq.n	80038ae <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800383a:	d870      	bhi.n	800391e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d006      	beq.n	8003850 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003848:	d169      	bne.n	800391e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800384a:	4b3d      	ldr	r3, [pc, #244]	; (8003940 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 800384c:	61fb      	str	r3, [r7, #28]
          break;
 800384e:	e069      	b.n	8003924 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003850:	4b38      	ldr	r3, [pc, #224]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003858:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800385c:	d109      	bne.n	8003872 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800385e:	4b35      	ldr	r3, [pc, #212]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003868:	4a34      	ldr	r2, [pc, #208]	; (800393c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800386a:	fbb2 f3f3 	udiv	r3, r2, r3
 800386e:	61bb      	str	r3, [r7, #24]
 8003870:	e008      	b.n	8003884 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003872:	4b30      	ldr	r3, [pc, #192]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003878:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800387c:	4a2e      	ldr	r2, [pc, #184]	; (8003938 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800387e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003882:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003884:	4b2b      	ldr	r3, [pc, #172]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800388a:	099b      	lsrs	r3, r3, #6
 800388c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	fb02 f303 	mul.w	r3, r2, r3
 8003896:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003898:	4b26      	ldr	r3, [pc, #152]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800389a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800389e:	0f1b      	lsrs	r3, r3, #28
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038aa:	61fb      	str	r3, [r7, #28]
          break;
 80038ac:	e03a      	b.n	8003924 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80038ae:	4b21      	ldr	r3, [pc, #132]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038ba:	d108      	bne.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80038bc:	4b1d      	ldr	r3, [pc, #116]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038c4:	4a1d      	ldr	r2, [pc, #116]	; (800393c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80038c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ca:	61bb      	str	r3, [r7, #24]
 80038cc:	e007      	b.n	80038de <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80038ce:	4b19      	ldr	r3, [pc, #100]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038d6:	4a18      	ldr	r2, [pc, #96]	; (8003938 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80038d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038dc:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80038de:	4b15      	ldr	r3, [pc, #84]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	099b      	lsrs	r3, r3, #6
 80038e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	fb02 f303 	mul.w	r3, r2, r3
 80038ee:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80038f0:	4b10      	ldr	r3, [pc, #64]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	0f1b      	lsrs	r3, r3, #28
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003900:	61fb      	str	r3, [r7, #28]
          break;
 8003902:	e00f      	b.n	8003924 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003904:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800390c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003910:	d102      	bne.n	8003918 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8003912:	4b0a      	ldr	r3, [pc, #40]	; (800393c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003914:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003916:	e005      	b.n	8003924 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8003918:	4b07      	ldr	r3, [pc, #28]	; (8003938 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800391a:	61fb      	str	r3, [r7, #28]
          break;
 800391c:	e002      	b.n	8003924 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800391e:	2300      	movs	r3, #0
 8003920:	61fb      	str	r3, [r7, #28]
          break;
 8003922:	bf00      	nop
        }
      }
      break;
 8003924:	bf00      	nop
    }
  }
  return frequency;
 8003926:	69fb      	ldr	r3, [r7, #28]
}
 8003928:	4618      	mov	r0, r3
 800392a:	3724      	adds	r7, #36	; 0x24
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	40023800 	.word	0x40023800
 8003938:	00f42400 	.word	0x00f42400
 800393c:	007a1200 	.word	0x007a1200
 8003940:	00bb8000 	.word	0x00bb8000

08003944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003948:	b088      	sub	sp, #32
 800394a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003954:	2300      	movs	r3, #0
 8003956:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003958:	2300      	movs	r3, #0
 800395a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003960:	4bce      	ldr	r3, [pc, #824]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x358>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 030c 	and.w	r3, r3, #12
 8003968:	2b0c      	cmp	r3, #12
 800396a:	f200 818d 	bhi.w	8003c88 <HAL_RCC_GetSysClockFreq+0x344>
 800396e:	a201      	add	r2, pc, #4	; (adr r2, 8003974 <HAL_RCC_GetSysClockFreq+0x30>)
 8003970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003974:	080039a9 	.word	0x080039a9
 8003978:	08003c89 	.word	0x08003c89
 800397c:	08003c89 	.word	0x08003c89
 8003980:	08003c89 	.word	0x08003c89
 8003984:	080039af 	.word	0x080039af
 8003988:	08003c89 	.word	0x08003c89
 800398c:	08003c89 	.word	0x08003c89
 8003990:	08003c89 	.word	0x08003c89
 8003994:	080039b5 	.word	0x080039b5
 8003998:	08003c89 	.word	0x08003c89
 800399c:	08003c89 	.word	0x08003c89
 80039a0:	08003c89 	.word	0x08003c89
 80039a4:	08003b29 	.word	0x08003b29
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039a8:	4bbd      	ldr	r3, [pc, #756]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80039aa:	61bb      	str	r3, [r7, #24]
       break;
 80039ac:	e16f      	b.n	8003c8e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039ae:	4bbd      	ldr	r3, [pc, #756]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x360>)
 80039b0:	61bb      	str	r3, [r7, #24]
      break;
 80039b2:	e16c      	b.n	8003c8e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039b4:	4bb9      	ldr	r3, [pc, #740]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x358>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039bc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039be:	4bb7      	ldr	r3, [pc, #732]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x358>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d053      	beq.n	8003a72 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ca:	4bb4      	ldr	r3, [pc, #720]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x358>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	099b      	lsrs	r3, r3, #6
 80039d0:	461a      	mov	r2, r3
 80039d2:	f04f 0300 	mov.w	r3, #0
 80039d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80039da:	f04f 0100 	mov.w	r1, #0
 80039de:	ea02 0400 	and.w	r4, r2, r0
 80039e2:	603c      	str	r4, [r7, #0]
 80039e4:	400b      	ands	r3, r1
 80039e6:	607b      	str	r3, [r7, #4]
 80039e8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039ec:	4620      	mov	r0, r4
 80039ee:	4629      	mov	r1, r5
 80039f0:	f04f 0200 	mov.w	r2, #0
 80039f4:	f04f 0300 	mov.w	r3, #0
 80039f8:	014b      	lsls	r3, r1, #5
 80039fa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80039fe:	0142      	lsls	r2, r0, #5
 8003a00:	4610      	mov	r0, r2
 8003a02:	4619      	mov	r1, r3
 8003a04:	4623      	mov	r3, r4
 8003a06:	1ac0      	subs	r0, r0, r3
 8003a08:	462b      	mov	r3, r5
 8003a0a:	eb61 0103 	sbc.w	r1, r1, r3
 8003a0e:	f04f 0200 	mov.w	r2, #0
 8003a12:	f04f 0300 	mov.w	r3, #0
 8003a16:	018b      	lsls	r3, r1, #6
 8003a18:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a1c:	0182      	lsls	r2, r0, #6
 8003a1e:	1a12      	subs	r2, r2, r0
 8003a20:	eb63 0301 	sbc.w	r3, r3, r1
 8003a24:	f04f 0000 	mov.w	r0, #0
 8003a28:	f04f 0100 	mov.w	r1, #0
 8003a2c:	00d9      	lsls	r1, r3, #3
 8003a2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a32:	00d0      	lsls	r0, r2, #3
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
 8003a38:	4621      	mov	r1, r4
 8003a3a:	1852      	adds	r2, r2, r1
 8003a3c:	4629      	mov	r1, r5
 8003a3e:	eb43 0101 	adc.w	r1, r3, r1
 8003a42:	460b      	mov	r3, r1
 8003a44:	f04f 0000 	mov.w	r0, #0
 8003a48:	f04f 0100 	mov.w	r1, #0
 8003a4c:	0259      	lsls	r1, r3, #9
 8003a4e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003a52:	0250      	lsls	r0, r2, #9
 8003a54:	4602      	mov	r2, r0
 8003a56:	460b      	mov	r3, r1
 8003a58:	4610      	mov	r0, r2
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f04f 0300 	mov.w	r3, #0
 8003a64:	f7fc fbce 	bl	8000204 <__aeabi_uldivmod>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	61fb      	str	r3, [r7, #28]
 8003a70:	e04c      	b.n	8003b0c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a72:	4b8a      	ldr	r3, [pc, #552]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x358>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	099b      	lsrs	r3, r3, #6
 8003a78:	461a      	mov	r2, r3
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a82:	f04f 0100 	mov.w	r1, #0
 8003a86:	ea02 0a00 	and.w	sl, r2, r0
 8003a8a:	ea03 0b01 	and.w	fp, r3, r1
 8003a8e:	4650      	mov	r0, sl
 8003a90:	4659      	mov	r1, fp
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	014b      	lsls	r3, r1, #5
 8003a9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003aa0:	0142      	lsls	r2, r0, #5
 8003aa2:	4610      	mov	r0, r2
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	ebb0 000a 	subs.w	r0, r0, sl
 8003aaa:	eb61 010b 	sbc.w	r1, r1, fp
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	f04f 0300 	mov.w	r3, #0
 8003ab6:	018b      	lsls	r3, r1, #6
 8003ab8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003abc:	0182      	lsls	r2, r0, #6
 8003abe:	1a12      	subs	r2, r2, r0
 8003ac0:	eb63 0301 	sbc.w	r3, r3, r1
 8003ac4:	f04f 0000 	mov.w	r0, #0
 8003ac8:	f04f 0100 	mov.w	r1, #0
 8003acc:	00d9      	lsls	r1, r3, #3
 8003ace:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ad2:	00d0      	lsls	r0, r2, #3
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	eb12 020a 	adds.w	r2, r2, sl
 8003adc:	eb43 030b 	adc.w	r3, r3, fp
 8003ae0:	f04f 0000 	mov.w	r0, #0
 8003ae4:	f04f 0100 	mov.w	r1, #0
 8003ae8:	0299      	lsls	r1, r3, #10
 8003aea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003aee:	0290      	lsls	r0, r2, #10
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	4610      	mov	r0, r2
 8003af6:	4619      	mov	r1, r3
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	461a      	mov	r2, r3
 8003afc:	f04f 0300 	mov.w	r3, #0
 8003b00:	f7fc fb80 	bl	8000204 <__aeabi_uldivmod>
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4613      	mov	r3, r2
 8003b0a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b0c:	4b63      	ldr	r3, [pc, #396]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x358>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	0c1b      	lsrs	r3, r3, #16
 8003b12:	f003 0303 	and.w	r3, r3, #3
 8003b16:	3301      	adds	r3, #1
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003b1c:	69fa      	ldr	r2, [r7, #28]
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b24:	61bb      	str	r3, [r7, #24]
      break;
 8003b26:	e0b2      	b.n	8003c8e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b28:	4b5c      	ldr	r3, [pc, #368]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x358>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b30:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b32:	4b5a      	ldr	r3, [pc, #360]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x358>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d04d      	beq.n	8003bda <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b3e:	4b57      	ldr	r3, [pc, #348]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x358>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	099b      	lsrs	r3, r3, #6
 8003b44:	461a      	mov	r2, r3
 8003b46:	f04f 0300 	mov.w	r3, #0
 8003b4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b4e:	f04f 0100 	mov.w	r1, #0
 8003b52:	ea02 0800 	and.w	r8, r2, r0
 8003b56:	ea03 0901 	and.w	r9, r3, r1
 8003b5a:	4640      	mov	r0, r8
 8003b5c:	4649      	mov	r1, r9
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	014b      	lsls	r3, r1, #5
 8003b68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b6c:	0142      	lsls	r2, r0, #5
 8003b6e:	4610      	mov	r0, r2
 8003b70:	4619      	mov	r1, r3
 8003b72:	ebb0 0008 	subs.w	r0, r0, r8
 8003b76:	eb61 0109 	sbc.w	r1, r1, r9
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	f04f 0300 	mov.w	r3, #0
 8003b82:	018b      	lsls	r3, r1, #6
 8003b84:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b88:	0182      	lsls	r2, r0, #6
 8003b8a:	1a12      	subs	r2, r2, r0
 8003b8c:	eb63 0301 	sbc.w	r3, r3, r1
 8003b90:	f04f 0000 	mov.w	r0, #0
 8003b94:	f04f 0100 	mov.w	r1, #0
 8003b98:	00d9      	lsls	r1, r3, #3
 8003b9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b9e:	00d0      	lsls	r0, r2, #3
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	eb12 0208 	adds.w	r2, r2, r8
 8003ba8:	eb43 0309 	adc.w	r3, r3, r9
 8003bac:	f04f 0000 	mov.w	r0, #0
 8003bb0:	f04f 0100 	mov.w	r1, #0
 8003bb4:	0259      	lsls	r1, r3, #9
 8003bb6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003bba:	0250      	lsls	r0, r2, #9
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	f04f 0300 	mov.w	r3, #0
 8003bcc:	f7fc fb1a 	bl	8000204 <__aeabi_uldivmod>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	61fb      	str	r3, [r7, #28]
 8003bd8:	e04a      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bda:	4b30      	ldr	r3, [pc, #192]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x358>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	099b      	lsrs	r3, r3, #6
 8003be0:	461a      	mov	r2, r3
 8003be2:	f04f 0300 	mov.w	r3, #0
 8003be6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003bea:	f04f 0100 	mov.w	r1, #0
 8003bee:	ea02 0400 	and.w	r4, r2, r0
 8003bf2:	ea03 0501 	and.w	r5, r3, r1
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	4629      	mov	r1, r5
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	014b      	lsls	r3, r1, #5
 8003c04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c08:	0142      	lsls	r2, r0, #5
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	1b00      	subs	r0, r0, r4
 8003c10:	eb61 0105 	sbc.w	r1, r1, r5
 8003c14:	f04f 0200 	mov.w	r2, #0
 8003c18:	f04f 0300 	mov.w	r3, #0
 8003c1c:	018b      	lsls	r3, r1, #6
 8003c1e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c22:	0182      	lsls	r2, r0, #6
 8003c24:	1a12      	subs	r2, r2, r0
 8003c26:	eb63 0301 	sbc.w	r3, r3, r1
 8003c2a:	f04f 0000 	mov.w	r0, #0
 8003c2e:	f04f 0100 	mov.w	r1, #0
 8003c32:	00d9      	lsls	r1, r3, #3
 8003c34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c38:	00d0      	lsls	r0, r2, #3
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	1912      	adds	r2, r2, r4
 8003c40:	eb45 0303 	adc.w	r3, r5, r3
 8003c44:	f04f 0000 	mov.w	r0, #0
 8003c48:	f04f 0100 	mov.w	r1, #0
 8003c4c:	0299      	lsls	r1, r3, #10
 8003c4e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c52:	0290      	lsls	r0, r2, #10
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4610      	mov	r0, r2
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	f7fc face 	bl	8000204 <__aeabi_uldivmod>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003c70:	4b0a      	ldr	r3, [pc, #40]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x358>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	0f1b      	lsrs	r3, r3, #28
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003c7c:	69fa      	ldr	r2, [r7, #28]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c84:	61bb      	str	r3, [r7, #24]
      break;
 8003c86:	e002      	b.n	8003c8e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c88:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003c8a:	61bb      	str	r3, [r7, #24]
      break;
 8003c8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c8e:	69bb      	ldr	r3, [r7, #24]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3720      	adds	r7, #32
 8003c94:	46bd      	mov	sp, r7
 8003c96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	00f42400 	.word	0x00f42400
 8003ca4:	007a1200 	.word	0x007a1200

08003ca8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e28d      	b.n	80041d6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 8083 	beq.w	8003dce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003cc8:	4b94      	ldr	r3, [pc, #592]	; (8003f1c <HAL_RCC_OscConfig+0x274>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 030c 	and.w	r3, r3, #12
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d019      	beq.n	8003d08 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003cd4:	4b91      	ldr	r3, [pc, #580]	; (8003f1c <HAL_RCC_OscConfig+0x274>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d106      	bne.n	8003cee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ce0:	4b8e      	ldr	r3, [pc, #568]	; (8003f1c <HAL_RCC_OscConfig+0x274>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cec:	d00c      	beq.n	8003d08 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cee:	4b8b      	ldr	r3, [pc, #556]	; (8003f1c <HAL_RCC_OscConfig+0x274>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003cf6:	2b0c      	cmp	r3, #12
 8003cf8:	d112      	bne.n	8003d20 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cfa:	4b88      	ldr	r3, [pc, #544]	; (8003f1c <HAL_RCC_OscConfig+0x274>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d06:	d10b      	bne.n	8003d20 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d08:	4b84      	ldr	r3, [pc, #528]	; (8003f1c <HAL_RCC_OscConfig+0x274>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d05b      	beq.n	8003dcc <HAL_RCC_OscConfig+0x124>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d157      	bne.n	8003dcc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e25a      	b.n	80041d6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d28:	d106      	bne.n	8003d38 <HAL_RCC_OscConfig+0x90>
 8003d2a:	4b7c      	ldr	r3, [pc, #496]	; (8003f1c <HAL_RCC_OscConfig+0x274>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a7b      	ldr	r2, [pc, #492]	; (8003f1c <HAL_RCC_OscConfig+0x274>)
 8003d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	e01d      	b.n	8003d74 <HAL_RCC_OscConfig+0xcc>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d40:	d10c      	bne.n	8003d5c <HAL_RCC_OscConfig+0xb4>
 8003d42:	4b76      	ldr	r3, [pc, #472]	; (8003f1c <HAL_RCC_OscConfig+0x274>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a75      	ldr	r2, [pc, #468]	; (8003f1c <HAL_RCC_OscConfig+0x274>)
 8003d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	4b73      	ldr	r3, [pc, #460]	; (8003f1c <HAL_RCC_OscConfig+0x274>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a72      	ldr	r2, [pc, #456]	; (8003f1c <HAL_RCC_OscConfig+0x274>)
 8003d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	e00b      	b.n	8003d74 <HAL_RCC_OscConfig+0xcc>
 8003d5c:	4b6f      	ldr	r3, [pc, #444]	; (8003f1c <HAL_RCC_OscConfig+0x274>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a6e      	ldr	r2, [pc, #440]	; (8003f1c <HAL_RCC_OscConfig+0x274>)
 8003d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	4b6c      	ldr	r3, [pc, #432]	; (8003f1c <HAL_RCC_OscConfig+0x274>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a6b      	ldr	r2, [pc, #428]	; (8003f1c <HAL_RCC_OscConfig+0x274>)
 8003d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d013      	beq.n	8003da4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7c:	f7fc ff18 	bl	8000bb0 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d84:	f7fc ff14 	bl	8000bb0 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b64      	cmp	r3, #100	; 0x64
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e21f      	b.n	80041d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d96:	4b61      	ldr	r3, [pc, #388]	; (8003f1c <HAL_RCC_OscConfig+0x274>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0f0      	beq.n	8003d84 <HAL_RCC_OscConfig+0xdc>
 8003da2:	e014      	b.n	8003dce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da4:	f7fc ff04 	bl	8000bb0 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dac:	f7fc ff00 	bl	8000bb0 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b64      	cmp	r3, #100	; 0x64
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e20b      	b.n	80041d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dbe:	4b57      	ldr	r3, [pc, #348]	; (8003f1c <HAL_RCC_OscConfig+0x274>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f0      	bne.n	8003dac <HAL_RCC_OscConfig+0x104>
 8003dca:	e000      	b.n	8003dce <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d06f      	beq.n	8003eba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003dda:	4b50      	ldr	r3, [pc, #320]	; (8003f1c <HAL_RCC_OscConfig+0x274>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 030c 	and.w	r3, r3, #12
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d017      	beq.n	8003e16 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003de6:	4b4d      	ldr	r3, [pc, #308]	; (8003f1c <HAL_RCC_OscConfig+0x274>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003dee:	2b08      	cmp	r3, #8
 8003df0:	d105      	bne.n	8003dfe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003df2:	4b4a      	ldr	r3, [pc, #296]	; (8003f1c <HAL_RCC_OscConfig+0x274>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00b      	beq.n	8003e16 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dfe:	4b47      	ldr	r3, [pc, #284]	; (8003f1c <HAL_RCC_OscConfig+0x274>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e06:	2b0c      	cmp	r3, #12
 8003e08:	d11c      	bne.n	8003e44 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e0a:	4b44      	ldr	r3, [pc, #272]	; (8003f1c <HAL_RCC_OscConfig+0x274>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d116      	bne.n	8003e44 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e16:	4b41      	ldr	r3, [pc, #260]	; (8003f1c <HAL_RCC_OscConfig+0x274>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d005      	beq.n	8003e2e <HAL_RCC_OscConfig+0x186>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d001      	beq.n	8003e2e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e1d3      	b.n	80041d6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e2e:	4b3b      	ldr	r3, [pc, #236]	; (8003f1c <HAL_RCC_OscConfig+0x274>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	4937      	ldr	r1, [pc, #220]	; (8003f1c <HAL_RCC_OscConfig+0x274>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e42:	e03a      	b.n	8003eba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d020      	beq.n	8003e8e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e4c:	4b34      	ldr	r3, [pc, #208]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003e4e:	2201      	movs	r2, #1
 8003e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e52:	f7fc fead 	bl	8000bb0 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e5a:	f7fc fea9 	bl	8000bb0 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e1b4      	b.n	80041d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e6c:	4b2b      	ldr	r3, [pc, #172]	; (8003f1c <HAL_RCC_OscConfig+0x274>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0f0      	beq.n	8003e5a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e78:	4b28      	ldr	r3, [pc, #160]	; (8003f1c <HAL_RCC_OscConfig+0x274>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	4925      	ldr	r1, [pc, #148]	; (8003f1c <HAL_RCC_OscConfig+0x274>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	600b      	str	r3, [r1, #0]
 8003e8c:	e015      	b.n	8003eba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e8e:	4b24      	ldr	r3, [pc, #144]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e94:	f7fc fe8c 	bl	8000bb0 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e9c:	f7fc fe88 	bl	8000bb0 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e193      	b.n	80041d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eae:	4b1b      	ldr	r3, [pc, #108]	; (8003f1c <HAL_RCC_OscConfig+0x274>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f0      	bne.n	8003e9c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d036      	beq.n	8003f34 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d016      	beq.n	8003efc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ece:	4b15      	ldr	r3, [pc, #84]	; (8003f24 <HAL_RCC_OscConfig+0x27c>)
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed4:	f7fc fe6c 	bl	8000bb0 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003edc:	f7fc fe68 	bl	8000bb0 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e173      	b.n	80041d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eee:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <HAL_RCC_OscConfig+0x274>)
 8003ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0f0      	beq.n	8003edc <HAL_RCC_OscConfig+0x234>
 8003efa:	e01b      	b.n	8003f34 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003efc:	4b09      	ldr	r3, [pc, #36]	; (8003f24 <HAL_RCC_OscConfig+0x27c>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f02:	f7fc fe55 	bl	8000bb0 <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f08:	e00e      	b.n	8003f28 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f0a:	f7fc fe51 	bl	8000bb0 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d907      	bls.n	8003f28 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e15c      	b.n	80041d6 <HAL_RCC_OscConfig+0x52e>
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	42470000 	.word	0x42470000
 8003f24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f28:	4b8a      	ldr	r3, [pc, #552]	; (8004154 <HAL_RCC_OscConfig+0x4ac>)
 8003f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1ea      	bne.n	8003f0a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0304 	and.w	r3, r3, #4
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 8097 	beq.w	8004070 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f42:	2300      	movs	r3, #0
 8003f44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f46:	4b83      	ldr	r3, [pc, #524]	; (8004154 <HAL_RCC_OscConfig+0x4ac>)
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10f      	bne.n	8003f72 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f52:	2300      	movs	r3, #0
 8003f54:	60bb      	str	r3, [r7, #8]
 8003f56:	4b7f      	ldr	r3, [pc, #508]	; (8004154 <HAL_RCC_OscConfig+0x4ac>)
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	4a7e      	ldr	r2, [pc, #504]	; (8004154 <HAL_RCC_OscConfig+0x4ac>)
 8003f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f60:	6413      	str	r3, [r2, #64]	; 0x40
 8003f62:	4b7c      	ldr	r3, [pc, #496]	; (8004154 <HAL_RCC_OscConfig+0x4ac>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6a:	60bb      	str	r3, [r7, #8]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f72:	4b79      	ldr	r3, [pc, #484]	; (8004158 <HAL_RCC_OscConfig+0x4b0>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d118      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f7e:	4b76      	ldr	r3, [pc, #472]	; (8004158 <HAL_RCC_OscConfig+0x4b0>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a75      	ldr	r2, [pc, #468]	; (8004158 <HAL_RCC_OscConfig+0x4b0>)
 8003f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f8a:	f7fc fe11 	bl	8000bb0 <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f92:	f7fc fe0d 	bl	8000bb0 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e118      	b.n	80041d6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa4:	4b6c      	ldr	r3, [pc, #432]	; (8004158 <HAL_RCC_OscConfig+0x4b0>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0f0      	beq.n	8003f92 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d106      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x31e>
 8003fb8:	4b66      	ldr	r3, [pc, #408]	; (8004154 <HAL_RCC_OscConfig+0x4ac>)
 8003fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbc:	4a65      	ldr	r2, [pc, #404]	; (8004154 <HAL_RCC_OscConfig+0x4ac>)
 8003fbe:	f043 0301 	orr.w	r3, r3, #1
 8003fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fc4:	e01c      	b.n	8004000 <HAL_RCC_OscConfig+0x358>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	2b05      	cmp	r3, #5
 8003fcc:	d10c      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x340>
 8003fce:	4b61      	ldr	r3, [pc, #388]	; (8004154 <HAL_RCC_OscConfig+0x4ac>)
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd2:	4a60      	ldr	r2, [pc, #384]	; (8004154 <HAL_RCC_OscConfig+0x4ac>)
 8003fd4:	f043 0304 	orr.w	r3, r3, #4
 8003fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8003fda:	4b5e      	ldr	r3, [pc, #376]	; (8004154 <HAL_RCC_OscConfig+0x4ac>)
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fde:	4a5d      	ldr	r2, [pc, #372]	; (8004154 <HAL_RCC_OscConfig+0x4ac>)
 8003fe0:	f043 0301 	orr.w	r3, r3, #1
 8003fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8003fe6:	e00b      	b.n	8004000 <HAL_RCC_OscConfig+0x358>
 8003fe8:	4b5a      	ldr	r3, [pc, #360]	; (8004154 <HAL_RCC_OscConfig+0x4ac>)
 8003fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fec:	4a59      	ldr	r2, [pc, #356]	; (8004154 <HAL_RCC_OscConfig+0x4ac>)
 8003fee:	f023 0301 	bic.w	r3, r3, #1
 8003ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff4:	4b57      	ldr	r3, [pc, #348]	; (8004154 <HAL_RCC_OscConfig+0x4ac>)
 8003ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff8:	4a56      	ldr	r2, [pc, #344]	; (8004154 <HAL_RCC_OscConfig+0x4ac>)
 8003ffa:	f023 0304 	bic.w	r3, r3, #4
 8003ffe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d015      	beq.n	8004034 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004008:	f7fc fdd2 	bl	8000bb0 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800400e:	e00a      	b.n	8004026 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004010:	f7fc fdce 	bl	8000bb0 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	f241 3288 	movw	r2, #5000	; 0x1388
 800401e:	4293      	cmp	r3, r2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e0d7      	b.n	80041d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004026:	4b4b      	ldr	r3, [pc, #300]	; (8004154 <HAL_RCC_OscConfig+0x4ac>)
 8004028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0ee      	beq.n	8004010 <HAL_RCC_OscConfig+0x368>
 8004032:	e014      	b.n	800405e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004034:	f7fc fdbc 	bl	8000bb0 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800403a:	e00a      	b.n	8004052 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800403c:	f7fc fdb8 	bl	8000bb0 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	f241 3288 	movw	r2, #5000	; 0x1388
 800404a:	4293      	cmp	r3, r2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e0c1      	b.n	80041d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004052:	4b40      	ldr	r3, [pc, #256]	; (8004154 <HAL_RCC_OscConfig+0x4ac>)
 8004054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1ee      	bne.n	800403c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800405e:	7dfb      	ldrb	r3, [r7, #23]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d105      	bne.n	8004070 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004064:	4b3b      	ldr	r3, [pc, #236]	; (8004154 <HAL_RCC_OscConfig+0x4ac>)
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	4a3a      	ldr	r2, [pc, #232]	; (8004154 <HAL_RCC_OscConfig+0x4ac>)
 800406a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800406e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 80ad 	beq.w	80041d4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800407a:	4b36      	ldr	r3, [pc, #216]	; (8004154 <HAL_RCC_OscConfig+0x4ac>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 030c 	and.w	r3, r3, #12
 8004082:	2b08      	cmp	r3, #8
 8004084:	d060      	beq.n	8004148 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d145      	bne.n	800411a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800408e:	4b33      	ldr	r3, [pc, #204]	; (800415c <HAL_RCC_OscConfig+0x4b4>)
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004094:	f7fc fd8c 	bl	8000bb0 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800409c:	f7fc fd88 	bl	8000bb0 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e093      	b.n	80041d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ae:	4b29      	ldr	r3, [pc, #164]	; (8004154 <HAL_RCC_OscConfig+0x4ac>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f0      	bne.n	800409c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69da      	ldr	r2, [r3, #28]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	019b      	lsls	r3, r3, #6
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d0:	085b      	lsrs	r3, r3, #1
 80040d2:	3b01      	subs	r3, #1
 80040d4:	041b      	lsls	r3, r3, #16
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040dc:	061b      	lsls	r3, r3, #24
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e4:	071b      	lsls	r3, r3, #28
 80040e6:	491b      	ldr	r1, [pc, #108]	; (8004154 <HAL_RCC_OscConfig+0x4ac>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040ec:	4b1b      	ldr	r3, [pc, #108]	; (800415c <HAL_RCC_OscConfig+0x4b4>)
 80040ee:	2201      	movs	r2, #1
 80040f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f2:	f7fc fd5d 	bl	8000bb0 <HAL_GetTick>
 80040f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040fa:	f7fc fd59 	bl	8000bb0 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e064      	b.n	80041d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800410c:	4b11      	ldr	r3, [pc, #68]	; (8004154 <HAL_RCC_OscConfig+0x4ac>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0f0      	beq.n	80040fa <HAL_RCC_OscConfig+0x452>
 8004118:	e05c      	b.n	80041d4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800411a:	4b10      	ldr	r3, [pc, #64]	; (800415c <HAL_RCC_OscConfig+0x4b4>)
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004120:	f7fc fd46 	bl	8000bb0 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004128:	f7fc fd42 	bl	8000bb0 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e04d      	b.n	80041d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800413a:	4b06      	ldr	r3, [pc, #24]	; (8004154 <HAL_RCC_OscConfig+0x4ac>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f0      	bne.n	8004128 <HAL_RCC_OscConfig+0x480>
 8004146:	e045      	b.n	80041d4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d107      	bne.n	8004160 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e040      	b.n	80041d6 <HAL_RCC_OscConfig+0x52e>
 8004154:	40023800 	.word	0x40023800
 8004158:	40007000 	.word	0x40007000
 800415c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004160:	4b1f      	ldr	r3, [pc, #124]	; (80041e0 <HAL_RCC_OscConfig+0x538>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d030      	beq.n	80041d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004178:	429a      	cmp	r2, r3
 800417a:	d129      	bne.n	80041d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004186:	429a      	cmp	r2, r3
 8004188:	d122      	bne.n	80041d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004190:	4013      	ands	r3, r2
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004196:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004198:	4293      	cmp	r3, r2
 800419a:	d119      	bne.n	80041d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	085b      	lsrs	r3, r3, #1
 80041a8:	3b01      	subs	r3, #1
 80041aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d10f      	bne.n	80041d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041bc:	429a      	cmp	r2, r3
 80041be:	d107      	bne.n	80041d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d001      	beq.n	80041d4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e000      	b.n	80041d6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40023800 	.word	0x40023800

080041e4 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
 80041f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d904      	bls.n	8004206 <HAL_SAI_InitProtocol+0x22>
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	3b03      	subs	r3, #3
 8004200:	2b01      	cmp	r3, #1
 8004202:	d812      	bhi.n	800422a <HAL_SAI_InitProtocol+0x46>
 8004204:	e008      	b.n	8004218 <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	68b9      	ldr	r1, [r7, #8]
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 f9ff 	bl	8004610 <SAI_InitI2S>
 8004212:	4603      	mov	r3, r0
 8004214:	75fb      	strb	r3, [r7, #23]
      break;
 8004216:	e00b      	b.n	8004230 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	68b9      	ldr	r1, [r7, #8]
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 faa4 	bl	800476c <SAI_InitPCM>
 8004224:	4603      	mov	r3, r0
 8004226:	75fb      	strb	r3, [r7, #23]
      break;
 8004228:	e002      	b.n	8004230 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	75fb      	strb	r3, [r7, #23]
      break;
 800422e:	bf00      	nop
  }

  if (status == HAL_OK)
 8004230:	7dfb      	ldrb	r3, [r7, #23]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d104      	bne.n	8004240 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 f808 	bl	800424c <HAL_SAI_Init>
 800423c:	4603      	mov	r3, r0
 800423e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004240:	7dfb      	ldrb	r3, [r7, #23]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
	...

0800424c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e10c      	b.n	8004488 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d106      	bne.n	8004288 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7fc facc 	bl	8000820 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 fb21 	bl	80048d8 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 fbc8 	bl	8004a2c <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d030      	beq.n	8004306 <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 fc05 	bl	8004ab4 <SAI_GetInputClock>
 80042aa:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	4613      	mov	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4413      	add	r3, r2
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	461a      	mov	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	025b      	lsls	r3, r3, #9
 80042be:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c2:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4a72      	ldr	r2, [pc, #456]	; (8004490 <HAL_SAI_Init+0x244>)
 80042c8:	fba2 2303 	umull	r2, r3, r2, r3
 80042cc:	08da      	lsrs	r2, r3, #3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 80042d2:	68f9      	ldr	r1, [r7, #12]
 80042d4:	4b6e      	ldr	r3, [pc, #440]	; (8004490 <HAL_SAI_Init+0x244>)
 80042d6:	fba3 2301 	umull	r2, r3, r3, r1
 80042da:	08da      	lsrs	r2, r3, #3
 80042dc:	4613      	mov	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	1aca      	subs	r2, r1, r3
 80042e6:	2a08      	cmp	r2, #8
 80042e8:	d904      	bls.n	80042f4 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	1c5a      	adds	r2, r3, #1
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d104      	bne.n	8004306 <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	085a      	lsrs	r2, r3, #1
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_SAI_Init+0xca>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b02      	cmp	r3, #2
 8004314:	d109      	bne.n	800432a <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	2b01      	cmp	r3, #1
 800431c:	d101      	bne.n	8004322 <HAL_SAI_Init+0xd6>
 800431e:	2300      	movs	r3, #0
 8004320:	e001      	b.n	8004326 <HAL_SAI_Init+0xda>
 8004322:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004326:	617b      	str	r3, [r7, #20]
 8004328:	e008      	b.n	800433c <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	2b01      	cmp	r3, #1
 8004330:	d102      	bne.n	8004338 <HAL_SAI_Init+0xec>
 8004332:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004336:	e000      	b.n	800433a <HAL_SAI_Init+0xee>
 8004338:	2300      	movs	r3, #0
 800433a:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	2b03      	cmp	r3, #3
 8004342:	d811      	bhi.n	8004368 <HAL_SAI_Init+0x11c>
 8004344:	2b02      	cmp	r3, #2
 8004346:	d20b      	bcs.n	8004360 <HAL_SAI_Init+0x114>
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <HAL_SAI_Init+0x106>
 800434c:	2b01      	cmp	r3, #1
 800434e:	d003      	beq.n	8004358 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 8004350:	e00a      	b.n	8004368 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 8004352:	2300      	movs	r3, #0
 8004354:	613b      	str	r3, [r7, #16]
    break;
 8004356:	e008      	b.n	800436a <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004358:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800435c:	613b      	str	r3, [r7, #16]
    break;
 800435e:	e004      	b.n	800436a <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004360:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004364:	613b      	str	r3, [r7, #16]
    break;
 8004366:	e000      	b.n	800436a <HAL_SAI_Init+0x11e>
      break;
 8004368:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6819      	ldr	r1, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	4b47      	ldr	r3, [pc, #284]	; (8004494 <HAL_SAI_Init+0x248>)
 8004376:	400b      	ands	r3, r1
 8004378:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6819      	ldr	r1, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004388:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800438e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004394:	431a      	orrs	r2, r3
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 80043a2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80043ae:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b4:	051b      	lsls	r3, r3, #20
 80043b6:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6812      	ldr	r2, [r2, #0]
 80043ca:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80043ce:	f023 030f 	bic.w	r3, r3, #15
 80043d2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6859      	ldr	r1, [r3, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	699a      	ldr	r2, [r3, #24]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e8:	431a      	orrs	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	6899      	ldr	r1, [r3, #8]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	4b26      	ldr	r3, [pc, #152]	; (8004498 <HAL_SAI_Init+0x24c>)
 80043fe:	400b      	ands	r3, r1
 8004400:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6899      	ldr	r1, [r3, #8]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004412:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSOffset     |
 8004418:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                           hsai->FrameInit.FSDefinition |
 800441e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004424:	3b01      	subs	r3, #1
 8004426:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004428:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68d9      	ldr	r1, [r3, #12]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	f24f 0320 	movw	r3, #61472	; 0xf020
 8004440:	400b      	ands	r3, r1
 8004442:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68d9      	ldr	r1, [r3, #12]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004452:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004458:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800445a:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004460:	3b01      	subs	r3, #1
 8004462:	021b      	lsls	r3, r3, #8
 8004464:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	cccccccd 	.word	0xcccccccd
 8004494:	ff05c010 	.word	0xff05c010
 8004498:	fff88000 	.word	0xfff88000

0800449c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	4613      	mov	r3, r2
 80044a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 80044aa:	f7fc fb81 	bl	8000bb0 <HAL_GetTick>
 80044ae:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <HAL_SAI_Transmit_DMA+0x20>
 80044b6:	88fb      	ldrh	r3, [r7, #6]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e093      	b.n	80045e8 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	f040 808c 	bne.w	80045e6 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_SAI_Transmit_DMA+0x40>
 80044d8:	2302      	movs	r3, #2
 80044da:	e085      	b.n	80045e8 <HAL_SAI_Transmit_DMA+0x14c>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hsai->pBuffPtr = pData;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	669a      	str	r2, [r3, #104]	; 0x68
    hsai->XferSize = Size;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	88fa      	ldrh	r2, [r7, #6]
 80044ee:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    hsai->XferCount = Size;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	88fa      	ldrh	r2, [r7, #6]
 80044f6:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2212      	movs	r2, #18
 8004506:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450e:	4a38      	ldr	r2, [pc, #224]	; (80045f0 <HAL_SAI_Transmit_DMA+0x154>)
 8004510:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004516:	4a37      	ldr	r2, [pc, #220]	; (80045f4 <HAL_SAI_Transmit_DMA+0x158>)
 8004518:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451e:	4a36      	ldr	r2, [pc, #216]	; (80045f8 <HAL_SAI_Transmit_DMA+0x15c>)
 8004520:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004526:	2200      	movs	r2, #0
 8004528:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004532:	4619      	mov	r1, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	331c      	adds	r3, #28
 800453a:	461a      	mov	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8004542:	f7fc fd25 	bl	8000f90 <HAL_DMA_Start_IT>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d005      	beq.n	8004558 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      return  HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e047      	b.n	80045e8 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004558:	2100      	movs	r1, #0
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 f986 	bl	800486c <SAI_InterruptFlag>
 8004560:	4601      	mov	r1, r0
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	691a      	ldr	r2, [r3, #16]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800457e:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8004580:	e015      	b.n	80045ae <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8004582:	f7fc fb15 	bl	8000bb0 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004590:	d90d      	bls.n	80045ae <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004598:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e01c      	b.n	80045e8 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0e2      	beq.n	8004582 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d107      	bne.n	80045da <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80045d8:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80045e2:	2300      	movs	r3, #0
 80045e4:	e000      	b.n	80045e8 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 80045e6:	2302      	movs	r3, #2
  }
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	080049a9 	.word	0x080049a9
 80045f4:	08004949 	.word	0x08004949
 80045f8:	080049c5 	.word	0x080049c5

080045fc <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <SAI_InitI2S+0x2a>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2b02      	cmp	r3, #2
 8004638:	d103      	bne.n	8004642 <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	641a      	str	r2, [r3, #64]	; 0x40
 8004640:	e002      	b.n	8004648 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2201      	movs	r2, #1
 8004646:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800464e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004656:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0U;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	661a      	str	r2, [r3, #96]	; 0x60

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e076      	b.n	8004760 <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d107      	bne.n	8004688 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004684:	655a      	str	r2, [r3, #84]	; 0x54
 8004686:	e006      	b.n	8004696 <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800468e:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	655a      	str	r2, [r3, #84]	; 0x54
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b03      	cmp	r3, #3
 800469a:	d84f      	bhi.n	800473c <SAI_InitI2S+0x12c>
 800469c:	a201      	add	r2, pc, #4	; (adr r2, 80046a4 <SAI_InitI2S+0x94>)
 800469e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a2:	bf00      	nop
 80046a4:	080046b5 	.word	0x080046b5
 80046a8:	080046d7 	.word	0x080046d7
 80046ac:	080046f9 	.word	0x080046f9
 80046b0:	0800471b 	.word	0x0800471b

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2280      	movs	r2, #128	; 0x80
 80046b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	085b      	lsrs	r3, r3, #1
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	085b      	lsrs	r3, r3, #1
 80046c8:	011a      	lsls	r2, r3, #4
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2240      	movs	r2, #64	; 0x40
 80046d2:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 80046d4:	e034      	b.n	8004740 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2280      	movs	r2, #128	; 0x80
 80046da:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	085b      	lsrs	r3, r3, #1
 80046e0:	019a      	lsls	r2, r3, #6
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	085b      	lsrs	r3, r3, #1
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2280      	movs	r2, #128	; 0x80
 80046f4:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 80046f6:	e023      	b.n	8004740 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	22c0      	movs	r2, #192	; 0xc0
 80046fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	085b      	lsrs	r3, r3, #1
 8004702:	019a      	lsls	r2, r3, #6
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	085b      	lsrs	r3, r3, #1
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2280      	movs	r2, #128	; 0x80
 8004716:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8004718:	e012      	b.n	8004740 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	22e0      	movs	r2, #224	; 0xe0
 800471e:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	085b      	lsrs	r3, r3, #1
 8004724:	019a      	lsls	r2, r3, #6
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	085b      	lsrs	r3, r3, #1
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2280      	movs	r2, #128	; 0x80
 8004738:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800473a:	e001      	b.n	8004740 <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e00f      	b.n	8004760 <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2b02      	cmp	r3, #2
 8004744:	d10b      	bne.n	800475e <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d102      	bne.n	8004752 <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16U;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2210      	movs	r2, #16
 8004750:	659a      	str	r2, [r3, #88]	; 0x58
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b02      	cmp	r3, #2
 8004756:	d102      	bne.n	800475e <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8U;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2208      	movs	r2, #8
 800475c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
 8004778:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <SAI_InitPCM+0x2a>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2b02      	cmp	r3, #2
 8004794:	d103      	bne.n	800479e <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2201      	movs	r2, #1
 800479a:	641a      	str	r2, [r3, #64]	; 0x40
 800479c:	e002      	b.n	80047a4 <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80047b0:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80047b8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.FirstBitOffset  = 0U;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047cc:	665a      	str	r2, [r3, #100]	; 0x64

  if (protocol == SAI_PCM_SHORT)
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2b04      	cmp	r3, #4
 80047d2:	d103      	bne.n	80047dc <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2201      	movs	r2, #1
 80047d8:	649a      	str	r2, [r3, #72]	; 0x48
 80047da:	e002      	b.n	80047e2 <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	220d      	movs	r2, #13
 80047e0:	649a      	str	r2, [r3, #72]	; 0x48
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b03      	cmp	r3, #3
 80047e6:	d837      	bhi.n	8004858 <SAI_InitPCM+0xec>
 80047e8:	a201      	add	r2, pc, #4	; (adr r2, 80047f0 <SAI_InitPCM+0x84>)
 80047ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ee:	bf00      	nop
 80047f0:	08004801 	.word	0x08004801
 80047f4:	08004817 	.word	0x08004817
 80047f8:	0800482d 	.word	0x0800482d
 80047fc:	08004843 	.word	0x08004843
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2280      	movs	r2, #128	; 0x80
 8004804:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	011a      	lsls	r2, r3, #4
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2240      	movs	r2, #64	; 0x40
 8004812:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8004814:	e022      	b.n	800485c <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2280      	movs	r2, #128	; 0x80
 800481a:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	015a      	lsls	r2, r3, #5
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2280      	movs	r2, #128	; 0x80
 8004828:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800482a:	e017      	b.n	800485c <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	22c0      	movs	r2, #192	; 0xc0
 8004830:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2280      	movs	r2, #128	; 0x80
 800483e:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8004840:	e00c      	b.n	800485c <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	22e0      	movs	r2, #224	; 0xe0
 8004846:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2280      	movs	r2, #128	; 0x80
 8004854:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8004856:	e001      	b.n	800485c <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e000      	b.n	800485e <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop

0800486c <SAI_InterruptFlag>:
  *               the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8004876:	2301      	movs	r3, #1
 8004878:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d103      	bne.n	8004888 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f043 0308 	orr.w	r3, r3, #8
 8004886:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800488c:	2b08      	cmp	r3, #8
 800488e:	d10b      	bne.n	80048a8 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004894:	2b03      	cmp	r3, #3
 8004896:	d003      	beq.n	80048a0 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d103      	bne.n	80048a8 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f043 0310 	orr.w	r3, r3, #16
 80048a6:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	2b03      	cmp	r3, #3
 80048ae:	d003      	beq.n	80048b8 <SAI_InterruptFlag+0x4c>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d104      	bne.n	80048c2 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	e003      	b.n	80048ca <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f043 0304 	orr.w	r3, r3, #4
 80048c8:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80048ca:	68fb      	ldr	r3, [r7, #12]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80048e0:	4b17      	ldr	r3, [pc, #92]	; (8004940 <SAI_Disable+0x68>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a17      	ldr	r2, [pc, #92]	; (8004944 <SAI_Disable+0x6c>)
 80048e6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ea:	0b1b      	lsrs	r3, r3, #12
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80048f0:	2300      	movs	r3, #0
 80048f2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004902:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	1e5a      	subs	r2, r3, #1
 8004908:	60fa      	str	r2, [r7, #12]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10a      	bne.n	8004924 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004914:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      status = HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	72fb      	strb	r3, [r7, #11]
      break;
 8004922:	e006      	b.n	8004932 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1e8      	bne.n	8004904 <SAI_Disable+0x2c>

  return status;
 8004932:	7afb      	ldrb	r3, [r7, #11]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	20000000 	.word	0x20000000
 8004944:	95cbec1b 	.word	0x95cbec1b

08004948 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004954:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800495e:	d01c      	beq.n	800499a <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0U;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004976:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004978:	2100      	movs	r1, #0
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f7ff ff76 	bl	800486c <SAI_InterruptFlag>
 8004980:	4603      	mov	r3, r0
 8004982:	43d9      	mvns	r1, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691a      	ldr	r2, [r3, #16]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	400a      	ands	r2, r1
 8004990:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f7fc f85f 	bl	8000a5e <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80049a0:	bf00      	nop
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f7fc f85b 	bl	8000a72 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80049bc:	bf00      	nop
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d0:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d004      	beq.n	80049f6 <SAI_DMAError+0x32>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d112      	bne.n	8004a1c <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004a04:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f7ff ff66 	bl	80048d8 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f7ff fded 	bl	80045fc <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8004a22:	bf00      	nop
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
	...

08004a2c <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(SAI_HandleTypeDef *hsai)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;

#if defined(STM32F446xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d00c      	beq.n	8004a56 <SAI_BlockSynchroConfig+0x2a>
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d80d      	bhi.n	8004a5c <SAI_BlockSynchroConfig+0x30>
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <SAI_BlockSynchroConfig+0x1e>
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d003      	beq.n	8004a50 <SAI_BlockSynchroConfig+0x24>
 8004a48:	e008      	b.n	8004a5c <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60fb      	str	r3, [r7, #12]
      break;
 8004a4e:	e008      	b.n	8004a62 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004a50:	2310      	movs	r3, #16
 8004a52:	60fb      	str	r3, [r7, #12]
      break;
 8004a54:	e005      	b.n	8004a62 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004a56:	2320      	movs	r3, #32
 8004a58:	60fb      	str	r3, [r7, #12]
      break;
 8004a5a:	e002      	b.n	8004a62 <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	60fb      	str	r3, [r7, #12]
      break;
 8004a60:	bf00      	nop
  }

  if ((hsai->Init.Synchro) == SAI_SYNCHRONOUS_EXT_SAI2)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	2b03      	cmp	r3, #3
 8004a68:	d103      	bne.n	8004a72 <SAI_BlockSynchroConfig+0x46>
  {
    tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f043 0301 	orr.w	r3, r3, #1
 8004a70:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a0b      	ldr	r2, [pc, #44]	; (8004aa4 <SAI_BlockSynchroConfig+0x78>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d004      	beq.n	8004a86 <SAI_BlockSynchroConfig+0x5a>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a09      	ldr	r2, [pc, #36]	; (8004aa8 <SAI_BlockSynchroConfig+0x7c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d103      	bne.n	8004a8e <SAI_BlockSynchroConfig+0x62>
  {
    SAI1->GCR = tmpregisterGCR;
 8004a86:	4a09      	ldr	r2, [pc, #36]	; (8004aac <SAI_BlockSynchroConfig+0x80>)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	e003      	b.n	8004a96 <SAI_BlockSynchroConfig+0x6a>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004a8e:	4a08      	ldr	r2, [pc, #32]	; (8004ab0 <SAI_BlockSynchroConfig+0x84>)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6013      	str	r3, [r2, #0]
      tmpregisterGCR = 0U;
      break;
  }
  SAI1->GCR = tmpregisterGCR;
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 8004a94:	bf00      	nop
 8004a96:	bf00      	nop
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40015804 	.word	0x40015804
 8004aa8:	40015824 	.word	0x40015824
 8004aac:	40015800 	.word	0x40015800
 8004ab0:	40015c00 	.word	0x40015c00

08004ab4 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(SAI_HandleTypeDef *hsai)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8004abc:	2300      	movs	r3, #0
 8004abe:	60fb      	str	r3, [r7, #12]

#if defined(STM32F446xx)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a0a      	ldr	r2, [pc, #40]	; (8004af0 <SAI_GetInputClock+0x3c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d004      	beq.n	8004ad4 <SAI_GetInputClock+0x20>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a09      	ldr	r2, [pc, #36]	; (8004af4 <SAI_GetInputClock+0x40>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d104      	bne.n	8004ade <SAI_GetInputClock+0x2a>
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004ad4:	2004      	movs	r0, #4
 8004ad6:	f7fe fced 	bl	80034b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	e003      	b.n	8004ae6 <SAI_GetInputClock+0x32>
  }
  else /* SAI2_Block_A || SAI2_Block_B*/
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004ade:	2008      	movs	r0, #8
 8004ae0:	f7fe fce8 	bl	80034b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ae4:	60f8      	str	r0, [r7, #12]
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40015804 	.word	0x40015804
 8004af4:	40015824 	.word	0x40015824

08004af8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004af8:	b084      	sub	sp, #16
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b084      	sub	sp, #16
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	f107 001c 	add.w	r0, r7, #28
 8004b06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d122      	bne.n	8004b56 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d105      	bne.n	8004b4a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f001 fb16 	bl	800617c <USB_CoreReset>
 8004b50:	4603      	mov	r3, r0
 8004b52:	73fb      	strb	r3, [r7, #15]
 8004b54:	e01a      	b.n	8004b8c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f001 fb0a 	bl	800617c <USB_CoreReset>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d106      	bne.n	8004b80 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	639a      	str	r2, [r3, #56]	; 0x38
 8004b7e:	e005      	b.n	8004b8c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d10b      	bne.n	8004baa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f043 0206 	orr.w	r2, r3, #6
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f043 0220 	orr.w	r2, r3, #32
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bb6:	b004      	add	sp, #16
 8004bb8:	4770      	bx	lr
	...

08004bbc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b087      	sub	sp, #28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004bca:	79fb      	ldrb	r3, [r7, #7]
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d165      	bne.n	8004c9c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	4a41      	ldr	r2, [pc, #260]	; (8004cd8 <USB_SetTurnaroundTime+0x11c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d906      	bls.n	8004be6 <USB_SetTurnaroundTime+0x2a>
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	4a40      	ldr	r2, [pc, #256]	; (8004cdc <USB_SetTurnaroundTime+0x120>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d202      	bcs.n	8004be6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004be0:	230f      	movs	r3, #15
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	e062      	b.n	8004cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	4a3c      	ldr	r2, [pc, #240]	; (8004cdc <USB_SetTurnaroundTime+0x120>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d306      	bcc.n	8004bfc <USB_SetTurnaroundTime+0x40>
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	4a3b      	ldr	r2, [pc, #236]	; (8004ce0 <USB_SetTurnaroundTime+0x124>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d202      	bcs.n	8004bfc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004bf6:	230e      	movs	r3, #14
 8004bf8:	617b      	str	r3, [r7, #20]
 8004bfa:	e057      	b.n	8004cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	4a38      	ldr	r2, [pc, #224]	; (8004ce0 <USB_SetTurnaroundTime+0x124>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d306      	bcc.n	8004c12 <USB_SetTurnaroundTime+0x56>
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	4a37      	ldr	r2, [pc, #220]	; (8004ce4 <USB_SetTurnaroundTime+0x128>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d202      	bcs.n	8004c12 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004c0c:	230d      	movs	r3, #13
 8004c0e:	617b      	str	r3, [r7, #20]
 8004c10:	e04c      	b.n	8004cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	4a33      	ldr	r2, [pc, #204]	; (8004ce4 <USB_SetTurnaroundTime+0x128>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d306      	bcc.n	8004c28 <USB_SetTurnaroundTime+0x6c>
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	4a32      	ldr	r2, [pc, #200]	; (8004ce8 <USB_SetTurnaroundTime+0x12c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d802      	bhi.n	8004c28 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004c22:	230c      	movs	r3, #12
 8004c24:	617b      	str	r3, [r7, #20]
 8004c26:	e041      	b.n	8004cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	4a2f      	ldr	r2, [pc, #188]	; (8004ce8 <USB_SetTurnaroundTime+0x12c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d906      	bls.n	8004c3e <USB_SetTurnaroundTime+0x82>
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4a2e      	ldr	r2, [pc, #184]	; (8004cec <USB_SetTurnaroundTime+0x130>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d802      	bhi.n	8004c3e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004c38:	230b      	movs	r3, #11
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	e036      	b.n	8004cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	4a2a      	ldr	r2, [pc, #168]	; (8004cec <USB_SetTurnaroundTime+0x130>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d906      	bls.n	8004c54 <USB_SetTurnaroundTime+0x98>
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	4a29      	ldr	r2, [pc, #164]	; (8004cf0 <USB_SetTurnaroundTime+0x134>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d802      	bhi.n	8004c54 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004c4e:	230a      	movs	r3, #10
 8004c50:	617b      	str	r3, [r7, #20]
 8004c52:	e02b      	b.n	8004cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	4a26      	ldr	r2, [pc, #152]	; (8004cf0 <USB_SetTurnaroundTime+0x134>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d906      	bls.n	8004c6a <USB_SetTurnaroundTime+0xae>
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	4a25      	ldr	r2, [pc, #148]	; (8004cf4 <USB_SetTurnaroundTime+0x138>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d202      	bcs.n	8004c6a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004c64:	2309      	movs	r3, #9
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	e020      	b.n	8004cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	4a21      	ldr	r2, [pc, #132]	; (8004cf4 <USB_SetTurnaroundTime+0x138>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d306      	bcc.n	8004c80 <USB_SetTurnaroundTime+0xc4>
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	4a20      	ldr	r2, [pc, #128]	; (8004cf8 <USB_SetTurnaroundTime+0x13c>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d802      	bhi.n	8004c80 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004c7a:	2308      	movs	r3, #8
 8004c7c:	617b      	str	r3, [r7, #20]
 8004c7e:	e015      	b.n	8004cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	4a1d      	ldr	r2, [pc, #116]	; (8004cf8 <USB_SetTurnaroundTime+0x13c>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d906      	bls.n	8004c96 <USB_SetTurnaroundTime+0xda>
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	4a1c      	ldr	r2, [pc, #112]	; (8004cfc <USB_SetTurnaroundTime+0x140>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d202      	bcs.n	8004c96 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004c90:	2307      	movs	r3, #7
 8004c92:	617b      	str	r3, [r7, #20]
 8004c94:	e00a      	b.n	8004cac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004c96:	2306      	movs	r3, #6
 8004c98:	617b      	str	r3, [r7, #20]
 8004c9a:	e007      	b.n	8004cac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004c9c:	79fb      	ldrb	r3, [r7, #7]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d102      	bne.n	8004ca8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004ca2:	2309      	movs	r3, #9
 8004ca4:	617b      	str	r3, [r7, #20]
 8004ca6:	e001      	b.n	8004cac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004ca8:	2309      	movs	r3, #9
 8004caa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	029b      	lsls	r3, r3, #10
 8004cc0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	371c      	adds	r7, #28
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	00d8acbf 	.word	0x00d8acbf
 8004cdc:	00e4e1c0 	.word	0x00e4e1c0
 8004ce0:	00f42400 	.word	0x00f42400
 8004ce4:	01067380 	.word	0x01067380
 8004ce8:	011a499f 	.word	0x011a499f
 8004cec:	01312cff 	.word	0x01312cff
 8004cf0:	014ca43f 	.word	0x014ca43f
 8004cf4:	016e3600 	.word	0x016e3600
 8004cf8:	01a6ab1f 	.word	0x01a6ab1f
 8004cfc:	01e84800 	.word	0x01e84800

08004d00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f043 0201 	orr.w	r2, r3, #1
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f023 0201 	bic.w	r2, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d60:	78fb      	ldrb	r3, [r7, #3]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d115      	bne.n	8004d92 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d72:	2001      	movs	r0, #1
 8004d74:	f7fb ff28 	bl	8000bc8 <HAL_Delay>
      ms++;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f001 f96c 	bl	800605c <USB_GetMode>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d01e      	beq.n	8004dc8 <USB_SetCurrentMode+0x84>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2b31      	cmp	r3, #49	; 0x31
 8004d8e:	d9f0      	bls.n	8004d72 <USB_SetCurrentMode+0x2e>
 8004d90:	e01a      	b.n	8004dc8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d92:	78fb      	ldrb	r3, [r7, #3]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d115      	bne.n	8004dc4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004da4:	2001      	movs	r0, #1
 8004da6:	f7fb ff0f 	bl	8000bc8 <HAL_Delay>
      ms++;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	3301      	adds	r3, #1
 8004dae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f001 f953 	bl	800605c <USB_GetMode>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d005      	beq.n	8004dc8 <USB_SetCurrentMode+0x84>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2b31      	cmp	r3, #49	; 0x31
 8004dc0:	d9f0      	bls.n	8004da4 <USB_SetCurrentMode+0x60>
 8004dc2:	e001      	b.n	8004dc8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e005      	b.n	8004dd4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2b32      	cmp	r3, #50	; 0x32
 8004dcc:	d101      	bne.n	8004dd2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e000      	b.n	8004dd4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ddc:	b084      	sub	sp, #16
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b086      	sub	sp, #24
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
 8004de6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004dea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004df6:	2300      	movs	r3, #0
 8004df8:	613b      	str	r3, [r7, #16]
 8004dfa:	e009      	b.n	8004e10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	3340      	adds	r3, #64	; 0x40
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	2200      	movs	r2, #0
 8004e08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	613b      	str	r3, [r7, #16]
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	2b0e      	cmp	r3, #14
 8004e14:	d9f2      	bls.n	8004dfc <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d11c      	bne.n	8004e56 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e2a:	f043 0302 	orr.w	r3, r3, #2
 8004e2e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e34:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	e005      	b.n	8004e62 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e68:	461a      	mov	r2, r3
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e74:	4619      	mov	r1, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	680b      	ldr	r3, [r1, #0]
 8004e80:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d10c      	bne.n	8004ea2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d104      	bne.n	8004e98 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004e8e:	2100      	movs	r1, #0
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 f945 	bl	8005120 <USB_SetDevSpeed>
 8004e96:	e008      	b.n	8004eaa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004e98:	2101      	movs	r1, #1
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f940 	bl	8005120 <USB_SetDevSpeed>
 8004ea0:	e003      	b.n	8004eaa <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ea2:	2103      	movs	r1, #3
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 f93b 	bl	8005120 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004eaa:	2110      	movs	r1, #16
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f8f3 	bl	8005098 <USB_FlushTxFifo>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d001      	beq.n	8004ebc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f90f 	bl	80050e0 <USB_FlushRxFifo>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ede:	461a      	mov	r2, r3
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eea:	461a      	mov	r2, r3
 8004eec:	2300      	movs	r3, #0
 8004eee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	613b      	str	r3, [r7, #16]
 8004ef4:	e043      	b.n	8004f7e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f0c:	d118      	bne.n	8004f40 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10a      	bne.n	8004f2a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f20:	461a      	mov	r2, r3
 8004f22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f26:	6013      	str	r3, [r2, #0]
 8004f28:	e013      	b.n	8004f52 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f36:	461a      	mov	r2, r3
 8004f38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f3c:	6013      	str	r3, [r2, #0]
 8004f3e:	e008      	b.n	8004f52 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	2300      	movs	r3, #0
 8004f50:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5e:	461a      	mov	r2, r3
 8004f60:	2300      	movs	r3, #0
 8004f62:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f70:	461a      	mov	r2, r3
 8004f72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	613b      	str	r3, [r7, #16]
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d3b7      	bcc.n	8004ef6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f86:	2300      	movs	r3, #0
 8004f88:	613b      	str	r3, [r7, #16]
 8004f8a:	e043      	b.n	8005014 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fa2:	d118      	bne.n	8004fd6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10a      	bne.n	8004fc0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004fbc:	6013      	str	r3, [r2, #0]
 8004fbe:	e013      	b.n	8004fe8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fcc:	461a      	mov	r2, r3
 8004fce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004fd2:	6013      	str	r3, [r2, #0]
 8004fd4:	e008      	b.n	8004fe8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	4413      	add	r3, r2
 8005002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005006:	461a      	mov	r2, r3
 8005008:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800500c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	3301      	adds	r3, #1
 8005012:	613b      	str	r3, [r7, #16]
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	429a      	cmp	r2, r3
 800501a:	d3b7      	bcc.n	8004f8c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800502a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800502e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800503c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800503e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005040:	2b00      	cmp	r3, #0
 8005042:	d105      	bne.n	8005050 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	f043 0210 	orr.w	r2, r3, #16
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	699a      	ldr	r2, [r3, #24]
 8005054:	4b0f      	ldr	r3, [pc, #60]	; (8005094 <USB_DevInit+0x2b8>)
 8005056:	4313      	orrs	r3, r2
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800505c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800505e:	2b00      	cmp	r3, #0
 8005060:	d005      	beq.n	800506e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	f043 0208 	orr.w	r2, r3, #8
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800506e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005070:	2b01      	cmp	r3, #1
 8005072:	d107      	bne.n	8005084 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800507c:	f043 0304 	orr.w	r3, r3, #4
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005084:	7dfb      	ldrb	r3, [r7, #23]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3718      	adds	r7, #24
 800508a:	46bd      	mov	sp, r7
 800508c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005090:	b004      	add	sp, #16
 8005092:	4770      	bx	lr
 8005094:	803c3800 	.word	0x803c3800

08005098 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	019b      	lsls	r3, r3, #6
 80050aa:	f043 0220 	orr.w	r2, r3, #32
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	3301      	adds	r3, #1
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	4a08      	ldr	r2, [pc, #32]	; (80050dc <USB_FlushTxFifo+0x44>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d901      	bls.n	80050c2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e006      	b.n	80050d0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f003 0320 	and.w	r3, r3, #32
 80050ca:	2b20      	cmp	r3, #32
 80050cc:	d0f1      	beq.n	80050b2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	00030d40 	.word	0x00030d40

080050e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2210      	movs	r2, #16
 80050f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	3301      	adds	r3, #1
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	4a08      	ldr	r2, [pc, #32]	; (800511c <USB_FlushRxFifo+0x3c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d901      	bls.n	8005102 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e006      	b.n	8005110 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f003 0310 	and.w	r3, r3, #16
 800510a:	2b10      	cmp	r3, #16
 800510c:	d0f1      	beq.n	80050f2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	00030d40 	.word	0x00030d40

08005120 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	460b      	mov	r3, r1
 800512a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	78fb      	ldrb	r3, [r7, #3]
 800513a:	68f9      	ldr	r1, [r7, #12]
 800513c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005140:	4313      	orrs	r3, r2
 8005142:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005152:	b480      	push	{r7}
 8005154:	b087      	sub	sp, #28
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f003 0306 	and.w	r3, r3, #6
 800516a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d102      	bne.n	8005178 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005172:	2300      	movs	r3, #0
 8005174:	75fb      	strb	r3, [r7, #23]
 8005176:	e00a      	b.n	800518e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2b02      	cmp	r3, #2
 800517c:	d002      	beq.n	8005184 <USB_GetDevSpeed+0x32>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2b06      	cmp	r3, #6
 8005182:	d102      	bne.n	800518a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005184:	2302      	movs	r3, #2
 8005186:	75fb      	strb	r3, [r7, #23]
 8005188:	e001      	b.n	800518e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800518a:	230f      	movs	r3, #15
 800518c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800518e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005190:	4618      	mov	r0, r3
 8005192:	371c      	adds	r7, #28
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	785b      	ldrb	r3, [r3, #1]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d13a      	bne.n	800522e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051be:	69da      	ldr	r2, [r3, #28]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	f003 030f 	and.w	r3, r3, #15
 80051c8:	2101      	movs	r1, #1
 80051ca:	fa01 f303 	lsl.w	r3, r1, r3
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	68f9      	ldr	r1, [r7, #12]
 80051d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051d6:	4313      	orrs	r3, r2
 80051d8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d155      	bne.n	800529c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	78db      	ldrb	r3, [r3, #3]
 800520a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800520c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	059b      	lsls	r3, r3, #22
 8005212:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005214:	4313      	orrs	r3, r2
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	0151      	lsls	r1, r2, #5
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	440a      	add	r2, r1
 800521e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800522a:	6013      	str	r3, [r2, #0]
 800522c:	e036      	b.n	800529c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005234:	69da      	ldr	r2, [r3, #28]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	f003 030f 	and.w	r3, r3, #15
 800523e:	2101      	movs	r1, #1
 8005240:	fa01 f303 	lsl.w	r3, r1, r3
 8005244:	041b      	lsls	r3, r3, #16
 8005246:	68f9      	ldr	r1, [r7, #12]
 8005248:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800524c:	4313      	orrs	r3, r2
 800524e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4413      	add	r3, r2
 8005258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d11a      	bne.n	800529c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	78db      	ldrb	r3, [r3, #3]
 8005280:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005282:	430b      	orrs	r3, r1
 8005284:	4313      	orrs	r3, r2
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	0151      	lsls	r1, r2, #5
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	440a      	add	r2, r1
 800528e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800529a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
	...

080052ac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	785b      	ldrb	r3, [r3, #1]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d161      	bne.n	800538c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052de:	d11f      	bne.n	8005320 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	0151      	lsls	r1, r2, #5
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	440a      	add	r2, r1
 80052f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052fe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4413      	add	r3, r2
 8005308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	0151      	lsls	r1, r2, #5
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	440a      	add	r2, r1
 8005316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800531a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800531e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005326:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	f003 030f 	and.w	r3, r3, #15
 8005330:	2101      	movs	r1, #1
 8005332:	fa01 f303 	lsl.w	r3, r1, r3
 8005336:	b29b      	uxth	r3, r3
 8005338:	43db      	mvns	r3, r3
 800533a:	68f9      	ldr	r1, [r7, #12]
 800533c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005340:	4013      	ands	r3, r2
 8005342:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534a:	69da      	ldr	r2, [r3, #28]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	f003 030f 	and.w	r3, r3, #15
 8005354:	2101      	movs	r1, #1
 8005356:	fa01 f303 	lsl.w	r3, r1, r3
 800535a:	b29b      	uxth	r3, r3
 800535c:	43db      	mvns	r3, r3
 800535e:	68f9      	ldr	r1, [r7, #12]
 8005360:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005364:	4013      	ands	r3, r2
 8005366:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4413      	add	r3, r2
 8005370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	0159      	lsls	r1, r3, #5
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	440b      	add	r3, r1
 800537e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005382:	4619      	mov	r1, r3
 8005384:	4b35      	ldr	r3, [pc, #212]	; (800545c <USB_DeactivateEndpoint+0x1b0>)
 8005386:	4013      	ands	r3, r2
 8005388:	600b      	str	r3, [r1, #0]
 800538a:	e060      	b.n	800544e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4413      	add	r3, r2
 8005394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800539e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053a2:	d11f      	bne.n	80053e4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	0151      	lsls	r1, r2, #5
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	440a      	add	r2, r1
 80053ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053c2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	0151      	lsls	r1, r2, #5
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	440a      	add	r2, r1
 80053da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	f003 030f 	and.w	r3, r3, #15
 80053f4:	2101      	movs	r1, #1
 80053f6:	fa01 f303 	lsl.w	r3, r1, r3
 80053fa:	041b      	lsls	r3, r3, #16
 80053fc:	43db      	mvns	r3, r3
 80053fe:	68f9      	ldr	r1, [r7, #12]
 8005400:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005404:	4013      	ands	r3, r2
 8005406:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540e:	69da      	ldr	r2, [r3, #28]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	f003 030f 	and.w	r3, r3, #15
 8005418:	2101      	movs	r1, #1
 800541a:	fa01 f303 	lsl.w	r3, r1, r3
 800541e:	041b      	lsls	r3, r3, #16
 8005420:	43db      	mvns	r3, r3
 8005422:	68f9      	ldr	r1, [r7, #12]
 8005424:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005428:	4013      	ands	r3, r2
 800542a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	0159      	lsls	r1, r3, #5
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	440b      	add	r3, r1
 8005442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005446:	4619      	mov	r1, r3
 8005448:	4b05      	ldr	r3, [pc, #20]	; (8005460 <USB_DeactivateEndpoint+0x1b4>)
 800544a:	4013      	ands	r3, r2
 800544c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	ec337800 	.word	0xec337800
 8005460:	eff37800 	.word	0xeff37800

08005464 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b08a      	sub	sp, #40	; 0x28
 8005468:	af02      	add	r7, sp, #8
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	4613      	mov	r3, r2
 8005470:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	785b      	ldrb	r3, [r3, #1]
 8005480:	2b01      	cmp	r3, #1
 8005482:	f040 815c 	bne.w	800573e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d132      	bne.n	80054f4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	4413      	add	r3, r2
 8005496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	0151      	lsls	r1, r2, #5
 80054a0:	69fa      	ldr	r2, [r7, #28]
 80054a2:	440a      	add	r2, r1
 80054a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	0151      	lsls	r1, r2, #5
 80054c4:	69fa      	ldr	r2, [r7, #28]
 80054c6:	440a      	add	r2, r1
 80054c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	015a      	lsls	r2, r3, #5
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	4413      	add	r3, r2
 80054da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	0151      	lsls	r1, r2, #5
 80054e4:	69fa      	ldr	r2, [r7, #28]
 80054e6:	440a      	add	r2, r1
 80054e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ec:	0cdb      	lsrs	r3, r3, #19
 80054ee:	04db      	lsls	r3, r3, #19
 80054f0:	6113      	str	r3, [r2, #16]
 80054f2:	e074      	b.n	80055de <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	0151      	lsls	r1, r2, #5
 8005506:	69fa      	ldr	r2, [r7, #28]
 8005508:	440a      	add	r2, r1
 800550a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800550e:	0cdb      	lsrs	r3, r3, #19
 8005510:	04db      	lsls	r3, r3, #19
 8005512:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	0151      	lsls	r1, r2, #5
 8005526:	69fa      	ldr	r2, [r7, #28]
 8005528:	440a      	add	r2, r1
 800552a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800552e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005532:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005536:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005544:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	6959      	ldr	r1, [r3, #20]
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	440b      	add	r3, r1
 8005550:	1e59      	subs	r1, r3, #1
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	fbb1 f3f3 	udiv	r3, r1, r3
 800555a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800555c:	4b9d      	ldr	r3, [pc, #628]	; (80057d4 <USB_EPStartXfer+0x370>)
 800555e:	400b      	ands	r3, r1
 8005560:	69b9      	ldr	r1, [r7, #24]
 8005562:	0148      	lsls	r0, r1, #5
 8005564:	69f9      	ldr	r1, [r7, #28]
 8005566:	4401      	add	r1, r0
 8005568:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800556c:	4313      	orrs	r3, r2
 800556e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	4413      	add	r3, r2
 8005578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557c:	691a      	ldr	r2, [r3, #16]
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005586:	69b9      	ldr	r1, [r7, #24]
 8005588:	0148      	lsls	r0, r1, #5
 800558a:	69f9      	ldr	r1, [r7, #28]
 800558c:	4401      	add	r1, r0
 800558e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005592:	4313      	orrs	r3, r2
 8005594:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	78db      	ldrb	r3, [r3, #3]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d11f      	bne.n	80055de <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	0151      	lsls	r1, r2, #5
 80055b0:	69fa      	ldr	r2, [r7, #28]
 80055b2:	440a      	add	r2, r1
 80055b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80055bc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	69ba      	ldr	r2, [r7, #24]
 80055ce:	0151      	lsls	r1, r2, #5
 80055d0:	69fa      	ldr	r2, [r7, #28]
 80055d2:	440a      	add	r2, r1
 80055d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055dc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80055de:	79fb      	ldrb	r3, [r7, #7]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d14b      	bne.n	800567c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d009      	beq.n	8005600 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	015a      	lsls	r2, r3, #5
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f8:	461a      	mov	r2, r3
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	78db      	ldrb	r3, [r3, #3]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d128      	bne.n	800565a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005614:	2b00      	cmp	r3, #0
 8005616:	d110      	bne.n	800563a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	0151      	lsls	r1, r2, #5
 800562a:	69fa      	ldr	r2, [r7, #28]
 800562c:	440a      	add	r2, r1
 800562e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005632:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005636:	6013      	str	r3, [r2, #0]
 8005638:	e00f      	b.n	800565a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	4413      	add	r3, r2
 8005642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	69ba      	ldr	r2, [r7, #24]
 800564a:	0151      	lsls	r1, r2, #5
 800564c:	69fa      	ldr	r2, [r7, #28]
 800564e:	440a      	add	r2, r1
 8005650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005658:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	4413      	add	r3, r2
 8005662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	0151      	lsls	r1, r2, #5
 800566c:	69fa      	ldr	r2, [r7, #28]
 800566e:	440a      	add	r2, r1
 8005670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005674:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	e12f      	b.n	80058dc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	4413      	add	r3, r2
 8005684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	0151      	lsls	r1, r2, #5
 800568e:	69fa      	ldr	r2, [r7, #28]
 8005690:	440a      	add	r2, r1
 8005692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005696:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800569a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	78db      	ldrb	r3, [r3, #3]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d015      	beq.n	80056d0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 8117 	beq.w	80058dc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	f003 030f 	and.w	r3, r3, #15
 80056be:	2101      	movs	r1, #1
 80056c0:	fa01 f303 	lsl.w	r3, r1, r3
 80056c4:	69f9      	ldr	r1, [r7, #28]
 80056c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056ca:	4313      	orrs	r3, r2
 80056cc:	634b      	str	r3, [r1, #52]	; 0x34
 80056ce:	e105      	b.n	80058dc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d110      	bne.n	8005702 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	0151      	lsls	r1, r2, #5
 80056f2:	69fa      	ldr	r2, [r7, #28]
 80056f4:	440a      	add	r2, r1
 80056f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056fe:	6013      	str	r3, [r2, #0]
 8005700:	e00f      	b.n	8005722 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	4413      	add	r3, r2
 800570a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	0151      	lsls	r1, r2, #5
 8005714:	69fa      	ldr	r2, [r7, #28]
 8005716:	440a      	add	r2, r1
 8005718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800571c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005720:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	68d9      	ldr	r1, [r3, #12]
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	781a      	ldrb	r2, [r3, #0]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	b298      	uxth	r0, r3
 8005730:	79fb      	ldrb	r3, [r7, #7]
 8005732:	9300      	str	r3, [sp, #0]
 8005734:	4603      	mov	r3, r0
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 fa2b 	bl	8005b92 <USB_WritePacket>
 800573c:	e0ce      	b.n	80058dc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	4413      	add	r3, r2
 8005746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	0151      	lsls	r1, r2, #5
 8005750:	69fa      	ldr	r2, [r7, #28]
 8005752:	440a      	add	r2, r1
 8005754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005758:	0cdb      	lsrs	r3, r3, #19
 800575a:	04db      	lsls	r3, r3, #19
 800575c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	4413      	add	r3, r2
 8005766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	0151      	lsls	r1, r2, #5
 8005770:	69fa      	ldr	r2, [r7, #28]
 8005772:	440a      	add	r2, r1
 8005774:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005778:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800577c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005780:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d126      	bne.n	80057d8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	4413      	add	r3, r2
 8005792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005796:	691a      	ldr	r2, [r3, #16]
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057a0:	69b9      	ldr	r1, [r7, #24]
 80057a2:	0148      	lsls	r0, r1, #5
 80057a4:	69f9      	ldr	r1, [r7, #28]
 80057a6:	4401      	add	r1, r0
 80057a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80057ac:	4313      	orrs	r3, r2
 80057ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	0151      	lsls	r1, r2, #5
 80057c2:	69fa      	ldr	r2, [r7, #28]
 80057c4:	440a      	add	r2, r1
 80057c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057ce:	6113      	str	r3, [r2, #16]
 80057d0:	e036      	b.n	8005840 <USB_EPStartXfer+0x3dc>
 80057d2:	bf00      	nop
 80057d4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	695a      	ldr	r2, [r3, #20]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	4413      	add	r3, r2
 80057e2:	1e5a      	subs	r2, r3, #1
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ec:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fa:	691a      	ldr	r2, [r3, #16]
 80057fc:	8afb      	ldrh	r3, [r7, #22]
 80057fe:	04d9      	lsls	r1, r3, #19
 8005800:	4b39      	ldr	r3, [pc, #228]	; (80058e8 <USB_EPStartXfer+0x484>)
 8005802:	400b      	ands	r3, r1
 8005804:	69b9      	ldr	r1, [r7, #24]
 8005806:	0148      	lsls	r0, r1, #5
 8005808:	69f9      	ldr	r1, [r7, #28]
 800580a:	4401      	add	r1, r0
 800580c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005810:	4313      	orrs	r3, r2
 8005812:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005820:	691a      	ldr	r2, [r3, #16]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	8af9      	ldrh	r1, [r7, #22]
 8005828:	fb01 f303 	mul.w	r3, r1, r3
 800582c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005830:	69b9      	ldr	r1, [r7, #24]
 8005832:	0148      	lsls	r0, r1, #5
 8005834:	69f9      	ldr	r1, [r7, #28]
 8005836:	4401      	add	r1, r0
 8005838:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800583c:	4313      	orrs	r3, r2
 800583e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005840:	79fb      	ldrb	r3, [r7, #7]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d10d      	bne.n	8005862 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d009      	beq.n	8005862 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	68d9      	ldr	r1, [r3, #12]
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	4413      	add	r3, r2
 800585a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800585e:	460a      	mov	r2, r1
 8005860:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	78db      	ldrb	r3, [r3, #3]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d128      	bne.n	80058bc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005876:	2b00      	cmp	r3, #0
 8005878:	d110      	bne.n	800589c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	4413      	add	r3, r2
 8005882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	0151      	lsls	r1, r2, #5
 800588c:	69fa      	ldr	r2, [r7, #28]
 800588e:	440a      	add	r2, r1
 8005890:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005894:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005898:	6013      	str	r3, [r2, #0]
 800589a:	e00f      	b.n	80058bc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	0151      	lsls	r1, r2, #5
 80058ae:	69fa      	ldr	r2, [r7, #28]
 80058b0:	440a      	add	r2, r1
 80058b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	0151      	lsls	r1, r2, #5
 80058ce:	69fa      	ldr	r2, [r7, #28]
 80058d0:	440a      	add	r2, r1
 80058d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3720      	adds	r7, #32
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	1ff80000 	.word	0x1ff80000

080058ec <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	4613      	mov	r3, r2
 80058f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	785b      	ldrb	r3, [r3, #1]
 8005908:	2b01      	cmp	r3, #1
 800590a:	f040 80cd 	bne.w	8005aa8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d132      	bne.n	800597c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	4413      	add	r3, r2
 800591e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	0151      	lsls	r1, r2, #5
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	440a      	add	r2, r1
 800592c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005930:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005934:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005938:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	4413      	add	r3, r2
 8005942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	0151      	lsls	r1, r2, #5
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	440a      	add	r2, r1
 8005950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005954:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005958:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	0151      	lsls	r1, r2, #5
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	440a      	add	r2, r1
 8005970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005974:	0cdb      	lsrs	r3, r3, #19
 8005976:	04db      	lsls	r3, r3, #19
 8005978:	6113      	str	r3, [r2, #16]
 800597a:	e04e      	b.n	8005a1a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	4413      	add	r3, r2
 8005984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	0151      	lsls	r1, r2, #5
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	440a      	add	r2, r1
 8005992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005996:	0cdb      	lsrs	r3, r3, #19
 8005998:	04db      	lsls	r3, r3, #19
 800599a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	0151      	lsls	r1, r2, #5
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	440a      	add	r2, r1
 80059b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059be:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	695a      	ldr	r2, [r3, #20]
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d903      	bls.n	80059d4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	689a      	ldr	r2, [r3, #8]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	0151      	lsls	r1, r2, #5
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	440a      	add	r2, r1
 80059ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a00:	691a      	ldr	r2, [r3, #16]
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a0a:	6939      	ldr	r1, [r7, #16]
 8005a0c:	0148      	lsls	r0, r1, #5
 8005a0e:	6979      	ldr	r1, [r7, #20]
 8005a10:	4401      	add	r1, r0
 8005a12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a16:	4313      	orrs	r3, r2
 8005a18:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a1a:	79fb      	ldrb	r3, [r7, #7]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d11e      	bne.n	8005a5e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d009      	beq.n	8005a3c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a34:	461a      	mov	r2, r3
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	0151      	lsls	r1, r2, #5
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	440a      	add	r2, r1
 8005a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a5a:	6013      	str	r3, [r2, #0]
 8005a5c:	e092      	b.n	8005b84 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	0151      	lsls	r1, r2, #5
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	440a      	add	r2, r1
 8005a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a7c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d07e      	beq.n	8005b84 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	f003 030f 	and.w	r3, r3, #15
 8005a96:	2101      	movs	r1, #1
 8005a98:	fa01 f303 	lsl.w	r3, r1, r3
 8005a9c:	6979      	ldr	r1, [r7, #20]
 8005a9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	634b      	str	r3, [r1, #52]	; 0x34
 8005aa6:	e06d      	b.n	8005b84 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	0151      	lsls	r1, r2, #5
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	440a      	add	r2, r1
 8005abe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ac2:	0cdb      	lsrs	r3, r3, #19
 8005ac4:	04db      	lsls	r3, r3, #19
 8005ac6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	015a      	lsls	r2, r3, #5
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	0151      	lsls	r1, r2, #5
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	440a      	add	r2, r1
 8005ade:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ae2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ae6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005aea:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	689a      	ldr	r2, [r3, #8]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	015a      	lsls	r2, r3, #5
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	4413      	add	r3, r2
 8005b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	0151      	lsls	r1, r2, #5
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	440a      	add	r2, r1
 8005b12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b1a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b28:	691a      	ldr	r2, [r3, #16]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b32:	6939      	ldr	r1, [r7, #16]
 8005b34:	0148      	lsls	r0, r1, #5
 8005b36:	6979      	ldr	r1, [r7, #20]
 8005b38:	4401      	add	r1, r0
 8005b3a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005b42:	79fb      	ldrb	r3, [r7, #7]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d10d      	bne.n	8005b64 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d009      	beq.n	8005b64 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	68d9      	ldr	r1, [r3, #12]
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b60:	460a      	mov	r2, r1
 8005b62:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	0151      	lsls	r1, r2, #5
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	440a      	add	r2, r1
 8005b7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	371c      	adds	r7, #28
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b089      	sub	sp, #36	; 0x24
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	60b9      	str	r1, [r7, #8]
 8005b9c:	4611      	mov	r1, r2
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	71fb      	strb	r3, [r7, #7]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005bb0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d123      	bne.n	8005c00 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005bb8:	88bb      	ldrh	r3, [r7, #4]
 8005bba:	3303      	adds	r3, #3
 8005bbc:	089b      	lsrs	r3, r3, #2
 8005bbe:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	61bb      	str	r3, [r7, #24]
 8005bc4:	e018      	b.n	8005bf8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005bc6:	79fb      	ldrb	r3, [r7, #7]
 8005bc8:	031a      	lsls	r2, r3, #12
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	3301      	adds	r3, #1
 8005be4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	3301      	adds	r3, #1
 8005bea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	61bb      	str	r3, [r7, #24]
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d3e2      	bcc.n	8005bc6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3724      	adds	r7, #36	; 0x24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b08b      	sub	sp, #44	; 0x2c
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	60f8      	str	r0, [r7, #12]
 8005c16:	60b9      	str	r1, [r7, #8]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005c24:	88fb      	ldrh	r3, [r7, #6]
 8005c26:	089b      	lsrs	r3, r3, #2
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005c2c:	88fb      	ldrh	r3, [r7, #6]
 8005c2e:	f003 0303 	and.w	r3, r3, #3
 8005c32:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005c34:	2300      	movs	r3, #0
 8005c36:	623b      	str	r3, [r7, #32]
 8005c38:	e014      	b.n	8005c64 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	601a      	str	r2, [r3, #0]
    pDest++;
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	3301      	adds	r3, #1
 8005c4a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	3301      	adds	r3, #1
 8005c50:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	3301      	adds	r3, #1
 8005c56:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005c5e:	6a3b      	ldr	r3, [r7, #32]
 8005c60:	3301      	adds	r3, #1
 8005c62:	623b      	str	r3, [r7, #32]
 8005c64:	6a3a      	ldr	r2, [r7, #32]
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d3e6      	bcc.n	8005c3a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005c6c:	8bfb      	ldrh	r3, [r7, #30]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d01e      	beq.n	8005cb0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	f107 0310 	add.w	r3, r7, #16
 8005c82:	6812      	ldr	r2, [r2, #0]
 8005c84:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	6a3b      	ldr	r3, [r7, #32]
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	00db      	lsls	r3, r3, #3
 8005c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c92:	b2da      	uxtb	r2, r3
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	701a      	strb	r2, [r3, #0]
      i++;
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	623b      	str	r3, [r7, #32]
      pDest++;
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005ca4:	8bfb      	ldrh	r3, [r7, #30]
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005caa:	8bfb      	ldrh	r3, [r7, #30]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1ea      	bne.n	8005c86 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	372c      	adds	r7, #44	; 0x2c
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b085      	sub	sp, #20
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	785b      	ldrb	r3, [r3, #1]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d12c      	bne.n	8005d34 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	db12      	blt.n	8005d12 <USB_EPSetStall+0x54>
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00f      	beq.n	8005d12 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	0151      	lsls	r1, r2, #5
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	440a      	add	r2, r1
 8005d08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d10:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	0151      	lsls	r1, r2, #5
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	440a      	add	r2, r1
 8005d28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d30:	6013      	str	r3, [r2, #0]
 8005d32:	e02b      	b.n	8005d8c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	015a      	lsls	r2, r3, #5
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	db12      	blt.n	8005d6c <USB_EPSetStall+0xae>
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00f      	beq.n	8005d6c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	0151      	lsls	r1, r2, #5
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	440a      	add	r2, r1
 8005d62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d6a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	0151      	lsls	r1, r2, #5
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	440a      	add	r2, r1
 8005d82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b085      	sub	sp, #20
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	785b      	ldrb	r3, [r3, #1]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d128      	bne.n	8005e08 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	0151      	lsls	r1, r2, #5
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	440a      	add	r2, r1
 8005dcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005dd4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	78db      	ldrb	r3, [r3, #3]
 8005dda:	2b03      	cmp	r3, #3
 8005ddc:	d003      	beq.n	8005de6 <USB_EPClearStall+0x4c>
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	78db      	ldrb	r3, [r3, #3]
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d138      	bne.n	8005e58 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	0151      	lsls	r1, r2, #5
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	440a      	add	r2, r1
 8005dfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e04:	6013      	str	r3, [r2, #0]
 8005e06:	e027      	b.n	8005e58 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	0151      	lsls	r1, r2, #5
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	440a      	add	r2, r1
 8005e1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e26:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	78db      	ldrb	r3, [r3, #3]
 8005e2c:	2b03      	cmp	r3, #3
 8005e2e:	d003      	beq.n	8005e38 <USB_EPClearStall+0x9e>
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	78db      	ldrb	r3, [r3, #3]
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d10f      	bne.n	8005e58 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	0151      	lsls	r1, r2, #5
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	440a      	add	r2, r1
 8005e4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e56:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b085      	sub	sp, #20
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
 8005e6e:	460b      	mov	r3, r1
 8005e70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e84:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005e88:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	78fb      	ldrb	r3, [r7, #3]
 8005e94:	011b      	lsls	r3, r3, #4
 8005e96:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005e9a:	68f9      	ldr	r1, [r7, #12]
 8005e9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b085      	sub	sp, #20
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ecc:	f023 0303 	bic.w	r3, r3, #3
 8005ed0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ee0:	f023 0302 	bic.w	r3, r3, #2
 8005ee4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f0e:	f023 0303 	bic.w	r3, r3, #3
 8005f12:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f22:	f043 0302 	orr.w	r3, r3, #2
 8005f26:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b085      	sub	sp, #20
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	0c1b      	lsrs	r3, r3, #16
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	b29b      	uxth	r3, r3
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	460b      	mov	r3, r1
 8005fce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005fd4:	78fb      	ldrb	r3, [r7, #3]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	4013      	ands	r3, r2
 8005ff0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ff2:	68bb      	ldr	r3, [r7, #8]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006000:	b480      	push	{r7}
 8006002:	b087      	sub	sp, #28
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	460b      	mov	r3, r1
 800600a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006022:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006024:	78fb      	ldrb	r3, [r7, #3]
 8006026:	f003 030f 	and.w	r3, r3, #15
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	fa22 f303 	lsr.w	r3, r2, r3
 8006030:	01db      	lsls	r3, r3, #7
 8006032:	b2db      	uxtb	r3, r3
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	4313      	orrs	r3, r2
 8006038:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800603a:	78fb      	ldrb	r3, [r7, #3]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	4413      	add	r3, r2
 8006042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	4013      	ands	r3, r2
 800604c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800604e:	68bb      	ldr	r3, [r7, #8]
}
 8006050:	4618      	mov	r0, r3
 8006052:	371c      	adds	r7, #28
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	f003 0301 	and.w	r3, r3, #1
}
 800606c:	4618      	mov	r0, r3
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006092:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006096:	f023 0307 	bic.w	r3, r3, #7
 800609a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
	...

080060c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	460b      	mov	r3, r1
 80060ca:	607a      	str	r2, [r7, #4]
 80060cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	333c      	adds	r3, #60	; 0x3c
 80060d6:	3304      	adds	r3, #4
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	4a26      	ldr	r2, [pc, #152]	; (8006178 <USB_EP0_OutStart+0xb8>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d90a      	bls.n	80060fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060f4:	d101      	bne.n	80060fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80060f6:	2300      	movs	r3, #0
 80060f8:	e037      	b.n	800616a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006100:	461a      	mov	r2, r3
 8006102:	2300      	movs	r3, #0
 8006104:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006114:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006118:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006128:	f043 0318 	orr.w	r3, r3, #24
 800612c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800613c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006140:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006142:	7afb      	ldrb	r3, [r7, #11]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d10f      	bne.n	8006168 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800614e:	461a      	mov	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006162:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006166:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	371c      	adds	r7, #28
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	4f54300a 	.word	0x4f54300a

0800617c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006184:	2300      	movs	r3, #0
 8006186:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	3301      	adds	r3, #1
 800618c:	60fb      	str	r3, [r7, #12]
 800618e:	4a13      	ldr	r2, [pc, #76]	; (80061dc <USB_CoreReset+0x60>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d901      	bls.n	8006198 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e01a      	b.n	80061ce <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	2b00      	cmp	r3, #0
 800619e:	daf3      	bge.n	8006188 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	f043 0201 	orr.w	r2, r3, #1
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	3301      	adds	r3, #1
 80061b4:	60fb      	str	r3, [r7, #12]
 80061b6:	4a09      	ldr	r2, [pc, #36]	; (80061dc <USB_CoreReset+0x60>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d901      	bls.n	80061c0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e006      	b.n	80061ce <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d0f1      	beq.n	80061b0 <USB_CoreReset+0x34>

  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	00030d40 	.word	0x00030d40

080061e0 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	460b      	mov	r3, r1
 80061ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

  /* Allocate Audio structure */
  haudio = USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 80061ec:	f643 4050 	movw	r0, #15440	; 0x3c50
 80061f0:	f002 f9fe 	bl	80085f0 <USBD_static_malloc>
 80061f4:	60f8      	str	r0, [r7, #12]

  if (haudio == NULL)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d105      	bne.n	8006208 <USBD_AUDIO_Init+0x28>
  {
    pdev->pClassData = NULL;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006204:	2302      	movs	r3, #2
 8006206:	e04b      	b.n	80062a0 <USBD_AUDIO_Init+0xc0>
  }

  pdev->pClassData = (void *)haudio;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	7c1b      	ldrb	r3, [r3, #16]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d104      	bne.n	8006222 <USBD_AUDIO_Init+0x42>
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 8006220:	e003      	b.n	800622a <USBD_AUDIO_Init+0x4a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2201      	movs	r2, #1
 8006226:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIO_OUT_EP, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 800622a:	23c0      	movs	r3, #192	; 0xc0
 800622c:	2201      	movs	r2, #1
 800622e:	2101      	movs	r1, #1
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f002 f86c 	bl	800830e <USBD_LL_OpenEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 1U;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  haudio->alt_setting = 0U;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800624a:	3304      	adds	r3, #4
 800624c:	2203      	movs	r2, #3
 800624e:	701a      	strb	r2, [r3, #0]
  haudio->wr_ptr = 0U;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006256:	3308      	adds	r3, #8
 8006258:	2200      	movs	r2, #0
 800625a:	801a      	strh	r2, [r3, #0]
  haudio->rd_ptr = 0U;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006262:	3306      	adds	r3, #6
 8006264:	2200      	movs	r2, #0
 8006266:	801a      	strh	r2, [r3, #0]
  haudio->rd_enable = 0U;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800626e:	3305      	adds	r3, #5
 8006270:	2200      	movs	r2, #0
 8006272:	701a      	strb	r2, [r3, #0]

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Init(USBD_AUDIO_FREQ,
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2200      	movs	r2, #0
 800627e:	2146      	movs	r1, #70	; 0x46
 8006280:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8006284:	4798      	blx	r3
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <USBD_AUDIO_Init+0xb0>
                                                       AUDIO_DEFAULT_VOLUME,
                                                       0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 800628c:	2303      	movs	r3, #3
 800628e:	e007      	b.n	80062a0 <USBD_AUDIO_Init+0xc0>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, haudio->buffer,
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	1d1a      	adds	r2, r3, #4
 8006294:	23c0      	movs	r3, #192	; 0xc0
 8006296:	2101      	movs	r1, #1
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f002 f927 	bl	80084ec <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	460b      	mov	r3, r1
 80062b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIO_OUT_EP);
 80062b4:	2101      	movs	r1, #1
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f002 f84f 	bl	800835a <USBD_LL_CloseEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 0U;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = 0U;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00f      	beq.n	80062f6 <USBD_AUDIO_DeInit+0x4e>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->DeInit(0U);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	2000      	movs	r0, #0
 80062e0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062e8:	4618      	mov	r0, r3
 80062ea:	f002 f98f 	bl	800860c <USBD_static_free>
    pdev->pClassData = NULL;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800630a:	2300      	movs	r3, #0
 800630c:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 800630e:	2300      	movs	r3, #0
 8006310:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006318:	613b      	str	r3, [r7, #16]

  if (haudio == NULL)
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d101      	bne.n	8006324 <USBD_AUDIO_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006320:	2303      	movs	r3, #3
 8006322:	e0b0      	b.n	8006486 <USBD_AUDIO_Setup+0x186>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800632c:	2b00      	cmp	r3, #0
 800632e:	d01a      	beq.n	8006366 <USBD_AUDIO_Setup+0x66>
 8006330:	2b20      	cmp	r3, #32
 8006332:	f040 80a0 	bne.w	8006476 <USBD_AUDIO_Setup+0x176>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	785b      	ldrb	r3, [r3, #1]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d006      	beq.n	800634c <USBD_AUDIO_Setup+0x4c>
 800633e:	2b81      	cmp	r3, #129	; 0x81
 8006340:	d109      	bne.n	8006356 <USBD_AUDIO_Setup+0x56>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 8006342:	6839      	ldr	r1, [r7, #0]
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 fa59 	bl	80067fc <AUDIO_REQ_GetCurrent>
          break;
 800634a:	e00b      	b.n	8006364 <USBD_AUDIO_Setup+0x64>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 800634c:	6839      	ldr	r1, [r7, #0]
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 fa78 	bl	8006844 <AUDIO_REQ_SetCurrent>
          break;
 8006354:	e006      	b.n	8006364 <USBD_AUDIO_Setup+0x64>

        default:
          USBD_CtlError(pdev, req);
 8006356:	6839      	ldr	r1, [r7, #0]
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f001 fb71 	bl	8007a40 <USBD_CtlError>
          ret = USBD_FAIL;
 800635e:	2303      	movs	r3, #3
 8006360:	75fb      	strb	r3, [r7, #23]
          break;
 8006362:	bf00      	nop
      }
      break;
 8006364:	e08e      	b.n	8006484 <USBD_AUDIO_Setup+0x184>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	785b      	ldrb	r3, [r3, #1]
 800636a:	2b0b      	cmp	r3, #11
 800636c:	d878      	bhi.n	8006460 <USBD_AUDIO_Setup+0x160>
 800636e:	a201      	add	r2, pc, #4	; (adr r2, 8006374 <USBD_AUDIO_Setup+0x74>)
 8006370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006374:	080063a5 	.word	0x080063a5
 8006378:	0800646f 	.word	0x0800646f
 800637c:	08006461 	.word	0x08006461
 8006380:	08006461 	.word	0x08006461
 8006384:	08006461 	.word	0x08006461
 8006388:	08006461 	.word	0x08006461
 800638c:	080063cf 	.word	0x080063cf
 8006390:	08006461 	.word	0x08006461
 8006394:	08006461 	.word	0x08006461
 8006398:	08006461 	.word	0x08006461
 800639c:	080063f9 	.word	0x080063f9
 80063a0:	08006421 	.word	0x08006421
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b03      	cmp	r3, #3
 80063ae:	d107      	bne.n	80063c0 <USBD_AUDIO_Setup+0xc0>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80063b0:	f107 0308 	add.w	r3, r7, #8
 80063b4:	2202      	movs	r2, #2
 80063b6:	4619      	mov	r1, r3
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f001 fbb2 	bl	8007b22 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063be:	e059      	b.n	8006474 <USBD_AUDIO_Setup+0x174>
            USBD_CtlError(pdev, req);
 80063c0:	6839      	ldr	r1, [r7, #0]
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f001 fb3c 	bl	8007a40 <USBD_CtlError>
            ret = USBD_FAIL;
 80063c8:	2303      	movs	r3, #3
 80063ca:	75fb      	strb	r3, [r7, #23]
          break;
 80063cc:	e052      	b.n	8006474 <USBD_AUDIO_Setup+0x174>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	885b      	ldrh	r3, [r3, #2]
 80063d2:	0a1b      	lsrs	r3, r3, #8
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	2b21      	cmp	r3, #33	; 0x21
 80063d8:	d14b      	bne.n	8006472 <USBD_AUDIO_Setup+0x172>
          {
            pbuf = USBD_AUDIO_CfgDesc + 18;
 80063da:	4b2d      	ldr	r3, [pc, #180]	; (8006490 <USBD_AUDIO_Setup+0x190>)
 80063dc:	60fb      	str	r3, [r7, #12]
            len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	88db      	ldrh	r3, [r3, #6]
 80063e2:	2b09      	cmp	r3, #9
 80063e4:	bf28      	it	cs
 80063e6:	2309      	movcs	r3, #9
 80063e8:	817b      	strh	r3, [r7, #10]

            (void)USBD_CtlSendData(pdev, pbuf, len);
 80063ea:	897b      	ldrh	r3, [r7, #10]
 80063ec:	461a      	mov	r2, r3
 80063ee:	68f9      	ldr	r1, [r7, #12]
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f001 fb96 	bl	8007b22 <USBD_CtlSendData>
          }
          break;
 80063f6:	e03c      	b.n	8006472 <USBD_AUDIO_Setup+0x172>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b03      	cmp	r3, #3
 8006402:	d106      	bne.n	8006412 <USBD_AUDIO_Setup+0x112>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	2201      	movs	r2, #1
 8006408:	4619      	mov	r1, r3
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f001 fb89 	bl	8007b22 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006410:	e030      	b.n	8006474 <USBD_AUDIO_Setup+0x174>
            USBD_CtlError(pdev, req);
 8006412:	6839      	ldr	r1, [r7, #0]
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f001 fb13 	bl	8007a40 <USBD_CtlError>
            ret = USBD_FAIL;
 800641a:	2303      	movs	r3, #3
 800641c:	75fb      	strb	r3, [r7, #23]
          break;
 800641e:	e029      	b.n	8006474 <USBD_AUDIO_Setup+0x174>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b03      	cmp	r3, #3
 800642a:	d112      	bne.n	8006452 <USBD_AUDIO_Setup+0x152>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	885b      	ldrh	r3, [r3, #2]
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b01      	cmp	r3, #1
 8006434:	d806      	bhi.n	8006444 <USBD_AUDIO_Setup+0x144>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	885b      	ldrh	r3, [r3, #2]
 800643a:	b2db      	uxtb	r3, r3
 800643c:	461a      	mov	r2, r3
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006442:	e017      	b.n	8006474 <USBD_AUDIO_Setup+0x174>
              USBD_CtlError(pdev, req);
 8006444:	6839      	ldr	r1, [r7, #0]
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f001 fafa 	bl	8007a40 <USBD_CtlError>
              ret = USBD_FAIL;
 800644c:	2303      	movs	r3, #3
 800644e:	75fb      	strb	r3, [r7, #23]
          break;
 8006450:	e010      	b.n	8006474 <USBD_AUDIO_Setup+0x174>
            USBD_CtlError(pdev, req);
 8006452:	6839      	ldr	r1, [r7, #0]
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f001 faf3 	bl	8007a40 <USBD_CtlError>
            ret = USBD_FAIL;
 800645a:	2303      	movs	r3, #3
 800645c:	75fb      	strb	r3, [r7, #23]
          break;
 800645e:	e009      	b.n	8006474 <USBD_AUDIO_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006460:	6839      	ldr	r1, [r7, #0]
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f001 faec 	bl	8007a40 <USBD_CtlError>
          ret = USBD_FAIL;
 8006468:	2303      	movs	r3, #3
 800646a:	75fb      	strb	r3, [r7, #23]
          break;
 800646c:	e002      	b.n	8006474 <USBD_AUDIO_Setup+0x174>
          break;
 800646e:	bf00      	nop
 8006470:	e008      	b.n	8006484 <USBD_AUDIO_Setup+0x184>
          break;
 8006472:	bf00      	nop
      }
      break;
 8006474:	e006      	b.n	8006484 <USBD_AUDIO_Setup+0x184>
    default:
      USBD_CtlError(pdev, req);
 8006476:	6839      	ldr	r1, [r7, #0]
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f001 fae1 	bl	8007a40 <USBD_CtlError>
      ret = USBD_FAIL;
 800647e:	2303      	movs	r3, #3
 8006480:	75fb      	strb	r3, [r7, #23]
      break;
 8006482:	bf00      	nop
  }

  return (uint8_t)ret;
 8006484:	7dfb      	ldrb	r3, [r7, #23]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3718      	adds	r7, #24
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	20000056 	.word	0x20000056

08006494 <USBD_AUDIO_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	226d      	movs	r2, #109	; 0x6d
 80064a0:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 80064a2:	4b03      	ldr	r3, [pc, #12]	; (80064b0 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr
 80064b0:	20000044 	.word	0x20000044

080064b4 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	460b      	mov	r3, r1
 80064be:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	370c      	adds	r7, #12
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b084      	sub	sp, #16
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064dc:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <USBD_AUDIO_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e025      	b.n	8006534 <USBD_AUDIO_EP0_RxReady+0x66>
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80064ee:	330a      	adds	r3, #10
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d11d      	bne.n	8006532 <USBD_AUDIO_EP0_RxReady+0x64>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 80064fc:	330c      	adds	r3, #12
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	2b02      	cmp	r3, #2
 8006502:	d116      	bne.n	8006532 <USBD_AUDIO_EP0_RxReady+0x64>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->MuteCtl(haudio->control.data[0]);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800650a:	691a      	ldr	r2, [r3, #16]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006512:	330b      	adds	r3, #11
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	4618      	mov	r0, r3
 8006518:	4790      	blx	r2
      haudio->control.cmd = 0U;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006520:	330a      	adds	r3, #10
 8006522:	2200      	movs	r2, #0
 8006524:	701a      	strb	r2, [r3, #0]
      haudio->control.len = 0U;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 800652c:	330b      	adds	r3, #11
 800652e:	2200      	movs	r2, #0
 8006530:	701a      	strb	r2, [r3, #0]
    }
  }

  return (uint8_t)USBD_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 8006552:	b480      	push	{r7}
 8006554:	b083      	sub	sp, #12
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <USBD_AUDIO_Sync>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
void USBD_AUDIO_Sync(USBD_HandleTypeDef *pdev, AUDIO_OffsetTypeDef offset)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	460b      	mov	r3, r1
 8006572:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint32_t BufferSize = AUDIO_TOTAL_BUF_SIZE / 2U;
 8006574:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8006578:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 8099 	beq.w	80066b8 <USBD_AUDIO_Sync+0x150>
  {
    return;
  }

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800658c:	60bb      	str	r3, [r7, #8]

  haudio->offset = offset;
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006594:	3304      	adds	r3, #4
 8006596:	78fa      	ldrb	r2, [r7, #3]
 8006598:	701a      	strb	r2, [r3, #0]

  if (haudio->rd_enable == 1U)
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80065a0:	3305      	adds	r3, #5
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d11b      	bne.n	80065e0 <USBD_AUDIO_Sync+0x78>
  {
    haudio->rd_ptr += (uint16_t)BufferSize;
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80065ae:	3306      	adds	r3, #6
 80065b0:	881a      	ldrh	r2, [r3, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	4413      	add	r3, r2
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80065c0:	3306      	adds	r3, #6
 80065c2:	801a      	strh	r2, [r3, #0]

    if (haudio->rd_ptr == AUDIO_TOTAL_BUF_SIZE)
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80065ca:	3306      	adds	r3, #6
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 80065d2:	d105      	bne.n	80065e0 <USBD_AUDIO_Sync+0x78>
    {
      /* roll back */
      haudio->rd_ptr = 0U;
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80065da:	3306      	adds	r3, #6
 80065dc:	2200      	movs	r2, #0
 80065de:	801a      	strh	r2, [r3, #0]
    }
  }

  if (haudio->rd_ptr > haudio->wr_ptr)
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80065e6:	3306      	adds	r3, #6
 80065e8:	881a      	ldrh	r2, [r3, #0]
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80065f0:	3308      	adds	r3, #8
 80065f2:	881b      	ldrh	r3, [r3, #0]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d924      	bls.n	8006642 <USBD_AUDIO_Sync+0xda>
  {
    if ((haudio->rd_ptr - haudio->wr_ptr) < AUDIO_OUT_PACKET)
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80065fe:	3306      	adds	r3, #6
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	461a      	mov	r2, r3
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800660a:	3308      	adds	r3, #8
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	2bbf      	cmp	r3, #191	; 0xbf
 8006612:	dc03      	bgt.n	800661c <USBD_AUDIO_Sync+0xb4>
    {
      BufferSize += 4U;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	3304      	adds	r3, #4
 8006618:	60fb      	str	r3, [r7, #12]
 800661a:	e036      	b.n	800668a <USBD_AUDIO_Sync+0x122>
    }
    else
    {
      if ((haudio->rd_ptr - haudio->wr_ptr) > (AUDIO_TOTAL_BUF_SIZE - AUDIO_OUT_PACKET))
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006622:	3306      	adds	r3, #6
 8006624:	881b      	ldrh	r3, [r3, #0]
 8006626:	461a      	mov	r2, r3
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800662e:	3308      	adds	r3, #8
 8006630:	881b      	ldrh	r3, [r3, #0]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	f5b3 5f6d 	cmp.w	r3, #15168	; 0x3b40
 8006638:	dd27      	ble.n	800668a <USBD_AUDIO_Sync+0x122>
      {
        BufferSize -= 4U;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3b04      	subs	r3, #4
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	e023      	b.n	800668a <USBD_AUDIO_Sync+0x122>
      }
    }
  }
  else
  {
    if ((haudio->wr_ptr - haudio->rd_ptr) < AUDIO_OUT_PACKET)
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006648:	3308      	adds	r3, #8
 800664a:	881b      	ldrh	r3, [r3, #0]
 800664c:	461a      	mov	r2, r3
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006654:	3306      	adds	r3, #6
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	2bbf      	cmp	r3, #191	; 0xbf
 800665c:	dc03      	bgt.n	8006666 <USBD_AUDIO_Sync+0xfe>
    {
      BufferSize -= 4U;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	3b04      	subs	r3, #4
 8006662:	60fb      	str	r3, [r7, #12]
 8006664:	e011      	b.n	800668a <USBD_AUDIO_Sync+0x122>
    }
    else
    {
      if ((haudio->wr_ptr - haudio->rd_ptr) > (AUDIO_TOTAL_BUF_SIZE - AUDIO_OUT_PACKET))
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800666c:	3308      	adds	r3, #8
 800666e:	881b      	ldrh	r3, [r3, #0]
 8006670:	461a      	mov	r2, r3
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006678:	3306      	adds	r3, #6
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	f5b3 5f6d 	cmp.w	r3, #15168	; 0x3b40
 8006682:	dd02      	ble.n	800668a <USBD_AUDIO_Sync+0x122>
      {
        BufferSize += 4U;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	3304      	adds	r3, #4
 8006688:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  if (haudio->offset == AUDIO_OFFSET_FULL)
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006690:	3304      	adds	r3, #4
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	2b02      	cmp	r3, #2
 8006696:	d110      	bne.n	80066ba <USBD_AUDIO_Sync+0x152>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	1d10      	adds	r0, r2, #4
 80066a4:	2202      	movs	r2, #2
 80066a6:	68f9      	ldr	r1, [r7, #12]
 80066a8:	4798      	blx	r3
                                                         BufferSize, AUDIO_CMD_PLAY);
    haudio->offset = AUDIO_OFFSET_NONE;
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80066b0:	3304      	adds	r3, #4
 80066b2:	2200      	movs	r2, #0
 80066b4:	701a      	strb	r2, [r3, #0]
 80066b6:	e000      	b.n	80066ba <USBD_AUDIO_Sync+0x152>
    return;
 80066b8:	bf00      	nop
  }
}
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	460b      	mov	r3, r1
 80066ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr

080066da <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066da:	b480      	push	{r7}
 80066dc:	b083      	sub	sp, #12
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
 80066e2:	460b      	mov	r3, r1
 80066e4:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066f4:	b590      	push	{r4, r7, lr}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	460b      	mov	r3, r1
 80066fe:	70fb      	strb	r3, [r7, #3]
  uint16_t PacketSize;
  USBD_AUDIO_HandleTypeDef *haudio;

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006706:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d101      	bne.n	8006712 <USBD_AUDIO_DataOut+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800670e:	2303      	movs	r3, #3
 8006710:	e070      	b.n	80067f4 <USBD_AUDIO_DataOut+0x100>
  }

  if (epnum == AUDIO_OUT_EP)
 8006712:	78fb      	ldrb	r3, [r7, #3]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d16c      	bne.n	80067f2 <USBD_AUDIO_DataOut+0xfe>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 8006718:	78fb      	ldrb	r3, [r7, #3]
 800671a:	4619      	mov	r1, r3
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f001 ff06 	bl	800852e <USBD_LL_GetRxDataSize>
 8006722:	4603      	mov	r3, r0
 8006724:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800672c:	695c      	ldr	r4, [r3, #20]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006734:	3308      	adds	r3, #8
 8006736:	881b      	ldrh	r3, [r3, #0]
 8006738:	461a      	mov	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	4413      	add	r3, r2
 800673e:	3304      	adds	r3, #4
 8006740:	8979      	ldrh	r1, [r7, #10]
 8006742:	2201      	movs	r2, #1
 8006744:	4618      	mov	r0, r3
 8006746:	47a0      	blx	r4
                                                           PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800674e:	3308      	adds	r3, #8
 8006750:	881a      	ldrh	r2, [r3, #0]
 8006752:	897b      	ldrh	r3, [r7, #10]
 8006754:	4413      	add	r3, r2
 8006756:	b29a      	uxth	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800675e:	3308      	adds	r3, #8
 8006760:	801a      	strh	r2, [r3, #0]

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006768:	3308      	adds	r3, #8
 800676a:	881b      	ldrh	r3, [r3, #0]
 800676c:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 8006770:	d11c      	bne.n	80067ac <USBD_AUDIO_DataOut+0xb8>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006778:	3308      	adds	r3, #8
 800677a:	2200      	movs	r2, #0
 800677c:	801a      	strh	r2, [r3, #0]

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006784:	3304      	adds	r3, #4
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	2b03      	cmp	r3, #3
 800678a:	d10f      	bne.n	80067ac <USBD_AUDIO_DataOut+0xb8>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	1d10      	adds	r0, r2, #4
 8006798:	2201      	movs	r2, #1
 800679a:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 800679e:	4798      	blx	r3
                                                             AUDIO_TOTAL_BUF_SIZE / 2U,
                                                             AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80067a6:	3304      	adds	r3, #4
 80067a8:	2200      	movs	r2, #0
 80067aa:	701a      	strb	r2, [r3, #0]
      }
    }

    if (haudio->rd_enable == 0U)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80067b2:	3305      	adds	r3, #5
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10d      	bne.n	80067d6 <USBD_AUDIO_DataOut+0xe2>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80067c0:	3308      	adds	r3, #8
 80067c2:	881b      	ldrh	r3, [r3, #0]
 80067c4:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 80067c8:	d105      	bne.n	80067d6 <USBD_AUDIO_DataOut+0xe2>
      {
        haudio->rd_enable = 1U;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80067d0:	3305      	adds	r3, #5
 80067d2:	2201      	movs	r2, #1
 80067d4:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
                                 &haudio->buffer[haudio->wr_ptr],
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80067dc:	3308      	adds	r3, #8
 80067de:	881b      	ldrh	r3, [r3, #0]
 80067e0:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	4413      	add	r3, r2
 80067e6:	1d1a      	adds	r2, r3, #4
 80067e8:	23c0      	movs	r3, #192	; 0xc0
 80067ea:	2101      	movs	r1, #1
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f001 fe7d 	bl	80084ec <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3714      	adds	r7, #20
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd90      	pop	{r4, r7, pc}

080067fc <AUDIO_REQ_GetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800680c:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d013      	beq.n	800683c <AUDIO_REQ_GetCurrent+0x40>
  {
    return;
  }

  (void)USBD_memset(haudio->control.data, 0, 64U);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800681a:	330b      	adds	r3, #11
 800681c:	2240      	movs	r2, #64	; 0x40
 800681e:	2100      	movs	r1, #0
 8006820:	4618      	mov	r0, r3
 8006822:	f001 ff4d 	bl	80086c0 <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data, req->wLength);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800682c:	330b      	adds	r3, #11
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	88d2      	ldrh	r2, [r2, #6]
 8006832:	4619      	mov	r1, r3
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f001 f974 	bl	8007b22 <USBD_CtlSendData>
 800683a:	e000      	b.n	800683e <AUDIO_REQ_GetCurrent+0x42>
    return;
 800683c:	bf00      	nop
}
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006854:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d026      	beq.n	80068aa <AUDIO_REQ_SetCurrent+0x66>
  {
    return;
  }

  if (req->wLength != 0U)
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	88db      	ldrh	r3, [r3, #6]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d023      	beq.n	80068ac <AUDIO_REQ_SetCurrent+0x68>
  {
    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, req->wLength);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800686a:	330b      	adds	r3, #11
 800686c:	683a      	ldr	r2, [r7, #0]
 800686e:	88d2      	ldrh	r2, [r2, #6]
 8006870:	4619      	mov	r1, r3
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f001 f981 	bl	8007b7a <USBD_CtlPrepareRx>

    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800687e:	330a      	adds	r3, #10
 8006880:	2201      	movs	r2, #1
 8006882:	701a      	strb	r2, [r3, #0]
    haudio->control.len = (uint8_t)req->wLength; /* Set the request data length */
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	88db      	ldrh	r3, [r3, #6]
 8006888:	b2da      	uxtb	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 8006890:	330b      	adds	r3, #11
 8006892:	701a      	strb	r2, [r3, #0]
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	889b      	ldrh	r3, [r3, #4]
 8006898:	0a1b      	lsrs	r3, r3, #8
 800689a:	b29b      	uxth	r3, r3
 800689c:	b2da      	uxtb	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 80068a4:	330c      	adds	r3, #12
 80068a6:	701a      	strb	r2, [r3, #0]
 80068a8:	e000      	b.n	80068ac <AUDIO_REQ_SetCurrent+0x68>
    return;
 80068aa:	bf00      	nop
  }
}
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
	...

080068b4 <USBD_AUDIO_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	220a      	movs	r2, #10
 80068c0:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 80068c2:	4b03      	ldr	r3, [pc, #12]	; (80068d0 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr
 80068d0:	200000b4 	.word	0x200000b4

080068d4 <USBD_AUDIO_RegisterInterface>:
  * @param  fops: Audio interface callback
  * @retval status
  */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d101      	bne.n	80068e8 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e004      	b.n	80068f2 <USBD_AUDIO_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	683a      	ldr	r2, [r7, #0]
 80068ec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b086      	sub	sp, #24
 8006902:	af00      	add	r7, sp, #0
 8006904:	60f8      	str	r0, [r7, #12]
 8006906:	60b9      	str	r1, [r7, #8]
 8006908:	4613      	mov	r3, r2
 800690a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006912:	2303      	movs	r3, #3
 8006914:	e01f      	b.n	8006956 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	68ba      	ldr	r2, [r7, #8]
 8006938:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	79fa      	ldrb	r2, [r7, #7]
 8006948:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f001 fc78 	bl	8008240 <USBD_LL_Init>
 8006950:	4603      	mov	r3, r0
 8006952:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006954:	7dfb      	ldrb	r3, [r7, #23]
}
 8006956:	4618      	mov	r0, r3
 8006958:	3718      	adds	r7, #24
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b084      	sub	sp, #16
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
 8006966:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006968:	2300      	movs	r3, #0
 800696a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d101      	bne.n	8006976 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006972:	2303      	movs	r3, #3
 8006974:	e016      	b.n	80069a4 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00b      	beq.n	80069a2 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006992:	f107 020e 	add.w	r2, r7, #14
 8006996:	4610      	mov	r0, r2
 8006998:	4798      	blx	r3
 800699a:	4602      	mov	r2, r0
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f001 fc8f 	bl	80082d8 <USBD_LL_Start>
 80069ba:	4603      	mov	r3, r0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b084      	sub	sp, #16
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
 80069e2:	460b      	mov	r3, r1
 80069e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80069e6:	2303      	movs	r3, #3
 80069e8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d009      	beq.n	8006a08 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	78fa      	ldrb	r2, [r7, #3]
 80069fe:	4611      	mov	r1, r2
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	4798      	blx	r3
 8006a04:	4603      	mov	r3, r0
 8006a06:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b082      	sub	sp, #8
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d007      	beq.n	8006a38 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	78fa      	ldrb	r2, [r7, #3]
 8006a32:	4611      	mov	r1, r2
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	4798      	blx	r3
  }

  return USBD_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b084      	sub	sp, #16
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a52:	6839      	ldr	r1, [r7, #0]
 8006a54:	4618      	mov	r0, r3
 8006a56:	f000 ffb9 	bl	80079cc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006a68:	461a      	mov	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006a76:	f003 031f 	and.w	r3, r3, #31
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d01a      	beq.n	8006ab4 <USBD_LL_SetupStage+0x72>
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d822      	bhi.n	8006ac8 <USBD_LL_SetupStage+0x86>
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d002      	beq.n	8006a8c <USBD_LL_SetupStage+0x4a>
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d00a      	beq.n	8006aa0 <USBD_LL_SetupStage+0x5e>
 8006a8a:	e01d      	b.n	8006ac8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a92:	4619      	mov	r1, r3
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fa61 	bl	8006f5c <USBD_StdDevReq>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	73fb      	strb	r3, [r7, #15]
      break;
 8006a9e:	e020      	b.n	8006ae2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fac5 	bl	8007038 <USBD_StdItfReq>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	73fb      	strb	r3, [r7, #15]
      break;
 8006ab2:	e016      	b.n	8006ae2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006aba:	4619      	mov	r1, r3
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 fb04 	bl	80070ca <USBD_StdEPReq>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	73fb      	strb	r3, [r7, #15]
      break;
 8006ac6:	e00c      	b.n	8006ae2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ace:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f001 fc5e 	bl	8008398 <USBD_LL_StallEP>
 8006adc:	4603      	mov	r3, r0
 8006ade:	73fb      	strb	r3, [r7, #15]
      break;
 8006ae0:	bf00      	nop
  }

  return ret;
 8006ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	460b      	mov	r3, r1
 8006af6:	607a      	str	r2, [r7, #4]
 8006af8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006afa:	7afb      	ldrb	r3, [r7, #11]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d138      	bne.n	8006b72 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006b06:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b0e:	2b03      	cmp	r3, #3
 8006b10:	d14a      	bne.n	8006ba8 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	689a      	ldr	r2, [r3, #8]
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d913      	bls.n	8006b46 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	689a      	ldr	r2, [r3, #8]
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	1ad2      	subs	r2, r2, r3
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	68da      	ldr	r2, [r3, #12]
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	4293      	cmp	r3, r2
 8006b36:	bf28      	it	cs
 8006b38:	4613      	movcs	r3, r2
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	6879      	ldr	r1, [r7, #4]
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f001 f838 	bl	8007bb4 <USBD_CtlContinueRx>
 8006b44:	e030      	b.n	8006ba8 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b03      	cmp	r3, #3
 8006b50:	d10b      	bne.n	8006b6a <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d005      	beq.n	8006b6a <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f001 f833 	bl	8007bd6 <USBD_CtlSendStatus>
 8006b70:	e01a      	b.n	8006ba8 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b03      	cmp	r3, #3
 8006b7c:	d114      	bne.n	8006ba8 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00e      	beq.n	8006ba8 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	7afa      	ldrb	r2, [r7, #11]
 8006b94:	4611      	mov	r1, r2
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	4798      	blx	r3
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006b9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d001      	beq.n	8006ba8 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006ba4:	7dfb      	ldrb	r3, [r7, #23]
 8006ba6:	e000      	b.n	8006baa <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3718      	adds	r7, #24
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b086      	sub	sp, #24
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	60f8      	str	r0, [r7, #12]
 8006bba:	460b      	mov	r3, r1
 8006bbc:	607a      	str	r2, [r7, #4]
 8006bbe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006bc0:	7afb      	ldrb	r3, [r7, #11]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d16b      	bne.n	8006c9e <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	3314      	adds	r3, #20
 8006bca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d156      	bne.n	8006c84 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	689a      	ldr	r2, [r3, #8]
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d914      	bls.n	8006c0c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	689a      	ldr	r2, [r3, #8]
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	1ad2      	subs	r2, r2, r3
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	6879      	ldr	r1, [r7, #4]
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f000 ffad 	bl	8007b58 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bfe:	2300      	movs	r3, #0
 8006c00:	2200      	movs	r2, #0
 8006c02:	2100      	movs	r1, #0
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f001 fc71 	bl	80084ec <USBD_LL_PrepareReceive>
 8006c0a:	e03b      	b.n	8006c84 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	68da      	ldr	r2, [r3, #12]
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d11c      	bne.n	8006c52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d316      	bcc.n	8006c52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d20f      	bcs.n	8006c52 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c32:	2200      	movs	r2, #0
 8006c34:	2100      	movs	r1, #0
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	f000 ff8e 	bl	8007b58 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c44:	2300      	movs	r3, #0
 8006c46:	2200      	movs	r2, #0
 8006c48:	2100      	movs	r1, #0
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f001 fc4e 	bl	80084ec <USBD_LL_PrepareReceive>
 8006c50:	e018      	b.n	8006c84 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	2b03      	cmp	r3, #3
 8006c5c:	d10b      	bne.n	8006c76 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d005      	beq.n	8006c76 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c76:	2180      	movs	r1, #128	; 0x80
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f001 fb8d 	bl	8008398 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f000 ffbc 	bl	8007bfc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d122      	bne.n	8006cd4 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f7ff fe98 	bl	80069c4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006c9c:	e01a      	b.n	8006cd4 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	2b03      	cmp	r3, #3
 8006ca8:	d114      	bne.n	8006cd4 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00e      	beq.n	8006cd4 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	7afa      	ldrb	r2, [r7, #11]
 8006cc0:	4611      	mov	r1, r2
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	4798      	blx	r3
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006cca:	7dfb      	ldrb	r3, [r7, #23]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d001      	beq.n	8006cd4 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006cd0:	7dfb      	ldrb	r3, [r7, #23]
 8006cd2:	e000      	b.n	8006cd6 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3718      	adds	r7, #24
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b082      	sub	sp, #8
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e02f      	b.n	8006d72 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00f      	beq.n	8006d3c <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d009      	beq.n	8006d3c <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	6852      	ldr	r2, [r2, #4]
 8006d34:	b2d2      	uxtb	r2, r2
 8006d36:	4611      	mov	r1, r2
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d3c:	2340      	movs	r3, #64	; 0x40
 8006d3e:	2200      	movs	r2, #0
 8006d40:	2100      	movs	r1, #0
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f001 fae3 	bl	800830e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2240      	movs	r2, #64	; 0x40
 8006d54:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d58:	2340      	movs	r3, #64	; 0x40
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	2180      	movs	r1, #128	; 0x80
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f001 fad5 	bl	800830e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2240      	movs	r2, #64	; 0x40
 8006d6e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b083      	sub	sp, #12
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
 8006d82:	460b      	mov	r3, r1
 8006d84:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	78fa      	ldrb	r2, [r7, #3]
 8006d8a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b083      	sub	sp, #12
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006da8:	b2da      	uxtb	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2204      	movs	r2, #4
 8006db4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	370c      	adds	r7, #12
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	b083      	sub	sp, #12
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b04      	cmp	r3, #4
 8006dd8:	d106      	bne.n	8006de8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006de0:	b2da      	uxtb	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b082      	sub	sp, #8
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d101      	bne.n	8006e0c <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e012      	b.n	8006e32 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	2b03      	cmp	r3, #3
 8006e16:	d10b      	bne.n	8006e30 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e1e:	69db      	ldr	r3, [r3, #28]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d005      	beq.n	8006e30 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e2a:	69db      	ldr	r3, [r3, #28]
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b082      	sub	sp, #8
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
 8006e42:	460b      	mov	r3, r1
 8006e44:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d101      	bne.n	8006e54 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006e50:	2303      	movs	r3, #3
 8006e52:	e014      	b.n	8006e7e <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	2b03      	cmp	r3, #3
 8006e5e:	d10d      	bne.n	8006e7c <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e66:	6a1b      	ldr	r3, [r3, #32]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d007      	beq.n	8006e7c <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e72:	6a1b      	ldr	r3, [r3, #32]
 8006e74:	78fa      	ldrb	r2, [r7, #3]
 8006e76:	4611      	mov	r1, r2
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3708      	adds	r7, #8
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b082      	sub	sp, #8
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
 8006e8e:	460b      	mov	r3, r1
 8006e90:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d101      	bne.n	8006ea0 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e014      	b.n	8006eca <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	2b03      	cmp	r3, #3
 8006eaa:	d10d      	bne.n	8006ec8 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d007      	beq.n	8006ec8 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec0:	78fa      	ldrb	r2, [r7, #3]
 8006ec2:	4611      	mov	r1, r2
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3708      	adds	r7, #8
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b083      	sub	sp, #12
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d009      	beq.n	8006f16 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	6852      	ldr	r2, [r2, #4]
 8006f0e:	b2d2      	uxtb	r2, r2
 8006f10:	4611      	mov	r1, r2
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	4798      	blx	r3
  }

  return USBD_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3708      	adds	r7, #8
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b087      	sub	sp, #28
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	3301      	adds	r3, #1
 8006f36:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006f3e:	8a3b      	ldrh	r3, [r7, #16]
 8006f40:	021b      	lsls	r3, r3, #8
 8006f42:	b21a      	sxth	r2, r3
 8006f44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	b21b      	sxth	r3, r3
 8006f4c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006f4e:	89fb      	ldrh	r3, [r7, #14]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	371c      	adds	r7, #28
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f66:	2300      	movs	r3, #0
 8006f68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f72:	2b40      	cmp	r3, #64	; 0x40
 8006f74:	d005      	beq.n	8006f82 <USBD_StdDevReq+0x26>
 8006f76:	2b40      	cmp	r3, #64	; 0x40
 8006f78:	d853      	bhi.n	8007022 <USBD_StdDevReq+0xc6>
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00b      	beq.n	8006f96 <USBD_StdDevReq+0x3a>
 8006f7e:	2b20      	cmp	r3, #32
 8006f80:	d14f      	bne.n	8007022 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	6839      	ldr	r1, [r7, #0]
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	4798      	blx	r3
 8006f90:	4603      	mov	r3, r0
 8006f92:	73fb      	strb	r3, [r7, #15]
      break;
 8006f94:	e04a      	b.n	800702c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	785b      	ldrb	r3, [r3, #1]
 8006f9a:	2b09      	cmp	r3, #9
 8006f9c:	d83b      	bhi.n	8007016 <USBD_StdDevReq+0xba>
 8006f9e:	a201      	add	r2, pc, #4	; (adr r2, 8006fa4 <USBD_StdDevReq+0x48>)
 8006fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa4:	08006ff9 	.word	0x08006ff9
 8006fa8:	0800700d 	.word	0x0800700d
 8006fac:	08007017 	.word	0x08007017
 8006fb0:	08007003 	.word	0x08007003
 8006fb4:	08007017 	.word	0x08007017
 8006fb8:	08006fd7 	.word	0x08006fd7
 8006fbc:	08006fcd 	.word	0x08006fcd
 8006fc0:	08007017 	.word	0x08007017
 8006fc4:	08006fef 	.word	0x08006fef
 8006fc8:	08006fe1 	.word	0x08006fe1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006fcc:	6839      	ldr	r1, [r7, #0]
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 f9de 	bl	8007390 <USBD_GetDescriptor>
          break;
 8006fd4:	e024      	b.n	8007020 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006fd6:	6839      	ldr	r1, [r7, #0]
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fb6d 	bl	80076b8 <USBD_SetAddress>
          break;
 8006fde:	e01f      	b.n	8007020 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fbac 	bl	8007740 <USBD_SetConfig>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	73fb      	strb	r3, [r7, #15]
          break;
 8006fec:	e018      	b.n	8007020 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006fee:	6839      	ldr	r1, [r7, #0]
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 fc4b 	bl	800788c <USBD_GetConfig>
          break;
 8006ff6:	e013      	b.n	8007020 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006ff8:	6839      	ldr	r1, [r7, #0]
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fc7c 	bl	80078f8 <USBD_GetStatus>
          break;
 8007000:	e00e      	b.n	8007020 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007002:	6839      	ldr	r1, [r7, #0]
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 fcab 	bl	8007960 <USBD_SetFeature>
          break;
 800700a:	e009      	b.n	8007020 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800700c:	6839      	ldr	r1, [r7, #0]
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 fcba 	bl	8007988 <USBD_ClrFeature>
          break;
 8007014:	e004      	b.n	8007020 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007016:	6839      	ldr	r1, [r7, #0]
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 fd11 	bl	8007a40 <USBD_CtlError>
          break;
 800701e:	bf00      	nop
      }
      break;
 8007020:	e004      	b.n	800702c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007022:	6839      	ldr	r1, [r7, #0]
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 fd0b 	bl	8007a40 <USBD_CtlError>
      break;
 800702a:	bf00      	nop
  }

  return ret;
 800702c:	7bfb      	ldrb	r3, [r7, #15]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop

08007038 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007042:	2300      	movs	r3, #0
 8007044:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800704e:	2b40      	cmp	r3, #64	; 0x40
 8007050:	d005      	beq.n	800705e <USBD_StdItfReq+0x26>
 8007052:	2b40      	cmp	r3, #64	; 0x40
 8007054:	d82f      	bhi.n	80070b6 <USBD_StdItfReq+0x7e>
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <USBD_StdItfReq+0x26>
 800705a:	2b20      	cmp	r3, #32
 800705c:	d12b      	bne.n	80070b6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007064:	b2db      	uxtb	r3, r3
 8007066:	3b01      	subs	r3, #1
 8007068:	2b02      	cmp	r3, #2
 800706a:	d81d      	bhi.n	80070a8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	889b      	ldrh	r3, [r3, #4]
 8007070:	b2db      	uxtb	r3, r3
 8007072:	2b01      	cmp	r3, #1
 8007074:	d813      	bhi.n	800709e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	6839      	ldr	r1, [r7, #0]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	4798      	blx	r3
 8007084:	4603      	mov	r3, r0
 8007086:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	88db      	ldrh	r3, [r3, #6]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d110      	bne.n	80070b2 <USBD_StdItfReq+0x7a>
 8007090:	7bfb      	ldrb	r3, [r7, #15]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10d      	bne.n	80070b2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 fd9d 	bl	8007bd6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800709c:	e009      	b.n	80070b2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800709e:	6839      	ldr	r1, [r7, #0]
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fccd 	bl	8007a40 <USBD_CtlError>
          break;
 80070a6:	e004      	b.n	80070b2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80070a8:	6839      	ldr	r1, [r7, #0]
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fcc8 	bl	8007a40 <USBD_CtlError>
          break;
 80070b0:	e000      	b.n	80070b4 <USBD_StdItfReq+0x7c>
          break;
 80070b2:	bf00      	nop
      }
      break;
 80070b4:	e004      	b.n	80070c0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80070b6:	6839      	ldr	r1, [r7, #0]
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fcc1 	bl	8007a40 <USBD_CtlError>
      break;
 80070be:	bf00      	nop
  }

  return ret;
 80070c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b084      	sub	sp, #16
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
 80070d2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80070d4:	2300      	movs	r3, #0
 80070d6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	889b      	ldrh	r3, [r3, #4]
 80070dc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070e6:	2b40      	cmp	r3, #64	; 0x40
 80070e8:	d007      	beq.n	80070fa <USBD_StdEPReq+0x30>
 80070ea:	2b40      	cmp	r3, #64	; 0x40
 80070ec:	f200 8145 	bhi.w	800737a <USBD_StdEPReq+0x2b0>
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00c      	beq.n	800710e <USBD_StdEPReq+0x44>
 80070f4:	2b20      	cmp	r3, #32
 80070f6:	f040 8140 	bne.w	800737a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	6839      	ldr	r1, [r7, #0]
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	4798      	blx	r3
 8007108:	4603      	mov	r3, r0
 800710a:	73fb      	strb	r3, [r7, #15]
      break;
 800710c:	e13a      	b.n	8007384 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	785b      	ldrb	r3, [r3, #1]
 8007112:	2b03      	cmp	r3, #3
 8007114:	d007      	beq.n	8007126 <USBD_StdEPReq+0x5c>
 8007116:	2b03      	cmp	r3, #3
 8007118:	f300 8129 	bgt.w	800736e <USBD_StdEPReq+0x2a4>
 800711c:	2b00      	cmp	r3, #0
 800711e:	d07f      	beq.n	8007220 <USBD_StdEPReq+0x156>
 8007120:	2b01      	cmp	r3, #1
 8007122:	d03c      	beq.n	800719e <USBD_StdEPReq+0xd4>
 8007124:	e123      	b.n	800736e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800712c:	b2db      	uxtb	r3, r3
 800712e:	2b02      	cmp	r3, #2
 8007130:	d002      	beq.n	8007138 <USBD_StdEPReq+0x6e>
 8007132:	2b03      	cmp	r3, #3
 8007134:	d016      	beq.n	8007164 <USBD_StdEPReq+0x9a>
 8007136:	e02c      	b.n	8007192 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007138:	7bbb      	ldrb	r3, [r7, #14]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00d      	beq.n	800715a <USBD_StdEPReq+0x90>
 800713e:	7bbb      	ldrb	r3, [r7, #14]
 8007140:	2b80      	cmp	r3, #128	; 0x80
 8007142:	d00a      	beq.n	800715a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007144:	7bbb      	ldrb	r3, [r7, #14]
 8007146:	4619      	mov	r1, r3
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f001 f925 	bl	8008398 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800714e:	2180      	movs	r1, #128	; 0x80
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f001 f921 	bl	8008398 <USBD_LL_StallEP>
 8007156:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007158:	e020      	b.n	800719c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800715a:	6839      	ldr	r1, [r7, #0]
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fc6f 	bl	8007a40 <USBD_CtlError>
              break;
 8007162:	e01b      	b.n	800719c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	885b      	ldrh	r3, [r3, #2]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10e      	bne.n	800718a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800716c:	7bbb      	ldrb	r3, [r7, #14]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00b      	beq.n	800718a <USBD_StdEPReq+0xc0>
 8007172:	7bbb      	ldrb	r3, [r7, #14]
 8007174:	2b80      	cmp	r3, #128	; 0x80
 8007176:	d008      	beq.n	800718a <USBD_StdEPReq+0xc0>
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	88db      	ldrh	r3, [r3, #6]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d104      	bne.n	800718a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007180:	7bbb      	ldrb	r3, [r7, #14]
 8007182:	4619      	mov	r1, r3
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f001 f907 	bl	8008398 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fd23 	bl	8007bd6 <USBD_CtlSendStatus>

              break;
 8007190:	e004      	b.n	800719c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007192:	6839      	ldr	r1, [r7, #0]
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 fc53 	bl	8007a40 <USBD_CtlError>
              break;
 800719a:	bf00      	nop
          }
          break;
 800719c:	e0ec      	b.n	8007378 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d002      	beq.n	80071b0 <USBD_StdEPReq+0xe6>
 80071aa:	2b03      	cmp	r3, #3
 80071ac:	d016      	beq.n	80071dc <USBD_StdEPReq+0x112>
 80071ae:	e030      	b.n	8007212 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071b0:	7bbb      	ldrb	r3, [r7, #14]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00d      	beq.n	80071d2 <USBD_StdEPReq+0x108>
 80071b6:	7bbb      	ldrb	r3, [r7, #14]
 80071b8:	2b80      	cmp	r3, #128	; 0x80
 80071ba:	d00a      	beq.n	80071d2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80071bc:	7bbb      	ldrb	r3, [r7, #14]
 80071be:	4619      	mov	r1, r3
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f001 f8e9 	bl	8008398 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80071c6:	2180      	movs	r1, #128	; 0x80
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f001 f8e5 	bl	8008398 <USBD_LL_StallEP>
 80071ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071d0:	e025      	b.n	800721e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80071d2:	6839      	ldr	r1, [r7, #0]
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fc33 	bl	8007a40 <USBD_CtlError>
              break;
 80071da:	e020      	b.n	800721e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	885b      	ldrh	r3, [r3, #2]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d11b      	bne.n	800721c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80071e4:	7bbb      	ldrb	r3, [r7, #14]
 80071e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d004      	beq.n	80071f8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80071ee:	7bbb      	ldrb	r3, [r7, #14]
 80071f0:	4619      	mov	r1, r3
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f001 f8ef 	bl	80083d6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 fcec 	bl	8007bd6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	6839      	ldr	r1, [r7, #0]
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	4798      	blx	r3
 800720c:	4603      	mov	r3, r0
 800720e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007210:	e004      	b.n	800721c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007212:	6839      	ldr	r1, [r7, #0]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fc13 	bl	8007a40 <USBD_CtlError>
              break;
 800721a:	e000      	b.n	800721e <USBD_StdEPReq+0x154>
              break;
 800721c:	bf00      	nop
          }
          break;
 800721e:	e0ab      	b.n	8007378 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b02      	cmp	r3, #2
 800722a:	d002      	beq.n	8007232 <USBD_StdEPReq+0x168>
 800722c:	2b03      	cmp	r3, #3
 800722e:	d032      	beq.n	8007296 <USBD_StdEPReq+0x1cc>
 8007230:	e097      	b.n	8007362 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007232:	7bbb      	ldrb	r3, [r7, #14]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d007      	beq.n	8007248 <USBD_StdEPReq+0x17e>
 8007238:	7bbb      	ldrb	r3, [r7, #14]
 800723a:	2b80      	cmp	r3, #128	; 0x80
 800723c:	d004      	beq.n	8007248 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fbfd 	bl	8007a40 <USBD_CtlError>
                break;
 8007246:	e091      	b.n	800736c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007248:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800724c:	2b00      	cmp	r3, #0
 800724e:	da0b      	bge.n	8007268 <USBD_StdEPReq+0x19e>
 8007250:	7bbb      	ldrb	r3, [r7, #14]
 8007252:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007256:	4613      	mov	r3, r2
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	4413      	add	r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	3310      	adds	r3, #16
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	4413      	add	r3, r2
 8007264:	3304      	adds	r3, #4
 8007266:	e00b      	b.n	8007280 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007268:	7bbb      	ldrb	r3, [r7, #14]
 800726a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800726e:	4613      	mov	r3, r2
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	4413      	add	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	4413      	add	r3, r2
 800727e:	3304      	adds	r3, #4
 8007280:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	2200      	movs	r2, #0
 8007286:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	2202      	movs	r2, #2
 800728c:	4619      	mov	r1, r3
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fc47 	bl	8007b22 <USBD_CtlSendData>
              break;
 8007294:	e06a      	b.n	800736c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007296:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800729a:	2b00      	cmp	r3, #0
 800729c:	da11      	bge.n	80072c2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800729e:	7bbb      	ldrb	r3, [r7, #14]
 80072a0:	f003 020f 	and.w	r2, r3, #15
 80072a4:	6879      	ldr	r1, [r7, #4]
 80072a6:	4613      	mov	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4413      	add	r3, r2
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	440b      	add	r3, r1
 80072b0:	3324      	adds	r3, #36	; 0x24
 80072b2:	881b      	ldrh	r3, [r3, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d117      	bne.n	80072e8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80072b8:	6839      	ldr	r1, [r7, #0]
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fbc0 	bl	8007a40 <USBD_CtlError>
                  break;
 80072c0:	e054      	b.n	800736c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80072c2:	7bbb      	ldrb	r3, [r7, #14]
 80072c4:	f003 020f 	and.w	r2, r3, #15
 80072c8:	6879      	ldr	r1, [r7, #4]
 80072ca:	4613      	mov	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4413      	add	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	440b      	add	r3, r1
 80072d4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80072d8:	881b      	ldrh	r3, [r3, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d104      	bne.n	80072e8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80072de:	6839      	ldr	r1, [r7, #0]
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 fbad 	bl	8007a40 <USBD_CtlError>
                  break;
 80072e6:	e041      	b.n	800736c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	da0b      	bge.n	8007308 <USBD_StdEPReq+0x23e>
 80072f0:	7bbb      	ldrb	r3, [r7, #14]
 80072f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072f6:	4613      	mov	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4413      	add	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	3310      	adds	r3, #16
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	4413      	add	r3, r2
 8007304:	3304      	adds	r3, #4
 8007306:	e00b      	b.n	8007320 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007308:	7bbb      	ldrb	r3, [r7, #14]
 800730a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800730e:	4613      	mov	r3, r2
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4413      	add	r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	4413      	add	r3, r2
 800731e:	3304      	adds	r3, #4
 8007320:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007322:	7bbb      	ldrb	r3, [r7, #14]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d002      	beq.n	800732e <USBD_StdEPReq+0x264>
 8007328:	7bbb      	ldrb	r3, [r7, #14]
 800732a:	2b80      	cmp	r3, #128	; 0x80
 800732c:	d103      	bne.n	8007336 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	2200      	movs	r2, #0
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	e00e      	b.n	8007354 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007336:	7bbb      	ldrb	r3, [r7, #14]
 8007338:	4619      	mov	r1, r3
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f001 f86a 	bl	8008414 <USBD_LL_IsStallEP>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d003      	beq.n	800734e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	2201      	movs	r2, #1
 800734a:	601a      	str	r2, [r3, #0]
 800734c:	e002      	b.n	8007354 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	2200      	movs	r2, #0
 8007352:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	2202      	movs	r2, #2
 8007358:	4619      	mov	r1, r3
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fbe1 	bl	8007b22 <USBD_CtlSendData>
              break;
 8007360:	e004      	b.n	800736c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007362:	6839      	ldr	r1, [r7, #0]
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 fb6b 	bl	8007a40 <USBD_CtlError>
              break;
 800736a:	bf00      	nop
          }
          break;
 800736c:	e004      	b.n	8007378 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800736e:	6839      	ldr	r1, [r7, #0]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 fb65 	bl	8007a40 <USBD_CtlError>
          break;
 8007376:	bf00      	nop
      }
      break;
 8007378:	e004      	b.n	8007384 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800737a:	6839      	ldr	r1, [r7, #0]
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fb5f 	bl	8007a40 <USBD_CtlError>
      break;
 8007382:	bf00      	nop
  }

  return ret;
 8007384:	7bfb      	ldrb	r3, [r7, #15]
}
 8007386:	4618      	mov	r0, r3
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
	...

08007390 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800739a:	2300      	movs	r3, #0
 800739c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800739e:	2300      	movs	r3, #0
 80073a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80073a2:	2300      	movs	r3, #0
 80073a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	885b      	ldrh	r3, [r3, #2]
 80073aa:	0a1b      	lsrs	r3, r3, #8
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	3b01      	subs	r3, #1
 80073b0:	2b0e      	cmp	r3, #14
 80073b2:	f200 8152 	bhi.w	800765a <USBD_GetDescriptor+0x2ca>
 80073b6:	a201      	add	r2, pc, #4	; (adr r2, 80073bc <USBD_GetDescriptor+0x2c>)
 80073b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073bc:	0800742d 	.word	0x0800742d
 80073c0:	08007445 	.word	0x08007445
 80073c4:	08007485 	.word	0x08007485
 80073c8:	0800765b 	.word	0x0800765b
 80073cc:	0800765b 	.word	0x0800765b
 80073d0:	080075fb 	.word	0x080075fb
 80073d4:	08007627 	.word	0x08007627
 80073d8:	0800765b 	.word	0x0800765b
 80073dc:	0800765b 	.word	0x0800765b
 80073e0:	0800765b 	.word	0x0800765b
 80073e4:	0800765b 	.word	0x0800765b
 80073e8:	0800765b 	.word	0x0800765b
 80073ec:	0800765b 	.word	0x0800765b
 80073f0:	0800765b 	.word	0x0800765b
 80073f4:	080073f9 	.word	0x080073f9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073fe:	69db      	ldr	r3, [r3, #28]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00b      	beq.n	800741c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800740a:	69db      	ldr	r3, [r3, #28]
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	7c12      	ldrb	r2, [r2, #16]
 8007410:	f107 0108 	add.w	r1, r7, #8
 8007414:	4610      	mov	r0, r2
 8007416:	4798      	blx	r3
 8007418:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800741a:	e126      	b.n	800766a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fb0e 	bl	8007a40 <USBD_CtlError>
        err++;
 8007424:	7afb      	ldrb	r3, [r7, #11]
 8007426:	3301      	adds	r3, #1
 8007428:	72fb      	strb	r3, [r7, #11]
      break;
 800742a:	e11e      	b.n	800766a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	7c12      	ldrb	r2, [r2, #16]
 8007438:	f107 0108 	add.w	r1, r7, #8
 800743c:	4610      	mov	r0, r2
 800743e:	4798      	blx	r3
 8007440:	60f8      	str	r0, [r7, #12]
      break;
 8007442:	e112      	b.n	800766a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	7c1b      	ldrb	r3, [r3, #16]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10d      	bne.n	8007468 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007454:	f107 0208 	add.w	r2, r7, #8
 8007458:	4610      	mov	r0, r2
 800745a:	4798      	blx	r3
 800745c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	3301      	adds	r3, #1
 8007462:	2202      	movs	r2, #2
 8007464:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007466:	e100      	b.n	800766a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800746e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007470:	f107 0208 	add.w	r2, r7, #8
 8007474:	4610      	mov	r0, r2
 8007476:	4798      	blx	r3
 8007478:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	3301      	adds	r3, #1
 800747e:	2202      	movs	r2, #2
 8007480:	701a      	strb	r2, [r3, #0]
      break;
 8007482:	e0f2      	b.n	800766a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	885b      	ldrh	r3, [r3, #2]
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2b05      	cmp	r3, #5
 800748c:	f200 80ac 	bhi.w	80075e8 <USBD_GetDescriptor+0x258>
 8007490:	a201      	add	r2, pc, #4	; (adr r2, 8007498 <USBD_GetDescriptor+0x108>)
 8007492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007496:	bf00      	nop
 8007498:	080074b1 	.word	0x080074b1
 800749c:	080074e5 	.word	0x080074e5
 80074a0:	08007519 	.word	0x08007519
 80074a4:	0800754d 	.word	0x0800754d
 80074a8:	08007581 	.word	0x08007581
 80074ac:	080075b5 	.word	0x080075b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00b      	beq.n	80074d4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	7c12      	ldrb	r2, [r2, #16]
 80074c8:	f107 0108 	add.w	r1, r7, #8
 80074cc:	4610      	mov	r0, r2
 80074ce:	4798      	blx	r3
 80074d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074d2:	e091      	b.n	80075f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80074d4:	6839      	ldr	r1, [r7, #0]
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fab2 	bl	8007a40 <USBD_CtlError>
            err++;
 80074dc:	7afb      	ldrb	r3, [r7, #11]
 80074de:	3301      	adds	r3, #1
 80074e0:	72fb      	strb	r3, [r7, #11]
          break;
 80074e2:	e089      	b.n	80075f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00b      	beq.n	8007508 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	7c12      	ldrb	r2, [r2, #16]
 80074fc:	f107 0108 	add.w	r1, r7, #8
 8007500:	4610      	mov	r0, r2
 8007502:	4798      	blx	r3
 8007504:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007506:	e077      	b.n	80075f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007508:	6839      	ldr	r1, [r7, #0]
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fa98 	bl	8007a40 <USBD_CtlError>
            err++;
 8007510:	7afb      	ldrb	r3, [r7, #11]
 8007512:	3301      	adds	r3, #1
 8007514:	72fb      	strb	r3, [r7, #11]
          break;
 8007516:	e06f      	b.n	80075f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00b      	beq.n	800753c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	7c12      	ldrb	r2, [r2, #16]
 8007530:	f107 0108 	add.w	r1, r7, #8
 8007534:	4610      	mov	r0, r2
 8007536:	4798      	blx	r3
 8007538:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800753a:	e05d      	b.n	80075f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800753c:	6839      	ldr	r1, [r7, #0]
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 fa7e 	bl	8007a40 <USBD_CtlError>
            err++;
 8007544:	7afb      	ldrb	r3, [r7, #11]
 8007546:	3301      	adds	r3, #1
 8007548:	72fb      	strb	r3, [r7, #11]
          break;
 800754a:	e055      	b.n	80075f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00b      	beq.n	8007570 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	7c12      	ldrb	r2, [r2, #16]
 8007564:	f107 0108 	add.w	r1, r7, #8
 8007568:	4610      	mov	r0, r2
 800756a:	4798      	blx	r3
 800756c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800756e:	e043      	b.n	80075f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007570:	6839      	ldr	r1, [r7, #0]
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 fa64 	bl	8007a40 <USBD_CtlError>
            err++;
 8007578:	7afb      	ldrb	r3, [r7, #11]
 800757a:	3301      	adds	r3, #1
 800757c:	72fb      	strb	r3, [r7, #11]
          break;
 800757e:	e03b      	b.n	80075f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007586:	695b      	ldr	r3, [r3, #20]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00b      	beq.n	80075a4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007592:	695b      	ldr	r3, [r3, #20]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	7c12      	ldrb	r2, [r2, #16]
 8007598:	f107 0108 	add.w	r1, r7, #8
 800759c:	4610      	mov	r0, r2
 800759e:	4798      	blx	r3
 80075a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075a2:	e029      	b.n	80075f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80075a4:	6839      	ldr	r1, [r7, #0]
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fa4a 	bl	8007a40 <USBD_CtlError>
            err++;
 80075ac:	7afb      	ldrb	r3, [r7, #11]
 80075ae:	3301      	adds	r3, #1
 80075b0:	72fb      	strb	r3, [r7, #11]
          break;
 80075b2:	e021      	b.n	80075f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00b      	beq.n	80075d8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075c6:	699b      	ldr	r3, [r3, #24]
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	7c12      	ldrb	r2, [r2, #16]
 80075cc:	f107 0108 	add.w	r1, r7, #8
 80075d0:	4610      	mov	r0, r2
 80075d2:	4798      	blx	r3
 80075d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075d6:	e00f      	b.n	80075f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fa30 	bl	8007a40 <USBD_CtlError>
            err++;
 80075e0:	7afb      	ldrb	r3, [r7, #11]
 80075e2:	3301      	adds	r3, #1
 80075e4:	72fb      	strb	r3, [r7, #11]
          break;
 80075e6:	e007      	b.n	80075f8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80075e8:	6839      	ldr	r1, [r7, #0]
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 fa28 	bl	8007a40 <USBD_CtlError>
          err++;
 80075f0:	7afb      	ldrb	r3, [r7, #11]
 80075f2:	3301      	adds	r3, #1
 80075f4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80075f6:	bf00      	nop
      }
      break;
 80075f8:	e037      	b.n	800766a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	7c1b      	ldrb	r3, [r3, #16]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d109      	bne.n	8007616 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800760a:	f107 0208 	add.w	r2, r7, #8
 800760e:	4610      	mov	r0, r2
 8007610:	4798      	blx	r3
 8007612:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007614:	e029      	b.n	800766a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007616:	6839      	ldr	r1, [r7, #0]
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 fa11 	bl	8007a40 <USBD_CtlError>
        err++;
 800761e:	7afb      	ldrb	r3, [r7, #11]
 8007620:	3301      	adds	r3, #1
 8007622:	72fb      	strb	r3, [r7, #11]
      break;
 8007624:	e021      	b.n	800766a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	7c1b      	ldrb	r3, [r3, #16]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d10d      	bne.n	800764a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007636:	f107 0208 	add.w	r2, r7, #8
 800763a:	4610      	mov	r0, r2
 800763c:	4798      	blx	r3
 800763e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	3301      	adds	r3, #1
 8007644:	2207      	movs	r2, #7
 8007646:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007648:	e00f      	b.n	800766a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800764a:	6839      	ldr	r1, [r7, #0]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 f9f7 	bl	8007a40 <USBD_CtlError>
        err++;
 8007652:	7afb      	ldrb	r3, [r7, #11]
 8007654:	3301      	adds	r3, #1
 8007656:	72fb      	strb	r3, [r7, #11]
      break;
 8007658:	e007      	b.n	800766a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800765a:	6839      	ldr	r1, [r7, #0]
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 f9ef 	bl	8007a40 <USBD_CtlError>
      err++;
 8007662:	7afb      	ldrb	r3, [r7, #11]
 8007664:	3301      	adds	r3, #1
 8007666:	72fb      	strb	r3, [r7, #11]
      break;
 8007668:	bf00      	nop
  }

  if (err != 0U)
 800766a:	7afb      	ldrb	r3, [r7, #11]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d11e      	bne.n	80076ae <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	88db      	ldrh	r3, [r3, #6]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d016      	beq.n	80076a6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007678:	893b      	ldrh	r3, [r7, #8]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00e      	beq.n	800769c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	88da      	ldrh	r2, [r3, #6]
 8007682:	893b      	ldrh	r3, [r7, #8]
 8007684:	4293      	cmp	r3, r2
 8007686:	bf28      	it	cs
 8007688:	4613      	movcs	r3, r2
 800768a:	b29b      	uxth	r3, r3
 800768c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800768e:	893b      	ldrh	r3, [r7, #8]
 8007690:	461a      	mov	r2, r3
 8007692:	68f9      	ldr	r1, [r7, #12]
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 fa44 	bl	8007b22 <USBD_CtlSendData>
 800769a:	e009      	b.n	80076b0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800769c:	6839      	ldr	r1, [r7, #0]
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f9ce 	bl	8007a40 <USBD_CtlError>
 80076a4:	e004      	b.n	80076b0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 fa95 	bl	8007bd6 <USBD_CtlSendStatus>
 80076ac:	e000      	b.n	80076b0 <USBD_GetDescriptor+0x320>
    return;
 80076ae:	bf00      	nop
  }
}
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop

080076b8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	889b      	ldrh	r3, [r3, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d131      	bne.n	800772e <USBD_SetAddress+0x76>
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	88db      	ldrh	r3, [r3, #6]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d12d      	bne.n	800772e <USBD_SetAddress+0x76>
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	885b      	ldrh	r3, [r3, #2]
 80076d6:	2b7f      	cmp	r3, #127	; 0x7f
 80076d8:	d829      	bhi.n	800772e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	885b      	ldrh	r3, [r3, #2]
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2b03      	cmp	r3, #3
 80076f0:	d104      	bne.n	80076fc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80076f2:	6839      	ldr	r1, [r7, #0]
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 f9a3 	bl	8007a40 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076fa:	e01d      	b.n	8007738 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	7bfa      	ldrb	r2, [r7, #15]
 8007700:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007704:	7bfb      	ldrb	r3, [r7, #15]
 8007706:	4619      	mov	r1, r3
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 feaf 	bl	800846c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fa61 	bl	8007bd6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007714:	7bfb      	ldrb	r3, [r7, #15]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d004      	beq.n	8007724 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2202      	movs	r2, #2
 800771e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007722:	e009      	b.n	8007738 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800772c:	e004      	b.n	8007738 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800772e:	6839      	ldr	r1, [r7, #0]
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 f985 	bl	8007a40 <USBD_CtlError>
  }
}
 8007736:	bf00      	nop
 8007738:	bf00      	nop
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800774a:	2300      	movs	r3, #0
 800774c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	885b      	ldrh	r3, [r3, #2]
 8007752:	b2da      	uxtb	r2, r3
 8007754:	4b4c      	ldr	r3, [pc, #304]	; (8007888 <USBD_SetConfig+0x148>)
 8007756:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007758:	4b4b      	ldr	r3, [pc, #300]	; (8007888 <USBD_SetConfig+0x148>)
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d905      	bls.n	800776c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007760:	6839      	ldr	r1, [r7, #0]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f96c 	bl	8007a40 <USBD_CtlError>
    return USBD_FAIL;
 8007768:	2303      	movs	r3, #3
 800776a:	e088      	b.n	800787e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007772:	b2db      	uxtb	r3, r3
 8007774:	2b02      	cmp	r3, #2
 8007776:	d002      	beq.n	800777e <USBD_SetConfig+0x3e>
 8007778:	2b03      	cmp	r3, #3
 800777a:	d025      	beq.n	80077c8 <USBD_SetConfig+0x88>
 800777c:	e071      	b.n	8007862 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800777e:	4b42      	ldr	r3, [pc, #264]	; (8007888 <USBD_SetConfig+0x148>)
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d01c      	beq.n	80077c0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007786:	4b40      	ldr	r3, [pc, #256]	; (8007888 <USBD_SetConfig+0x148>)
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	461a      	mov	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007790:	4b3d      	ldr	r3, [pc, #244]	; (8007888 <USBD_SetConfig+0x148>)
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	4619      	mov	r1, r3
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f7ff f91f 	bl	80069da <USBD_SetClassConfig>
 800779c:	4603      	mov	r3, r0
 800779e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80077a0:	7bfb      	ldrb	r3, [r7, #15]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d004      	beq.n	80077b0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80077a6:	6839      	ldr	r1, [r7, #0]
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 f949 	bl	8007a40 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80077ae:	e065      	b.n	800787c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 fa10 	bl	8007bd6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2203      	movs	r2, #3
 80077ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80077be:	e05d      	b.n	800787c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 fa08 	bl	8007bd6 <USBD_CtlSendStatus>
      break;
 80077c6:	e059      	b.n	800787c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80077c8:	4b2f      	ldr	r3, [pc, #188]	; (8007888 <USBD_SetConfig+0x148>)
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d112      	bne.n	80077f6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2202      	movs	r2, #2
 80077d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80077d8:	4b2b      	ldr	r3, [pc, #172]	; (8007888 <USBD_SetConfig+0x148>)
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	461a      	mov	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80077e2:	4b29      	ldr	r3, [pc, #164]	; (8007888 <USBD_SetConfig+0x148>)
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	4619      	mov	r1, r3
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7ff f912 	bl	8006a12 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f9f1 	bl	8007bd6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80077f4:	e042      	b.n	800787c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80077f6:	4b24      	ldr	r3, [pc, #144]	; (8007888 <USBD_SetConfig+0x148>)
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	461a      	mov	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	429a      	cmp	r2, r3
 8007802:	d02a      	beq.n	800785a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	b2db      	uxtb	r3, r3
 800780a:	4619      	mov	r1, r3
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f7ff f900 	bl	8006a12 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007812:	4b1d      	ldr	r3, [pc, #116]	; (8007888 <USBD_SetConfig+0x148>)
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	461a      	mov	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800781c:	4b1a      	ldr	r3, [pc, #104]	; (8007888 <USBD_SetConfig+0x148>)
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	4619      	mov	r1, r3
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f7ff f8d9 	bl	80069da <USBD_SetClassConfig>
 8007828:	4603      	mov	r3, r0
 800782a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800782c:	7bfb      	ldrb	r3, [r7, #15]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00f      	beq.n	8007852 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007832:	6839      	ldr	r1, [r7, #0]
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 f903 	bl	8007a40 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	b2db      	uxtb	r3, r3
 8007840:	4619      	mov	r1, r3
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7ff f8e5 	bl	8006a12 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2202      	movs	r2, #2
 800784c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007850:	e014      	b.n	800787c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f9bf 	bl	8007bd6 <USBD_CtlSendStatus>
      break;
 8007858:	e010      	b.n	800787c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 f9bb 	bl	8007bd6 <USBD_CtlSendStatus>
      break;
 8007860:	e00c      	b.n	800787c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007862:	6839      	ldr	r1, [r7, #0]
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 f8eb 	bl	8007a40 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800786a:	4b07      	ldr	r3, [pc, #28]	; (8007888 <USBD_SetConfig+0x148>)
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	4619      	mov	r1, r3
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f7ff f8ce 	bl	8006a12 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007876:	2303      	movs	r3, #3
 8007878:	73fb      	strb	r3, [r7, #15]
      break;
 800787a:	bf00      	nop
  }

  return ret;
 800787c:	7bfb      	ldrb	r3, [r7, #15]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	2000015c 	.word	0x2000015c

0800788c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	88db      	ldrh	r3, [r3, #6]
 800789a:	2b01      	cmp	r3, #1
 800789c:	d004      	beq.n	80078a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f8cd 	bl	8007a40 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80078a6:	e023      	b.n	80078f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	dc02      	bgt.n	80078ba <USBD_GetConfig+0x2e>
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	dc03      	bgt.n	80078c0 <USBD_GetConfig+0x34>
 80078b8:	e015      	b.n	80078e6 <USBD_GetConfig+0x5a>
 80078ba:	2b03      	cmp	r3, #3
 80078bc:	d00b      	beq.n	80078d6 <USBD_GetConfig+0x4a>
 80078be:	e012      	b.n	80078e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	3308      	adds	r3, #8
 80078ca:	2201      	movs	r2, #1
 80078cc:	4619      	mov	r1, r3
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 f927 	bl	8007b22 <USBD_CtlSendData>
        break;
 80078d4:	e00c      	b.n	80078f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	3304      	adds	r3, #4
 80078da:	2201      	movs	r2, #1
 80078dc:	4619      	mov	r1, r3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f91f 	bl	8007b22 <USBD_CtlSendData>
        break;
 80078e4:	e004      	b.n	80078f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f8a9 	bl	8007a40 <USBD_CtlError>
        break;
 80078ee:	bf00      	nop
}
 80078f0:	bf00      	nop
 80078f2:	3708      	adds	r7, #8
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007908:	b2db      	uxtb	r3, r3
 800790a:	3b01      	subs	r3, #1
 800790c:	2b02      	cmp	r3, #2
 800790e:	d81e      	bhi.n	800794e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	88db      	ldrh	r3, [r3, #6]
 8007914:	2b02      	cmp	r3, #2
 8007916:	d004      	beq.n	8007922 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007918:	6839      	ldr	r1, [r7, #0]
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f890 	bl	8007a40 <USBD_CtlError>
        break;
 8007920:	e01a      	b.n	8007958 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800792e:	2b00      	cmp	r3, #0
 8007930:	d005      	beq.n	800793e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	f043 0202 	orr.w	r2, r3, #2
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	330c      	adds	r3, #12
 8007942:	2202      	movs	r2, #2
 8007944:	4619      	mov	r1, r3
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f8eb 	bl	8007b22 <USBD_CtlSendData>
      break;
 800794c:	e004      	b.n	8007958 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800794e:	6839      	ldr	r1, [r7, #0]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 f875 	bl	8007a40 <USBD_CtlError>
      break;
 8007956:	bf00      	nop
  }
}
 8007958:	bf00      	nop
 800795a:	3708      	adds	r7, #8
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	885b      	ldrh	r3, [r3, #2]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d106      	bne.n	8007980 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f92b 	bl	8007bd6 <USBD_CtlSendStatus>
  }
}
 8007980:	bf00      	nop
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007998:	b2db      	uxtb	r3, r3
 800799a:	3b01      	subs	r3, #1
 800799c:	2b02      	cmp	r3, #2
 800799e:	d80b      	bhi.n	80079b8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	885b      	ldrh	r3, [r3, #2]
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d10c      	bne.n	80079c2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 f910 	bl	8007bd6 <USBD_CtlSendStatus>
      }
      break;
 80079b6:	e004      	b.n	80079c2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80079b8:	6839      	ldr	r1, [r7, #0]
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f840 	bl	8007a40 <USBD_CtlError>
      break;
 80079c0:	e000      	b.n	80079c4 <USBD_ClrFeature+0x3c>
      break;
 80079c2:	bf00      	nop
  }
}
 80079c4:	bf00      	nop
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	781a      	ldrb	r2, [r3, #0]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	3301      	adds	r3, #1
 80079e6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	781a      	ldrb	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	3301      	adds	r3, #1
 80079f4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f7ff fa92 	bl	8006f20 <SWAPBYTE>
 80079fc:	4603      	mov	r3, r0
 80079fe:	461a      	mov	r2, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	3301      	adds	r3, #1
 8007a08:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f7ff fa85 	bl	8006f20 <SWAPBYTE>
 8007a16:	4603      	mov	r3, r0
 8007a18:	461a      	mov	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	3301      	adds	r3, #1
 8007a22:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	3301      	adds	r3, #1
 8007a28:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007a2a:	68f8      	ldr	r0, [r7, #12]
 8007a2c:	f7ff fa78 	bl	8006f20 <SWAPBYTE>
 8007a30:	4603      	mov	r3, r0
 8007a32:	461a      	mov	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	80da      	strh	r2, [r3, #6]
}
 8007a38:	bf00      	nop
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a4a:	2180      	movs	r1, #128	; 0x80
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fca3 	bl	8008398 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007a52:	2100      	movs	r1, #0
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 fc9f 	bl	8008398 <USBD_LL_StallEP>
}
 8007a5a:	bf00      	nop
 8007a5c:	3708      	adds	r7, #8
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b086      	sub	sp, #24
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	60f8      	str	r0, [r7, #12]
 8007a6a:	60b9      	str	r1, [r7, #8]
 8007a6c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d036      	beq.n	8007ae6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007a7c:	6938      	ldr	r0, [r7, #16]
 8007a7e:	f000 f836 	bl	8007aee <USBD_GetLen>
 8007a82:	4603      	mov	r3, r0
 8007a84:	3301      	adds	r3, #1
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	005b      	lsls	r3, r3, #1
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007a90:	7dfb      	ldrb	r3, [r7, #23]
 8007a92:	68ba      	ldr	r2, [r7, #8]
 8007a94:	4413      	add	r3, r2
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	7812      	ldrb	r2, [r2, #0]
 8007a9a:	701a      	strb	r2, [r3, #0]
  idx++;
 8007a9c:	7dfb      	ldrb	r3, [r7, #23]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007aa2:	7dfb      	ldrb	r3, [r7, #23]
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	2203      	movs	r2, #3
 8007aaa:	701a      	strb	r2, [r3, #0]
  idx++;
 8007aac:	7dfb      	ldrb	r3, [r7, #23]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007ab2:	e013      	b.n	8007adc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007ab4:	7dfb      	ldrb	r3, [r7, #23]
 8007ab6:	68ba      	ldr	r2, [r7, #8]
 8007ab8:	4413      	add	r3, r2
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	7812      	ldrb	r2, [r2, #0]
 8007abe:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	613b      	str	r3, [r7, #16]
    idx++;
 8007ac6:	7dfb      	ldrb	r3, [r7, #23]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007acc:	7dfb      	ldrb	r3, [r7, #23]
 8007ace:	68ba      	ldr	r2, [r7, #8]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	701a      	strb	r2, [r3, #0]
    idx++;
 8007ad6:	7dfb      	ldrb	r3, [r7, #23]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1e7      	bne.n	8007ab4 <USBD_GetString+0x52>
 8007ae4:	e000      	b.n	8007ae8 <USBD_GetString+0x86>
    return;
 8007ae6:	bf00      	nop
  }
}
 8007ae8:	3718      	adds	r7, #24
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007aee:	b480      	push	{r7}
 8007af0:	b085      	sub	sp, #20
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007af6:	2300      	movs	r3, #0
 8007af8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007afe:	e005      	b.n	8007b0c <USBD_GetLen+0x1e>
  {
    len++;
 8007b00:	7bfb      	ldrb	r3, [r7, #15]
 8007b02:	3301      	adds	r3, #1
 8007b04:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1f5      	bne.n	8007b00 <USBD_GetLen+0x12>
  }

  return len;
 8007b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3714      	adds	r7, #20
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr

08007b22 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b084      	sub	sp, #16
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	60f8      	str	r0, [r7, #12]
 8007b2a:	60b9      	str	r1, [r7, #8]
 8007b2c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2202      	movs	r2, #2
 8007b32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	2100      	movs	r1, #0
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f000 fcae 	bl	80084aa <USBD_LL_Transmit>

  return USBD_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	68ba      	ldr	r2, [r7, #8]
 8007b68:	2100      	movs	r1, #0
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f000 fc9d 	bl	80084aa <USBD_LL_Transmit>

  return USBD_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b084      	sub	sp, #16
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	60f8      	str	r0, [r7, #12]
 8007b82:	60b9      	str	r1, [r7, #8]
 8007b84:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2203      	movs	r2, #3
 8007b8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	68ba      	ldr	r2, [r7, #8]
 8007ba2:	2100      	movs	r1, #0
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f000 fca1 	bl	80084ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f000 fc90 	bl	80084ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b082      	sub	sp, #8
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2204      	movs	r2, #4
 8007be2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007be6:	2300      	movs	r3, #0
 8007be8:	2200      	movs	r2, #0
 8007bea:	2100      	movs	r1, #0
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fc5c 	bl	80084aa <USBD_LL_Transmit>

  return USBD_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2205      	movs	r2, #5
 8007c08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	2200      	movs	r2, #0
 8007c10:	2100      	movs	r1, #0
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 fc6a 	bl	80084ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
	...

08007c24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007c28:	2200      	movs	r2, #0
 8007c2a:	4912      	ldr	r1, [pc, #72]	; (8007c74 <MX_USB_DEVICE_Init+0x50>)
 8007c2c:	4812      	ldr	r0, [pc, #72]	; (8007c78 <MX_USB_DEVICE_Init+0x54>)
 8007c2e:	f7fe fe66 	bl	80068fe <USBD_Init>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d001      	beq.n	8007c3c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007c38:	f7f8 fdc4 	bl	80007c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 8007c3c:	490f      	ldr	r1, [pc, #60]	; (8007c7c <MX_USB_DEVICE_Init+0x58>)
 8007c3e:	480e      	ldr	r0, [pc, #56]	; (8007c78 <MX_USB_DEVICE_Init+0x54>)
 8007c40:	f7fe fe8d 	bl	800695e <USBD_RegisterClass>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d001      	beq.n	8007c4e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007c4a:	f7f8 fdbb 	bl	80007c4 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 8007c4e:	490c      	ldr	r1, [pc, #48]	; (8007c80 <MX_USB_DEVICE_Init+0x5c>)
 8007c50:	4809      	ldr	r0, [pc, #36]	; (8007c78 <MX_USB_DEVICE_Init+0x54>)
 8007c52:	f7fe fe3f 	bl	80068d4 <USBD_AUDIO_RegisterInterface>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d001      	beq.n	8007c60 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007c5c:	f7f8 fdb2 	bl	80007c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007c60:	4805      	ldr	r0, [pc, #20]	; (8007c78 <MX_USB_DEVICE_Init+0x54>)
 8007c62:	f7fe fea3 	bl	80069ac <USBD_Start>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d001      	beq.n	8007c70 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007c6c:	f7f8 fdaa 	bl	80007c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007c70:	bf00      	nop
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	200000dc 	.word	0x200000dc
 8007c78:	20003ea0 	.word	0x20003ea0
 8007c7c:	2000000c 	.word	0x2000000c
 8007c80:	200000c0 	.word	0x200000c0

08007c84 <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 8007c90:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3714      	adds	r7, #20
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b083      	sub	sp, #12
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  return (USBD_OK);
 8007ca6:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 8007cc2:	79fb      	ldrb	r3, [r7, #7]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d002      	beq.n	8007cce <AUDIO_AudioCmd_FS+0x1a>
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	d005      	beq.n	8007cd8 <AUDIO_AudioCmd_FS+0x24>
 8007ccc:	e009      	b.n	8007ce2 <AUDIO_AudioCmd_FS+0x2e>
  {
    case AUDIO_CMD_START:
    	BSP_AUDIO_OUT_Play(pbuf, size);
 8007cce:	68b9      	ldr	r1, [r7, #8]
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f7f8 fed9 	bl	8000a88 <BSP_AUDIO_OUT_Play>
    break;
 8007cd6:	e004      	b.n	8007ce2 <AUDIO_AudioCmd_FS+0x2e>
    case AUDIO_CMD_PLAY:
    	BSP_AUDIO_OUT_ChangeBuffer(pbuf, size);
 8007cd8:	68b9      	ldr	r1, [r7, #8]
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f7f8 fef0 	bl	8000ac0 <BSP_AUDIO_OUT_ChangeBuffer>
    break;
 8007ce0:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 8007ce2:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
 8007cf6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  return (USBD_OK);
 8007d0e:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	4613      	mov	r3, r2
 8007d28:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 8007d2a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3714      	adds	r7, #20
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8007d3c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <TransferComplete_CallBack_FS>:
/**
  * @brief  Manages the DMA full transfer complete event.
  * @retval None
  */
void TransferComplete_CallBack_FS(void)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 7 */
  USBD_AUDIO_Sync(&hUsbDeviceFS, AUDIO_OFFSET_FULL);
 8007d4c:	2102      	movs	r1, #2
 8007d4e:	4802      	ldr	r0, [pc, #8]	; (8007d58 <TransferComplete_CallBack_FS+0x10>)
 8007d50:	f7fe fc0a 	bl	8006568 <USBD_AUDIO_Sync>
  /* USER CODE END 7 */
}
 8007d54:	bf00      	nop
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	20003ea0 	.word	0x20003ea0

08007d5c <HalfTransfer_CallBack_FS>:
/**
  * @brief  Manages the DMA Half transfer complete event.
  * @retval None
  */
void HalfTransfer_CallBack_FS(void)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  USBD_AUDIO_Sync(&hUsbDeviceFS, AUDIO_OFFSET_HALF);
 8007d60:	2101      	movs	r1, #1
 8007d62:	4802      	ldr	r0, [pc, #8]	; (8007d6c <HalfTransfer_CallBack_FS+0x10>)
 8007d64:	f7fe fc00 	bl	8006568 <USBD_AUDIO_Sync>
  /* USER CODE END 8 */
}
 8007d68:	bf00      	nop
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	20003ea0 	.word	0x20003ea0

08007d70 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	4603      	mov	r3, r0
 8007d78:	6039      	str	r1, [r7, #0]
 8007d7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	2212      	movs	r2, #18
 8007d80:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007d82:	4b03      	ldr	r3, [pc, #12]	; (8007d90 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr
 8007d90:	200000fc 	.word	0x200000fc

08007d94 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	6039      	str	r1, [r7, #0]
 8007d9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	2204      	movs	r2, #4
 8007da4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007da6:	4b03      	ldr	r3, [pc, #12]	; (8007db4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	370c      	adds	r7, #12
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr
 8007db4:	2000011c 	.word	0x2000011c

08007db8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	6039      	str	r1, [r7, #0]
 8007dc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007dc4:	79fb      	ldrb	r3, [r7, #7]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d105      	bne.n	8007dd6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007dca:	683a      	ldr	r2, [r7, #0]
 8007dcc:	4907      	ldr	r1, [pc, #28]	; (8007dec <USBD_FS_ProductStrDescriptor+0x34>)
 8007dce:	4808      	ldr	r0, [pc, #32]	; (8007df0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007dd0:	f7ff fe47 	bl	8007a62 <USBD_GetString>
 8007dd4:	e004      	b.n	8007de0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007dd6:	683a      	ldr	r2, [r7, #0]
 8007dd8:	4904      	ldr	r1, [pc, #16]	; (8007dec <USBD_FS_ProductStrDescriptor+0x34>)
 8007dda:	4805      	ldr	r0, [pc, #20]	; (8007df0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ddc:	f7ff fe41 	bl	8007a62 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007de0:	4b02      	ldr	r3, [pc, #8]	; (8007dec <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	20004170 	.word	0x20004170
 8007df0:	080086e8 	.word	0x080086e8

08007df4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	6039      	str	r1, [r7, #0]
 8007dfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007e00:	683a      	ldr	r2, [r7, #0]
 8007e02:	4904      	ldr	r1, [pc, #16]	; (8007e14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007e04:	4804      	ldr	r0, [pc, #16]	; (8007e18 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007e06:	f7ff fe2c 	bl	8007a62 <USBD_GetString>
  return USBD_StrDesc;
 8007e0a:	4b02      	ldr	r3, [pc, #8]	; (8007e14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3708      	adds	r7, #8
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	20004170 	.word	0x20004170
 8007e18:	080086f4 	.word	0x080086f4

08007e1c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	4603      	mov	r3, r0
 8007e24:	6039      	str	r1, [r7, #0]
 8007e26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	221a      	movs	r2, #26
 8007e2c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007e2e:	f000 f855 	bl	8007edc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007e32:	4b02      	ldr	r3, [pc, #8]	; (8007e3c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3708      	adds	r7, #8
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	20000120 	.word	0x20000120

08007e40 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	4603      	mov	r3, r0
 8007e48:	6039      	str	r1, [r7, #0]
 8007e4a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007e4c:	79fb      	ldrb	r3, [r7, #7]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d105      	bne.n	8007e5e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e52:	683a      	ldr	r2, [r7, #0]
 8007e54:	4907      	ldr	r1, [pc, #28]	; (8007e74 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e56:	4808      	ldr	r0, [pc, #32]	; (8007e78 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e58:	f7ff fe03 	bl	8007a62 <USBD_GetString>
 8007e5c:	e004      	b.n	8007e68 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e5e:	683a      	ldr	r2, [r7, #0]
 8007e60:	4904      	ldr	r1, [pc, #16]	; (8007e74 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e62:	4805      	ldr	r0, [pc, #20]	; (8007e78 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e64:	f7ff fdfd 	bl	8007a62 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e68:	4b02      	ldr	r3, [pc, #8]	; (8007e74 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3708      	adds	r7, #8
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	20004170 	.word	0x20004170
 8007e78:	08008708 	.word	0x08008708

08007e7c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	4603      	mov	r3, r0
 8007e84:	6039      	str	r1, [r7, #0]
 8007e86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e88:	79fb      	ldrb	r3, [r7, #7]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d105      	bne.n	8007e9a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e8e:	683a      	ldr	r2, [r7, #0]
 8007e90:	4907      	ldr	r1, [pc, #28]	; (8007eb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e92:	4808      	ldr	r0, [pc, #32]	; (8007eb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e94:	f7ff fde5 	bl	8007a62 <USBD_GetString>
 8007e98:	e004      	b.n	8007ea4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e9a:	683a      	ldr	r2, [r7, #0]
 8007e9c:	4904      	ldr	r1, [pc, #16]	; (8007eb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e9e:	4805      	ldr	r0, [pc, #20]	; (8007eb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ea0:	f7ff fddf 	bl	8007a62 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ea4:	4b02      	ldr	r3, [pc, #8]	; (8007eb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3708      	adds	r7, #8
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	20004170 	.word	0x20004170
 8007eb4:	08008718 	.word	0x08008718

08007eb8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	6039      	str	r1, [r7, #0]
 8007ec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	220c      	movs	r2, #12
 8007ec8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007eca:	4b03      	ldr	r3, [pc, #12]	; (8007ed8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	20000110 	.word	0x20000110

08007edc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007ee2:	4b0f      	ldr	r3, [pc, #60]	; (8007f20 <Get_SerialNum+0x44>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007ee8:	4b0e      	ldr	r3, [pc, #56]	; (8007f24 <Get_SerialNum+0x48>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007eee:	4b0e      	ldr	r3, [pc, #56]	; (8007f28 <Get_SerialNum+0x4c>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4413      	add	r3, r2
 8007efa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d009      	beq.n	8007f16 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007f02:	2208      	movs	r2, #8
 8007f04:	4909      	ldr	r1, [pc, #36]	; (8007f2c <Get_SerialNum+0x50>)
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f000 f814 	bl	8007f34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007f0c:	2204      	movs	r2, #4
 8007f0e:	4908      	ldr	r1, [pc, #32]	; (8007f30 <Get_SerialNum+0x54>)
 8007f10:	68b8      	ldr	r0, [r7, #8]
 8007f12:	f000 f80f 	bl	8007f34 <IntToUnicode>
  }
}
 8007f16:	bf00      	nop
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	1fff7a10 	.word	0x1fff7a10
 8007f24:	1fff7a14 	.word	0x1fff7a14
 8007f28:	1fff7a18 	.word	0x1fff7a18
 8007f2c:	20000122 	.word	0x20000122
 8007f30:	20000132 	.word	0x20000132

08007f34 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b087      	sub	sp, #28
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007f42:	2300      	movs	r3, #0
 8007f44:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007f46:	2300      	movs	r3, #0
 8007f48:	75fb      	strb	r3, [r7, #23]
 8007f4a:	e027      	b.n	8007f9c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	0f1b      	lsrs	r3, r3, #28
 8007f50:	2b09      	cmp	r3, #9
 8007f52:	d80b      	bhi.n	8007f6c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	0f1b      	lsrs	r3, r3, #28
 8007f58:	b2da      	uxtb	r2, r3
 8007f5a:	7dfb      	ldrb	r3, [r7, #23]
 8007f5c:	005b      	lsls	r3, r3, #1
 8007f5e:	4619      	mov	r1, r3
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	440b      	add	r3, r1
 8007f64:	3230      	adds	r2, #48	; 0x30
 8007f66:	b2d2      	uxtb	r2, r2
 8007f68:	701a      	strb	r2, [r3, #0]
 8007f6a:	e00a      	b.n	8007f82 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	0f1b      	lsrs	r3, r3, #28
 8007f70:	b2da      	uxtb	r2, r3
 8007f72:	7dfb      	ldrb	r3, [r7, #23]
 8007f74:	005b      	lsls	r3, r3, #1
 8007f76:	4619      	mov	r1, r3
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	440b      	add	r3, r1
 8007f7c:	3237      	adds	r2, #55	; 0x37
 8007f7e:	b2d2      	uxtb	r2, r2
 8007f80:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	011b      	lsls	r3, r3, #4
 8007f86:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007f88:	7dfb      	ldrb	r3, [r7, #23]
 8007f8a:	005b      	lsls	r3, r3, #1
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	4413      	add	r3, r2
 8007f92:	2200      	movs	r2, #0
 8007f94:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007f96:	7dfb      	ldrb	r3, [r7, #23]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	75fb      	strb	r3, [r7, #23]
 8007f9c:	7dfa      	ldrb	r2, [r7, #23]
 8007f9e:	79fb      	ldrb	r3, [r7, #7]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d3d3      	bcc.n	8007f4c <IntToUnicode+0x18>
  }
}
 8007fa4:	bf00      	nop
 8007fa6:	bf00      	nop
 8007fa8:	371c      	adds	r7, #28
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
	...

08007fb4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b08a      	sub	sp, #40	; 0x28
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fbc:	f107 0314 	add.w	r3, r7, #20
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	601a      	str	r2, [r3, #0]
 8007fc4:	605a      	str	r2, [r3, #4]
 8007fc6:	609a      	str	r2, [r3, #8]
 8007fc8:	60da      	str	r2, [r3, #12]
 8007fca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007fd4:	d13a      	bne.n	800804c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	613b      	str	r3, [r7, #16]
 8007fda:	4b1e      	ldr	r3, [pc, #120]	; (8008054 <HAL_PCD_MspInit+0xa0>)
 8007fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fde:	4a1d      	ldr	r2, [pc, #116]	; (8008054 <HAL_PCD_MspInit+0xa0>)
 8007fe0:	f043 0301 	orr.w	r3, r3, #1
 8007fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8007fe6:	4b1b      	ldr	r3, [pc, #108]	; (8008054 <HAL_PCD_MspInit+0xa0>)
 8007fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fea:	f003 0301 	and.w	r3, r3, #1
 8007fee:	613b      	str	r3, [r7, #16]
 8007ff0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007ff2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008000:	2303      	movs	r3, #3
 8008002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008004:	230a      	movs	r3, #10
 8008006:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008008:	f107 0314 	add.w	r3, r7, #20
 800800c:	4619      	mov	r1, r3
 800800e:	4812      	ldr	r0, [pc, #72]	; (8008058 <HAL_PCD_MspInit+0xa4>)
 8008010:	f7f9 fa80 	bl	8001514 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008014:	4b0f      	ldr	r3, [pc, #60]	; (8008054 <HAL_PCD_MspInit+0xa0>)
 8008016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008018:	4a0e      	ldr	r2, [pc, #56]	; (8008054 <HAL_PCD_MspInit+0xa0>)
 800801a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800801e:	6353      	str	r3, [r2, #52]	; 0x34
 8008020:	2300      	movs	r3, #0
 8008022:	60fb      	str	r3, [r7, #12]
 8008024:	4b0b      	ldr	r3, [pc, #44]	; (8008054 <HAL_PCD_MspInit+0xa0>)
 8008026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008028:	4a0a      	ldr	r2, [pc, #40]	; (8008054 <HAL_PCD_MspInit+0xa0>)
 800802a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800802e:	6453      	str	r3, [r2, #68]	; 0x44
 8008030:	4b08      	ldr	r3, [pc, #32]	; (8008054 <HAL_PCD_MspInit+0xa0>)
 8008032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008038:	60fb      	str	r3, [r7, #12]
 800803a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800803c:	2200      	movs	r2, #0
 800803e:	2100      	movs	r1, #0
 8008040:	2043      	movs	r0, #67	; 0x43
 8008042:	f7f8 fec0 	bl	8000dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008046:	2043      	movs	r0, #67	; 0x43
 8008048:	f7f8 fed9 	bl	8000dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800804c:	bf00      	nop
 800804e:	3728      	adds	r7, #40	; 0x28
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	40023800 	.word	0x40023800
 8008058:	40020000 	.word	0x40020000

0800805c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008070:	4619      	mov	r1, r3
 8008072:	4610      	mov	r0, r2
 8008074:	f7fe fce5 	bl	8006a42 <USBD_LL_SetupStage>
}
 8008078:	bf00      	nop
 800807a:	3708      	adds	r7, #8
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	460b      	mov	r3, r1
 800808a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008092:	78fa      	ldrb	r2, [r7, #3]
 8008094:	6879      	ldr	r1, [r7, #4]
 8008096:	4613      	mov	r3, r2
 8008098:	00db      	lsls	r3, r3, #3
 800809a:	1a9b      	subs	r3, r3, r2
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	440b      	add	r3, r1
 80080a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	78fb      	ldrb	r3, [r7, #3]
 80080a8:	4619      	mov	r1, r3
 80080aa:	f7fe fd1f 	bl	8006aec <USBD_LL_DataOutStage>
}
 80080ae:	bf00      	nop
 80080b0:	3708      	adds	r7, #8
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b082      	sub	sp, #8
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	460b      	mov	r3, r1
 80080c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80080c8:	78fa      	ldrb	r2, [r7, #3]
 80080ca:	6879      	ldr	r1, [r7, #4]
 80080cc:	4613      	mov	r3, r2
 80080ce:	00db      	lsls	r3, r3, #3
 80080d0:	1a9b      	subs	r3, r3, r2
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	440b      	add	r3, r1
 80080d6:	3348      	adds	r3, #72	; 0x48
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	78fb      	ldrb	r3, [r7, #3]
 80080dc:	4619      	mov	r1, r3
 80080de:	f7fe fd68 	bl	8006bb2 <USBD_LL_DataInStage>
}
 80080e2:	bf00      	nop
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b082      	sub	sp, #8
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7fe fe7c 	bl	8006df6 <USBD_LL_SOF>
}
 80080fe:	bf00      	nop
 8008100:	3708      	adds	r7, #8
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b084      	sub	sp, #16
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800810e:	2301      	movs	r3, #1
 8008110:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d102      	bne.n	8008120 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800811a:	2300      	movs	r3, #0
 800811c:	73fb      	strb	r3, [r7, #15]
 800811e:	e008      	b.n	8008132 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	2b02      	cmp	r3, #2
 8008126:	d102      	bne.n	800812e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008128:	2301      	movs	r3, #1
 800812a:	73fb      	strb	r3, [r7, #15]
 800812c:	e001      	b.n	8008132 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800812e:	f7f8 fb49 	bl	80007c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008138:	7bfa      	ldrb	r2, [r7, #15]
 800813a:	4611      	mov	r1, r2
 800813c:	4618      	mov	r0, r3
 800813e:	f7fe fe1c 	bl	8006d7a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008148:	4618      	mov	r0, r3
 800814a:	f7fe fdc8 	bl	8006cde <USBD_LL_Reset>
}
 800814e:	bf00      	nop
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
	...

08008158 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008166:	4618      	mov	r0, r3
 8008168:	f7fe fe17 	bl	8006d9a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	6812      	ldr	r2, [r2, #0]
 800817a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800817e:	f043 0301 	orr.w	r3, r3, #1
 8008182:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a1b      	ldr	r3, [r3, #32]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d005      	beq.n	8008198 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800818c:	4b04      	ldr	r3, [pc, #16]	; (80081a0 <HAL_PCD_SuspendCallback+0x48>)
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	4a03      	ldr	r2, [pc, #12]	; (80081a0 <HAL_PCD_SuspendCallback+0x48>)
 8008192:	f043 0306 	orr.w	r3, r3, #6
 8008196:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008198:	bf00      	nop
 800819a:	3708      	adds	r7, #8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	e000ed00 	.word	0xe000ed00

080081a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7fe fe07 	bl	8006dc6 <USBD_LL_Resume>
}
 80081b8:	bf00      	nop
 80081ba:	3708      	adds	r7, #8
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	460b      	mov	r3, r1
 80081ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081d2:	78fa      	ldrb	r2, [r7, #3]
 80081d4:	4611      	mov	r1, r2
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7fe fe55 	bl	8006e86 <USBD_LL_IsoOUTIncomplete>
}
 80081dc:	bf00      	nop
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	460b      	mov	r3, r1
 80081ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081f6:	78fa      	ldrb	r2, [r7, #3]
 80081f8:	4611      	mov	r1, r2
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7fe fe1d 	bl	8006e3a <USBD_LL_IsoINIncomplete>
}
 8008200:	bf00      	nop
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008216:	4618      	mov	r0, r3
 8008218:	f7fe fe5b 	bl	8006ed2 <USBD_LL_DevConnected>
}
 800821c:	bf00      	nop
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008232:	4618      	mov	r0, r3
 8008234:	f7fe fe58 	bl	8006ee8 <USBD_LL_DevDisconnected>
}
 8008238:	bf00      	nop
 800823a:	3708      	adds	r7, #8
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d13c      	bne.n	80082ca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008250:	4a20      	ldr	r2, [pc, #128]	; (80082d4 <USBD_LL_Init+0x94>)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a1e      	ldr	r2, [pc, #120]	; (80082d4 <USBD_LL_Init+0x94>)
 800825c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008260:	4b1c      	ldr	r3, [pc, #112]	; (80082d4 <USBD_LL_Init+0x94>)
 8008262:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008266:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008268:	4b1a      	ldr	r3, [pc, #104]	; (80082d4 <USBD_LL_Init+0x94>)
 800826a:	2206      	movs	r2, #6
 800826c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800826e:	4b19      	ldr	r3, [pc, #100]	; (80082d4 <USBD_LL_Init+0x94>)
 8008270:	2202      	movs	r2, #2
 8008272:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008274:	4b17      	ldr	r3, [pc, #92]	; (80082d4 <USBD_LL_Init+0x94>)
 8008276:	2200      	movs	r2, #0
 8008278:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800827a:	4b16      	ldr	r3, [pc, #88]	; (80082d4 <USBD_LL_Init+0x94>)
 800827c:	2202      	movs	r2, #2
 800827e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008280:	4b14      	ldr	r3, [pc, #80]	; (80082d4 <USBD_LL_Init+0x94>)
 8008282:	2200      	movs	r2, #0
 8008284:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008286:	4b13      	ldr	r3, [pc, #76]	; (80082d4 <USBD_LL_Init+0x94>)
 8008288:	2200      	movs	r2, #0
 800828a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800828c:	4b11      	ldr	r3, [pc, #68]	; (80082d4 <USBD_LL_Init+0x94>)
 800828e:	2200      	movs	r2, #0
 8008290:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008292:	4b10      	ldr	r3, [pc, #64]	; (80082d4 <USBD_LL_Init+0x94>)
 8008294:	2200      	movs	r2, #0
 8008296:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008298:	4b0e      	ldr	r3, [pc, #56]	; (80082d4 <USBD_LL_Init+0x94>)
 800829a:	2200      	movs	r2, #0
 800829c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800829e:	480d      	ldr	r0, [pc, #52]	; (80082d4 <USBD_LL_Init+0x94>)
 80082a0:	f7f9 facc 	bl	800183c <HAL_PCD_Init>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80082aa:	f7f8 fa8b 	bl	80007c4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80082ae:	2180      	movs	r1, #128	; 0x80
 80082b0:	4808      	ldr	r0, [pc, #32]	; (80082d4 <USBD_LL_Init+0x94>)
 80082b2:	f7fa fc5e 	bl	8002b72 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80082b6:	2240      	movs	r2, #64	; 0x40
 80082b8:	2100      	movs	r1, #0
 80082ba:	4806      	ldr	r0, [pc, #24]	; (80082d4 <USBD_LL_Init+0x94>)
 80082bc:	f7fa fc12 	bl	8002ae4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80082c0:	2280      	movs	r2, #128	; 0x80
 80082c2:	2101      	movs	r1, #1
 80082c4:	4803      	ldr	r0, [pc, #12]	; (80082d4 <USBD_LL_Init+0x94>)
 80082c6:	f7fa fc0d 	bl	8002ae4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	20004370 	.word	0x20004370

080082d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082e0:	2300      	movs	r3, #0
 80082e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082e4:	2300      	movs	r3, #0
 80082e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7f9 fbc8 	bl	8001a84 <HAL_PCD_Start>
 80082f4:	4603      	mov	r3, r0
 80082f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082f8:	7bfb      	ldrb	r3, [r7, #15]
 80082fa:	4618      	mov	r0, r3
 80082fc:	f000 f990 	bl	8008620 <USBD_Get_USB_Status>
 8008300:	4603      	mov	r3, r0
 8008302:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008304:	7bbb      	ldrb	r3, [r7, #14]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b084      	sub	sp, #16
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
 8008316:	4608      	mov	r0, r1
 8008318:	4611      	mov	r1, r2
 800831a:	461a      	mov	r2, r3
 800831c:	4603      	mov	r3, r0
 800831e:	70fb      	strb	r3, [r7, #3]
 8008320:	460b      	mov	r3, r1
 8008322:	70bb      	strb	r3, [r7, #2]
 8008324:	4613      	mov	r3, r2
 8008326:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008328:	2300      	movs	r3, #0
 800832a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800832c:	2300      	movs	r3, #0
 800832e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008336:	78bb      	ldrb	r3, [r7, #2]
 8008338:	883a      	ldrh	r2, [r7, #0]
 800833a:	78f9      	ldrb	r1, [r7, #3]
 800833c:	f7f9 ffd9 	bl	80022f2 <HAL_PCD_EP_Open>
 8008340:	4603      	mov	r3, r0
 8008342:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008344:	7bfb      	ldrb	r3, [r7, #15]
 8008346:	4618      	mov	r0, r3
 8008348:	f000 f96a 	bl	8008620 <USBD_Get_USB_Status>
 800834c:	4603      	mov	r3, r0
 800834e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008350:	7bbb      	ldrb	r3, [r7, #14]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
 8008362:	460b      	mov	r3, r1
 8008364:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008374:	78fa      	ldrb	r2, [r7, #3]
 8008376:	4611      	mov	r1, r2
 8008378:	4618      	mov	r0, r3
 800837a:	f7fa f822 	bl	80023c2 <HAL_PCD_EP_Close>
 800837e:	4603      	mov	r3, r0
 8008380:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008382:	7bfb      	ldrb	r3, [r7, #15]
 8008384:	4618      	mov	r0, r3
 8008386:	f000 f94b 	bl	8008620 <USBD_Get_USB_Status>
 800838a:	4603      	mov	r3, r0
 800838c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800838e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	460b      	mov	r3, r1
 80083a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083a4:	2300      	movs	r3, #0
 80083a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083a8:	2300      	movs	r3, #0
 80083aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80083b2:	78fa      	ldrb	r2, [r7, #3]
 80083b4:	4611      	mov	r1, r2
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7fa f8fa 	bl	80025b0 <HAL_PCD_EP_SetStall>
 80083bc:	4603      	mov	r3, r0
 80083be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083c0:	7bfb      	ldrb	r3, [r7, #15]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 f92c 	bl	8008620 <USBD_Get_USB_Status>
 80083c8:	4603      	mov	r3, r0
 80083ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b084      	sub	sp, #16
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
 80083de:	460b      	mov	r3, r1
 80083e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083e2:	2300      	movs	r3, #0
 80083e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083e6:	2300      	movs	r3, #0
 80083e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80083f0:	78fa      	ldrb	r2, [r7, #3]
 80083f2:	4611      	mov	r1, r2
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7fa f93f 	bl	8002678 <HAL_PCD_EP_ClrStall>
 80083fa:	4603      	mov	r3, r0
 80083fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083fe:	7bfb      	ldrb	r3, [r7, #15]
 8008400:	4618      	mov	r0, r3
 8008402:	f000 f90d 	bl	8008620 <USBD_Get_USB_Status>
 8008406:	4603      	mov	r3, r0
 8008408:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800840a:	7bbb      	ldrb	r3, [r7, #14]
}
 800840c:	4618      	mov	r0, r3
 800840e:	3710      	adds	r7, #16
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008414:	b480      	push	{r7}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	460b      	mov	r3, r1
 800841e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008426:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008428:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800842c:	2b00      	cmp	r3, #0
 800842e:	da0b      	bge.n	8008448 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008430:	78fb      	ldrb	r3, [r7, #3]
 8008432:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008436:	68f9      	ldr	r1, [r7, #12]
 8008438:	4613      	mov	r3, r2
 800843a:	00db      	lsls	r3, r3, #3
 800843c:	1a9b      	subs	r3, r3, r2
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	440b      	add	r3, r1
 8008442:	333e      	adds	r3, #62	; 0x3e
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	e00b      	b.n	8008460 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008448:	78fb      	ldrb	r3, [r7, #3]
 800844a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800844e:	68f9      	ldr	r1, [r7, #12]
 8008450:	4613      	mov	r3, r2
 8008452:	00db      	lsls	r3, r3, #3
 8008454:	1a9b      	subs	r3, r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	440b      	add	r3, r1
 800845a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800845e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008460:	4618      	mov	r0, r3
 8008462:	3714      	adds	r7, #20
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	460b      	mov	r3, r1
 8008476:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008478:	2300      	movs	r3, #0
 800847a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800847c:	2300      	movs	r3, #0
 800847e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008486:	78fa      	ldrb	r2, [r7, #3]
 8008488:	4611      	mov	r1, r2
 800848a:	4618      	mov	r0, r3
 800848c:	f7f9 ff0c 	bl	80022a8 <HAL_PCD_SetAddress>
 8008490:	4603      	mov	r3, r0
 8008492:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008494:	7bfb      	ldrb	r3, [r7, #15]
 8008496:	4618      	mov	r0, r3
 8008498:	f000 f8c2 	bl	8008620 <USBD_Get_USB_Status>
 800849c:	4603      	mov	r3, r0
 800849e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b086      	sub	sp, #24
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	60f8      	str	r0, [r7, #12]
 80084b2:	607a      	str	r2, [r7, #4]
 80084b4:	603b      	str	r3, [r7, #0]
 80084b6:	460b      	mov	r3, r1
 80084b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084ba:	2300      	movs	r3, #0
 80084bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80084c8:	7af9      	ldrb	r1, [r7, #11]
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	f7fa f825 	bl	800251c <HAL_PCD_EP_Transmit>
 80084d2:	4603      	mov	r3, r0
 80084d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084d6:	7dfb      	ldrb	r3, [r7, #23]
 80084d8:	4618      	mov	r0, r3
 80084da:	f000 f8a1 	bl	8008620 <USBD_Get_USB_Status>
 80084de:	4603      	mov	r3, r0
 80084e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80084e2:	7dbb      	ldrb	r3, [r7, #22]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3718      	adds	r7, #24
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b086      	sub	sp, #24
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	607a      	str	r2, [r7, #4]
 80084f6:	603b      	str	r3, [r7, #0]
 80084f8:	460b      	mov	r3, r1
 80084fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084fc:	2300      	movs	r3, #0
 80084fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008500:	2300      	movs	r3, #0
 8008502:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800850a:	7af9      	ldrb	r1, [r7, #11]
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	f7f9 ffa1 	bl	8002456 <HAL_PCD_EP_Receive>
 8008514:	4603      	mov	r3, r0
 8008516:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008518:	7dfb      	ldrb	r3, [r7, #23]
 800851a:	4618      	mov	r0, r3
 800851c:	f000 f880 	bl	8008620 <USBD_Get_USB_Status>
 8008520:	4603      	mov	r3, r0
 8008522:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008524:	7dbb      	ldrb	r3, [r7, #22]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3718      	adds	r7, #24
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b082      	sub	sp, #8
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
 8008536:	460b      	mov	r3, r1
 8008538:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008540:	78fa      	ldrb	r2, [r7, #3]
 8008542:	4611      	mov	r1, r2
 8008544:	4618      	mov	r0, r3
 8008546:	f7f9 ffd1 	bl	80024ec <HAL_PCD_EP_GetRxCount>
 800854a:	4603      	mov	r3, r0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	460b      	mov	r3, r1
 800855e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008560:	78fb      	ldrb	r3, [r7, #3]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d002      	beq.n	800856c <HAL_PCDEx_LPM_Callback+0x18>
 8008566:	2b01      	cmp	r3, #1
 8008568:	d01f      	beq.n	80085aa <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800856a:	e03b      	b.n	80085e4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a1b      	ldr	r3, [r3, #32]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d007      	beq.n	8008584 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8008574:	f7f7 ffd2 	bl	800051c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008578:	4b1c      	ldr	r3, [pc, #112]	; (80085ec <HAL_PCDEx_LPM_Callback+0x98>)
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	4a1b      	ldr	r2, [pc, #108]	; (80085ec <HAL_PCDEx_LPM_Callback+0x98>)
 800857e:	f023 0306 	bic.w	r3, r3, #6
 8008582:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	6812      	ldr	r2, [r2, #0]
 8008592:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008596:	f023 0301 	bic.w	r3, r3, #1
 800859a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fe fc0f 	bl	8006dc6 <USBD_LL_Resume>
    break;
 80085a8:	e01c      	b.n	80085e4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	6812      	ldr	r2, [r2, #0]
 80085b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80085bc:	f043 0301 	orr.w	r3, r3, #1
 80085c0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7fe fbe6 	bl	8006d9a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d005      	beq.n	80085e2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80085d6:	4b05      	ldr	r3, [pc, #20]	; (80085ec <HAL_PCDEx_LPM_Callback+0x98>)
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	4a04      	ldr	r2, [pc, #16]	; (80085ec <HAL_PCDEx_LPM_Callback+0x98>)
 80085dc:	f043 0306 	orr.w	r3, r3, #6
 80085e0:	6113      	str	r3, [r2, #16]
    break;
 80085e2:	bf00      	nop
}
 80085e4:	bf00      	nop
 80085e6:	3708      	adds	r7, #8
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	e000ed00 	.word	0xe000ed00

080085f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80085f8:	4b03      	ldr	r3, [pc, #12]	; (8008608 <USBD_static_malloc+0x18>)
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr
 8008606:	bf00      	nop
 8008608:	20000160 	.word	0x20000160

0800860c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]

}
 8008614:	bf00      	nop
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	4603      	mov	r3, r0
 8008628:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800862a:	2300      	movs	r3, #0
 800862c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800862e:	79fb      	ldrb	r3, [r7, #7]
 8008630:	2b03      	cmp	r3, #3
 8008632:	d817      	bhi.n	8008664 <USBD_Get_USB_Status+0x44>
 8008634:	a201      	add	r2, pc, #4	; (adr r2, 800863c <USBD_Get_USB_Status+0x1c>)
 8008636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800863a:	bf00      	nop
 800863c:	0800864d 	.word	0x0800864d
 8008640:	08008653 	.word	0x08008653
 8008644:	08008659 	.word	0x08008659
 8008648:	0800865f 	.word	0x0800865f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800864c:	2300      	movs	r3, #0
 800864e:	73fb      	strb	r3, [r7, #15]
    break;
 8008650:	e00b      	b.n	800866a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008652:	2303      	movs	r3, #3
 8008654:	73fb      	strb	r3, [r7, #15]
    break;
 8008656:	e008      	b.n	800866a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008658:	2301      	movs	r3, #1
 800865a:	73fb      	strb	r3, [r7, #15]
    break;
 800865c:	e005      	b.n	800866a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800865e:	2303      	movs	r3, #3
 8008660:	73fb      	strb	r3, [r7, #15]
    break;
 8008662:	e002      	b.n	800866a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008664:	2303      	movs	r3, #3
 8008666:	73fb      	strb	r3, [r7, #15]
    break;
 8008668:	bf00      	nop
  }
  return usb_status;
 800866a:	7bfb      	ldrb	r3, [r7, #15]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3714      	adds	r7, #20
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <__libc_init_array>:
 8008678:	b570      	push	{r4, r5, r6, lr}
 800867a:	4d0d      	ldr	r5, [pc, #52]	; (80086b0 <__libc_init_array+0x38>)
 800867c:	4c0d      	ldr	r4, [pc, #52]	; (80086b4 <__libc_init_array+0x3c>)
 800867e:	1b64      	subs	r4, r4, r5
 8008680:	10a4      	asrs	r4, r4, #2
 8008682:	2600      	movs	r6, #0
 8008684:	42a6      	cmp	r6, r4
 8008686:	d109      	bne.n	800869c <__libc_init_array+0x24>
 8008688:	4d0b      	ldr	r5, [pc, #44]	; (80086b8 <__libc_init_array+0x40>)
 800868a:	4c0c      	ldr	r4, [pc, #48]	; (80086bc <__libc_init_array+0x44>)
 800868c:	f000 f820 	bl	80086d0 <_init>
 8008690:	1b64      	subs	r4, r4, r5
 8008692:	10a4      	asrs	r4, r4, #2
 8008694:	2600      	movs	r6, #0
 8008696:	42a6      	cmp	r6, r4
 8008698:	d105      	bne.n	80086a6 <__libc_init_array+0x2e>
 800869a:	bd70      	pop	{r4, r5, r6, pc}
 800869c:	f855 3b04 	ldr.w	r3, [r5], #4
 80086a0:	4798      	blx	r3
 80086a2:	3601      	adds	r6, #1
 80086a4:	e7ee      	b.n	8008684 <__libc_init_array+0xc>
 80086a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80086aa:	4798      	blx	r3
 80086ac:	3601      	adds	r6, #1
 80086ae:	e7f2      	b.n	8008696 <__libc_init_array+0x1e>
 80086b0:	08008748 	.word	0x08008748
 80086b4:	08008748 	.word	0x08008748
 80086b8:	08008748 	.word	0x08008748
 80086bc:	0800874c 	.word	0x0800874c

080086c0 <memset>:
 80086c0:	4402      	add	r2, r0
 80086c2:	4603      	mov	r3, r0
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d100      	bne.n	80086ca <memset+0xa>
 80086c8:	4770      	bx	lr
 80086ca:	f803 1b01 	strb.w	r1, [r3], #1
 80086ce:	e7f9      	b.n	80086c4 <memset+0x4>

080086d0 <_init>:
 80086d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086d2:	bf00      	nop
 80086d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086d6:	bc08      	pop	{r3}
 80086d8:	469e      	mov	lr, r3
 80086da:	4770      	bx	lr

080086dc <_fini>:
 80086dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086de:	bf00      	nop
 80086e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086e2:	bc08      	pop	{r3}
 80086e4:	469e      	mov	lr, r3
 80086e6:	4770      	bx	lr
