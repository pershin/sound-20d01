
Sound-20D01MB_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c30  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008df4  08008df4  00018df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e4c  08008e4c  0002013c  2**0
                  CONTENTS
  4 .ARM          00000008  08008e4c  08008e4c  00018e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e54  08008e54  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e54  08008e54  00018e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e58  08008e58  00018e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  08008e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004694  2000013c  08008f98  0002013c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200047d0  08008f98  000247d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a04  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bff  00000000  00000000  00039b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  0003d770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  0003e818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000250d4  00000000  00000000  0003f730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d45  00000000  00000000  00064804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ceefc  00000000  00000000  0007a549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00149445  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000433c  00000000  00000000  00149498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000013c 	.word	0x2000013c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08008ddc 	.word	0x08008ddc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000140 	.word	0x20000140
 8000200:	08008ddc 	.word	0x08008ddc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fbce 	bl	8000ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f80c 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f938 	bl	800077c <MX_GPIO_Init>
  MX_DMA_Init();
 800050c:	f000 f916 	bl	800073c <MX_DMA_Init>
  MX_SAI1_Init();
 8000510:	f000 f8a4 	bl	800065c <MX_SAI1_Init>
  MX_USB_DEVICE_Init();
 8000514:	f007 ff0c 	bl	8008330 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000518:	f000 f8da 	bl	80006d0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051c:	e7fe      	b.n	800051c <main+0x20>
	...

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b0ac      	sub	sp, #176	; 0xb0
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800052a:	2234      	movs	r2, #52	; 0x34
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f008 fc4c 	bl	8008dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	225c      	movs	r2, #92	; 0x5c
 800054a:	2100      	movs	r1, #0
 800054c:	4618      	mov	r0, r3
 800054e:	f008 fc3d 	bl	8008dcc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	4b3f      	ldr	r3, [pc, #252]	; (8000654 <SystemClock_Config+0x134>)
 8000558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055a:	4a3e      	ldr	r2, [pc, #248]	; (8000654 <SystemClock_Config+0x134>)
 800055c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000560:	6413      	str	r3, [r2, #64]	; 0x40
 8000562:	4b3c      	ldr	r3, [pc, #240]	; (8000654 <SystemClock_Config+0x134>)
 8000564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	4b39      	ldr	r3, [pc, #228]	; (8000658 <SystemClock_Config+0x138>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a38      	ldr	r2, [pc, #224]	; (8000658 <SystemClock_Config+0x138>)
 8000578:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800057c:	6013      	str	r3, [r2, #0]
 800057e:	4b36      	ldr	r3, [pc, #216]	; (8000658 <SystemClock_Config+0x138>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058a:	2301      	movs	r3, #1
 800058c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800058e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000592:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005a4:	2304      	movs	r3, #4
 80005a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005aa:	23b4      	movs	r3, #180	; 0xb4
 80005ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005bc:	2302      	movs	r3, #2
 80005be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 fc64 	bl	8003e94 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005d2:	f000 f945 	bl	8000860 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005d6:	f002 fbf7 	bl	8002dc8 <HAL_PWREx_EnableOverDrive>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005e0:	f000 f93e 	bl	8000860 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e8:	2302      	movs	r3, #2
 80005ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005f4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fa:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005fc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000600:	2105      	movs	r1, #5
 8000602:	4618      	mov	r0, r3
 8000604:	f002 fc30 	bl	8002e68 <HAL_RCC_ClockConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800060e:	f000 f927 	bl	8000860 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_CLK48;
 8000612:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000616:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 4;
 8000618:	2304      	movs	r3, #4
 800061a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 800061c:	2360      	movs	r3, #96	; 0x60
 800061e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000620:	2302      	movs	r3, #2
 8000622:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8000624:	2304      	movs	r3, #4
 8000626:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000628:	2301      	movs	r3, #1
 800062a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 800062c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000630:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_EXT;
 8000632:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8000636:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	4618      	mov	r0, r3
 800063e:	f002 fd05 	bl	800304c <HAL_RCCEx_PeriphCLKConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8000648:	f000 f90a 	bl	8000860 <Error_Handler>
  }
}
 800064c:	bf00      	nop
 800064e:	37b0      	adds	r7, #176	; 0xb0
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000

0800065c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000660:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <MX_SAI1_Init+0x6c>)
 8000662:	4a1a      	ldr	r2, [pc, #104]	; (80006cc <MX_SAI1_Init+0x70>)
 8000664:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000666:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <MX_SAI1_Init+0x6c>)
 8000668:	2200      	movs	r2, #0
 800066a:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 800066c:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <MX_SAI1_Init+0x6c>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000672:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <MX_SAI1_Init+0x6c>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000678:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <MX_SAI1_Init+0x6c>)
 800067a:	2200      	movs	r2, #0
 800067c:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800067e:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_SAI1_Init+0x6c>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.ClockSource = SAI_CLKSOURCE_NA;
 8000684:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <MX_SAI1_Init+0x6c>)
 8000686:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800068a:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800068c:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_SAI1_Init+0x6c>)
 800068e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000692:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_SAI1_Init+0x6c>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_SAI1_Init+0x6c>)
 800069c:	2200      	movs	r2, #0
 800069e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_SAI1_Init+0x6c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <MX_SAI1_Init+0x6c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 80006ac:	2302      	movs	r3, #2
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_SAI1_Init+0x6c>)
 80006b4:	f003 fe8c 	bl	80043d0 <HAL_SAI_InitProtocol>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_SAI1_Init+0x66>
  {
    Error_Handler();
 80006be:	f000 f8cf 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20003db4 	.word	0x20003db4
 80006cc:	40015824 	.word	0x40015824

080006d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006d4:	4b17      	ldr	r3, [pc, #92]	; (8000734 <MX_SPI1_Init+0x64>)
 80006d6:	4a18      	ldr	r2, [pc, #96]	; (8000738 <MX_SPI1_Init+0x68>)
 80006d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006da:	4b16      	ldr	r3, [pc, #88]	; (8000734 <MX_SPI1_Init+0x64>)
 80006dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006e2:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_SPI1_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_SPI1_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_SPI1_Init+0x64>)
 80006fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000700:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000702:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_SPI1_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <MX_SPI1_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_SPI1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <MX_SPI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_SPI1_Init+0x64>)
 800071c:	220a      	movs	r2, #10
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_SPI1_Init+0x64>)
 8000722:	f004 fadf 	bl	8004ce4 <HAL_SPI_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800072c:	f000 f898 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20003e9c 	.word	0x20003e9c
 8000738:	40013000 	.word	0x40013000

0800073c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_DMA_Init+0x3c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a0b      	ldr	r2, [pc, #44]	; (8000778 <MX_DMA_Init+0x3c>)
 800074c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_DMA_Init+0x3c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2100      	movs	r1, #0
 8000762:	2044      	movs	r0, #68	; 0x44
 8000764:	f000 fc0d 	bl	8000f82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000768:	2044      	movs	r0, #68	; 0x44
 800076a:	f000 fc26 	bl	8000fba <HAL_NVIC_EnableIRQ>

}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	4b2f      	ldr	r3, [pc, #188]	; (8000854 <MX_GPIO_Init+0xd8>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a2e      	ldr	r2, [pc, #184]	; (8000854 <MX_GPIO_Init+0xd8>)
 800079c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b2c      	ldr	r3, [pc, #176]	; (8000854 <MX_GPIO_Init+0xd8>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	4b28      	ldr	r3, [pc, #160]	; (8000854 <MX_GPIO_Init+0xd8>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a27      	ldr	r2, [pc, #156]	; (8000854 <MX_GPIO_Init+0xd8>)
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b25      	ldr	r3, [pc, #148]	; (8000854 <MX_GPIO_Init+0xd8>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0304 	and.w	r3, r3, #4
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	4b21      	ldr	r3, [pc, #132]	; (8000854 <MX_GPIO_Init+0xd8>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a20      	ldr	r2, [pc, #128]	; (8000854 <MX_GPIO_Init+0xd8>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <MX_GPIO_Init+0xd8>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_GPIO_Init+0xd8>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a19      	ldr	r2, [pc, #100]	; (8000854 <MX_GPIO_Init+0xd8>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_GPIO_Init+0xd8>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD1938_CLATCH_GPIO_Port, AD1938_CLATCH_Pin, GPIO_PIN_SET);
 8000802:	2201      	movs	r2, #1
 8000804:	2110      	movs	r1, #16
 8000806:	4814      	ldr	r0, [pc, #80]	; (8000858 <MX_GPIO_Init+0xdc>)
 8000808:	f001 f8f6 	bl	80019f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AD1938_CLATCH_Pin */
  GPIO_InitStruct.Pin = AD1938_CLATCH_Pin;
 800080c:	2310      	movs	r3, #16
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AD1938_CLATCH_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	480d      	ldr	r0, [pc, #52]	; (8000858 <MX_GPIO_Init+0xdc>)
 8000824:	f000 ff54 	bl	80016d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000828:	f44f 7300 	mov.w	r3, #512	; 0x200
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082e:	2302      	movs	r3, #2
 8000830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800083a:	2305      	movs	r3, #5
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_GPIO_Init+0xe0>)
 8000846:	f000 ff43 	bl	80016d0 <HAL_GPIO_Init>

}
 800084a:	bf00      	nop
 800084c:	3728      	adds	r7, #40	; 0x28
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800
 8000858:	40020000 	.word	0x40020000
 800085c:	40020800 	.word	0x40020800

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000868:	e7fe      	b.n	8000868 <Error_Handler+0x8>
	...

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <HAL_MspInit+0x4c>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	4a0f      	ldr	r2, [pc, #60]	; (80008b8 <HAL_MspInit+0x4c>)
 800087c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000880:	6453      	str	r3, [r2, #68]	; 0x44
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <HAL_MspInit+0x4c>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <HAL_MspInit+0x4c>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	4a08      	ldr	r2, [pc, #32]	; (80008b8 <HAL_MspInit+0x4c>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089c:	6413      	str	r3, [r2, #64]	; 0x40
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_MspInit+0x4c>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a19      	ldr	r2, [pc, #100]	; (8000940 <HAL_SPI_MspInit+0x84>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d12b      	bne.n	8000936 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <HAL_SPI_MspInit+0x88>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	4a17      	ldr	r2, [pc, #92]	; (8000944 <HAL_SPI_MspInit+0x88>)
 80008e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008ec:	6453      	str	r3, [r2, #68]	; 0x44
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <HAL_SPI_MspInit+0x88>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <HAL_SPI_MspInit+0x88>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a10      	ldr	r2, [pc, #64]	; (8000944 <HAL_SPI_MspInit+0x88>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <HAL_SPI_MspInit+0x88>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000916:	23e0      	movs	r3, #224	; 0xe0
 8000918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000922:	2303      	movs	r3, #3
 8000924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000926:	2305      	movs	r3, #5
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	4805      	ldr	r0, [pc, #20]	; (8000948 <HAL_SPI_MspInit+0x8c>)
 8000932:	f000 fecd 	bl	80016d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000936:	bf00      	nop
 8000938:	3728      	adds	r7, #40	; 0x28
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40013000 	.word	0x40013000
 8000944:	40023800 	.word	0x40023800
 8000948:	40020000 	.word	0x40020000

0800094c <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b088      	sub	sp, #32
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a47      	ldr	r2, [pc, #284]	; (8000a78 <HAL_SAI_MspInit+0x12c>)
 800095a:	4293      	cmp	r3, r2
 800095c:	f040 8088 	bne.w	8000a70 <HAL_SAI_MspInit+0x124>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8000960:	4b46      	ldr	r3, [pc, #280]	; (8000a7c <HAL_SAI_MspInit+0x130>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d10d      	bne.n	8000984 <HAL_SAI_MspInit+0x38>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	4b44      	ldr	r3, [pc, #272]	; (8000a80 <HAL_SAI_MspInit+0x134>)
 800096e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000970:	4a43      	ldr	r2, [pc, #268]	; (8000a80 <HAL_SAI_MspInit+0x134>)
 8000972:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000976:	6453      	str	r3, [r2, #68]	; 0x44
 8000978:	4b41      	ldr	r3, [pc, #260]	; (8000a80 <HAL_SAI_MspInit+0x134>)
 800097a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 8000984:	4b3d      	ldr	r3, [pc, #244]	; (8000a7c <HAL_SAI_MspInit+0x130>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	3301      	adds	r3, #1
 800098a:	4a3c      	ldr	r2, [pc, #240]	; (8000a7c <HAL_SAI_MspInit+0x130>)
 800098c:	6013      	str	r3, [r2, #0]
    PC0     ------> SAI1_MCLK_B
    PB12     ------> SAI1_SCK_B
    PA9     ------> SAI1_SD_B
    PB9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800098e:	2301      	movs	r3, #1
 8000990:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800099e:	2306      	movs	r3, #6
 80009a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a2:	f107 030c 	add.w	r3, r7, #12
 80009a6:	4619      	mov	r1, r3
 80009a8:	4836      	ldr	r0, [pc, #216]	; (8000a84 <HAL_SAI_MspInit+0x138>)
 80009aa:	f000 fe91 	bl	80016d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_9;
 80009ae:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80009b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80009c0:	2306      	movs	r3, #6
 80009c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	4619      	mov	r1, r3
 80009ca:	482f      	ldr	r0, [pc, #188]	; (8000a88 <HAL_SAI_MspInit+0x13c>)
 80009cc:	f000 fe80 	bl	80016d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80009e2:	2306      	movs	r3, #6
 80009e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	f107 030c 	add.w	r3, r7, #12
 80009ea:	4619      	mov	r1, r3
 80009ec:	4827      	ldr	r0, [pc, #156]	; (8000a8c <HAL_SAI_MspInit+0x140>)
 80009ee:	f000 fe6f 	bl	80016d0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream5;
 80009f2:	4b27      	ldr	r3, [pc, #156]	; (8000a90 <HAL_SAI_MspInit+0x144>)
 80009f4:	4a27      	ldr	r2, [pc, #156]	; (8000a94 <HAL_SAI_MspInit+0x148>)
 80009f6:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_0;
 80009f8:	4b25      	ldr	r3, [pc, #148]	; (8000a90 <HAL_SAI_MspInit+0x144>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009fe:	4b24      	ldr	r3, [pc, #144]	; (8000a90 <HAL_SAI_MspInit+0x144>)
 8000a00:	2240      	movs	r2, #64	; 0x40
 8000a02:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a04:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <HAL_SAI_MspInit+0x144>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8000a0a:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <HAL_SAI_MspInit+0x144>)
 8000a0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a10:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a12:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <HAL_SAI_MspInit+0x144>)
 8000a14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a18:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a1a:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <HAL_SAI_MspInit+0x144>)
 8000a1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a20:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_NORMAL;
 8000a22:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <HAL_SAI_MspInit+0x144>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_LOW;
 8000a28:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <HAL_SAI_MspInit+0x144>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <HAL_SAI_MspInit+0x144>)
 8000a30:	2204      	movs	r2, #4
 8000a32:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <HAL_SAI_MspInit+0x144>)
 8000a36:	2203      	movs	r2, #3
 8000a38:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_INC8;
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <HAL_SAI_MspInit+0x144>)
 8000a3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a40:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <HAL_SAI_MspInit+0x144>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8000a48:	4811      	ldr	r0, [pc, #68]	; (8000a90 <HAL_SAI_MspInit+0x144>)
 8000a4a:	f000 fad1 	bl	8000ff0 <HAL_DMA_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <HAL_SAI_MspInit+0x10c>
    {
      Error_Handler();
 8000a54:	f7ff ff04 	bl	8000860 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a0d      	ldr	r2, [pc, #52]	; (8000a90 <HAL_SAI_MspInit+0x144>)
 8000a5c:	675a      	str	r2, [r3, #116]	; 0x74
 8000a5e:	4a0c      	ldr	r2, [pc, #48]	; (8000a90 <HAL_SAI_MspInit+0x144>)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <HAL_SAI_MspInit+0x144>)
 8000a68:	671a      	str	r2, [r3, #112]	; 0x70
 8000a6a:	4a09      	ldr	r2, [pc, #36]	; (8000a90 <HAL_SAI_MspInit+0x144>)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8000a70:	bf00      	nop
 8000a72:	3720      	adds	r7, #32
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40015824 	.word	0x40015824
 8000a7c:	20000158 	.word	0x20000158
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40020800 	.word	0x40020800
 8000a88:	40020400 	.word	0x40020400
 8000a8c:	40020000 	.word	0x40020000
 8000a90:	20003e3c 	.word	0x20003e3c
 8000a94:	40026488 	.word	0x40026488

08000a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <NMI_Handler+0x4>

08000a9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <HardFault_Handler+0x4>

08000aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <MemManage_Handler+0x4>

08000aaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <BusFault_Handler+0x4>

08000ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <UsageFault_Handler+0x4>

08000ab6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae4:	f000 f92e 	bl	8000d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}

08000aec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000af0:	4802      	ldr	r0, [pc, #8]	; (8000afc <OTG_FS_IRQHandler+0x10>)
 8000af2:	f001 f8f1 	bl	8001cd8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200043c8 	.word	0x200043c8

08000b00 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8000b04:	4802      	ldr	r0, [pc, #8]	; (8000b10 <DMA2_Stream5_IRQHandler+0x10>)
 8000b06:	f000 fb79 	bl	80011fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20003e3c 	.word	0x20003e3c

08000b14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <SystemInit+0x20>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b1e:	4a05      	ldr	r2, [pc, #20]	; (8000b34 <SystemInit+0x20>)
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b3c:	480d      	ldr	r0, [pc, #52]	; (8000b74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b3e:	490e      	ldr	r1, [pc, #56]	; (8000b78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b40:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b44:	e002      	b.n	8000b4c <LoopCopyDataInit>

08000b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4a:	3304      	adds	r3, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b50:	d3f9      	bcc.n	8000b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b52:	4a0b      	ldr	r2, [pc, #44]	; (8000b80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b54:	4c0b      	ldr	r4, [pc, #44]	; (8000b84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b58:	e001      	b.n	8000b5e <LoopFillZerobss>

08000b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5c:	3204      	adds	r2, #4

08000b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b60:	d3fb      	bcc.n	8000b5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b62:	f7ff ffd7 	bl	8000b14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b66:	f008 f90d 	bl	8008d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6a:	f7ff fcc7 	bl	80004fc <main>
  bx  lr    
 8000b6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b78:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 8000b7c:	08008e5c 	.word	0x08008e5c
  ldr r2, =_sbss
 8000b80:	2000013c 	.word	0x2000013c
  ldr r4, =_ebss
 8000b84:	200047d0 	.word	0x200047d0

08000b88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <ADC_IRQHandler>

08000b8a <HAL_SAI_TxCpltCallback>:

void TransferComplete_CallBack_FS(void);
void HalfTransfer_CallBack_FS(void);
void Error_CallBack_FS(void);

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
	TransferComplete_CallBack_FS();
 8000b92:	f007 fc5f 	bl	8008454 <TransferComplete_CallBack_FS>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
	HalfTransfer_CallBack_FS();
 8000ba6:	f007 fc5f 	bl	8008468 <HalfTransfer_CallBack_FS>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <AD1938_SPI_Write>:

void AD1938_SPI_Write(uint8_t address, uint8_t data) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	460a      	mov	r2, r1
 8000bbe:	71fb      	strb	r3, [r7, #7]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	71bb      	strb	r3, [r7, #6]
	uint8_t spi1_data[3];

	spi1_data[0] = (0x04 << 1);
 8000bc4:	2308      	movs	r3, #8
 8000bc6:	733b      	strb	r3, [r7, #12]
	spi1_data[1] = address;
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	737b      	strb	r3, [r7, #13]
	spi1_data[2] = data;
 8000bcc:	79bb      	ldrb	r3, [r7, #6]
 8000bce:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(AD1938_CLATCH_GPIO_Port, AD1938_CLATCH_Pin, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2110      	movs	r1, #16
 8000bd4:	4809      	ldr	r0, [pc, #36]	; (8000bfc <AD1938_SPI_Write+0x48>)
 8000bd6:	f000 ff0f 	bl	80019f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &spi1_data, 3, 5000);
 8000bda:	f107 010c 	add.w	r1, r7, #12
 8000bde:	f241 3388 	movw	r3, #5000	; 0x1388
 8000be2:	2203      	movs	r2, #3
 8000be4:	4806      	ldr	r0, [pc, #24]	; (8000c00 <AD1938_SPI_Write+0x4c>)
 8000be6:	f004 f906 	bl	8004df6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(AD1938_CLATCH_GPIO_Port, AD1938_CLATCH_Pin, GPIO_PIN_SET);
 8000bea:	2201      	movs	r2, #1
 8000bec:	2110      	movs	r1, #16
 8000bee:	4803      	ldr	r0, [pc, #12]	; (8000bfc <AD1938_SPI_Write+0x48>)
 8000bf0:	f000 ff02 	bl	80019f8 <HAL_GPIO_WritePin>
}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40020000 	.word	0x40020000
 8000c00:	20003e9c 	.word	0x20003e9c

08000c04 <BSP_AUDIO_Init>:

void BSP_AUDIO_Init() {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	BSP_AUDIO_OUT_SetVolume(180);
 8000c08:	20b4      	movs	r0, #180	; 0xb4
 8000c0a:	f000 f835 	bl	8000c78 <BSP_AUDIO_OUT_SetVolume>

	/* PLL and Clock Control 0 */
	AD1938_SPI_Write(0x0, (1 << 7)); /* Enable: ADC and DAC active */
 8000c0e:	2180      	movs	r1, #128	; 0x80
 8000c10:	2000      	movs	r0, #0
 8000c12:	f7ff ffcf 	bl	8000bb4 <AD1938_SPI_Write>
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <BSP_AUDIO_OUT_Play>:

uint8_t BSP_AUDIO_OUT_Play(uint8_t *pbuf, uint32_t size) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
	HAL_SAI_Transmit_DMA(&hsai_BlockB1, (uint8_t*) pbuf,
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000c2c:	d203      	bcs.n	8000c36 <BSP_AUDIO_OUT_Play+0x1a>
			DMA_MAX(size / AUDIODATA_SIZE));
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	085b      	lsrs	r3, r3, #1
	HAL_SAI_Transmit_DMA(&hsai_BlockB1, (uint8_t*) pbuf,
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	e001      	b.n	8000c3a <BSP_AUDIO_OUT_Play+0x1e>
 8000c36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	6879      	ldr	r1, [r7, #4]
 8000c3e:	4804      	ldr	r0, [pc, #16]	; (8000c50 <BSP_AUDIO_OUT_Play+0x34>)
 8000c40:	f003 fd22 	bl	8004688 <HAL_SAI_Transmit_DMA>
	return 0;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20003db4 	.word	0x20003db4

08000c54 <BSP_AUDIO_OUT_ChangeBuffer>:

void BSP_AUDIO_OUT_ChangeBuffer(uint8_t *pbuf, uint32_t size) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
	HAL_SAI_Transmit_DMA(&hsai_BlockB1, (uint8_t*) pbuf, size);
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	461a      	mov	r2, r3
 8000c64:	6879      	ldr	r1, [r7, #4]
 8000c66:	4803      	ldr	r0, [pc, #12]	; (8000c74 <BSP_AUDIO_OUT_ChangeBuffer+0x20>)
 8000c68:	f003 fd0e 	bl	8004688 <HAL_SAI_Transmit_DMA>
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20003db4 	.word	0x20003db4

08000c78 <BSP_AUDIO_OUT_SetVolume>:

void BSP_AUDIO_OUT_SetVolume(uint8_t vol) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
	AD1938_SPI_Write(0x6, vol); /* DAC L1 volume control */
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	4619      	mov	r1, r3
 8000c86:	2006      	movs	r0, #6
 8000c88:	f7ff ff94 	bl	8000bb4 <AD1938_SPI_Write>
	AD1938_SPI_Write(0x7, vol); /* DAC R1 volume control */
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	2007      	movs	r0, #7
 8000c92:	f7ff ff8f 	bl	8000bb4 <AD1938_SPI_Write>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	; (8000ce0 <HAL_Init+0x40>)
 8000caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_Init+0x40>)
 8000cb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <HAL_Init+0x40>)
 8000cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc8:	2003      	movs	r0, #3
 8000cca:	f000 f94f 	bl	8000f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f000 f808 	bl	8000ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd4:	f7ff fdca 	bl	800086c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023c00 	.word	0x40023c00

08000ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <HAL_InitTick+0x54>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_InitTick+0x58>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 f967 	bl	8000fd6 <HAL_SYSTICK_Config>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e00e      	b.n	8000d30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b0f      	cmp	r3, #15
 8000d16:	d80a      	bhi.n	8000d2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d20:	f000 f92f 	bl	8000f82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d24:	4a06      	ldr	r2, [pc, #24]	; (8000d40 <HAL_InitTick+0x5c>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e000      	b.n	8000d30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	20000004 	.word	0x20000004

08000d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_IncTick+0x20>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_IncTick+0x24>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <HAL_IncTick+0x24>)
 8000d56:	6013      	str	r3, [r2, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000008 	.word	0x20000008
 8000d68:	20003ef4 	.word	0x20003ef4

08000d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <HAL_GetTick+0x14>)
 8000d72:	681b      	ldr	r3, [r3, #0]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20003ef4 	.word	0x20003ef4

08000d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d8c:	f7ff ffee 	bl	8000d6c <HAL_GetTick>
 8000d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d9c:	d005      	beq.n	8000daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <HAL_Delay+0x44>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	461a      	mov	r2, r3
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	4413      	add	r3, r2
 8000da8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000daa:	bf00      	nop
 8000dac:	f7ff ffde 	bl	8000d6c <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d8f7      	bhi.n	8000dac <HAL_Delay+0x28>
  {
  }
}
 8000dbc:	bf00      	nop
 8000dbe:	bf00      	nop
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000008 	.word	0x20000008

08000dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <__NVIC_SetPriorityGrouping+0x44>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de8:	4013      	ands	r3, r2
 8000dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfe:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <__NVIC_SetPriorityGrouping+0x44>)
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	60d3      	str	r3, [r2, #12]
}
 8000e04:	bf00      	nop
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e18:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <__NVIC_GetPriorityGrouping+0x18>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	0a1b      	lsrs	r3, r3, #8
 8000e1e:	f003 0307 	and.w	r3, r3, #7
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	db0b      	blt.n	8000e5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	f003 021f 	and.w	r2, r3, #31
 8000e48:	4907      	ldr	r1, [pc, #28]	; (8000e68 <__NVIC_EnableIRQ+0x38>)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	095b      	lsrs	r3, r3, #5
 8000e50:	2001      	movs	r0, #1
 8000e52:	fa00 f202 	lsl.w	r2, r0, r2
 8000e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000e100 	.word	0xe000e100

08000e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	6039      	str	r1, [r7, #0]
 8000e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	db0a      	blt.n	8000e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	490c      	ldr	r1, [pc, #48]	; (8000eb8 <__NVIC_SetPriority+0x4c>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	0112      	lsls	r2, r2, #4
 8000e8c:	b2d2      	uxtb	r2, r2
 8000e8e:	440b      	add	r3, r1
 8000e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e94:	e00a      	b.n	8000eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4908      	ldr	r1, [pc, #32]	; (8000ebc <__NVIC_SetPriority+0x50>)
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	f003 030f 	and.w	r3, r3, #15
 8000ea2:	3b04      	subs	r3, #4
 8000ea4:	0112      	lsls	r2, r2, #4
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	761a      	strb	r2, [r3, #24]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000e100 	.word	0xe000e100
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	; 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f1c3 0307 	rsb	r3, r3, #7
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	bf28      	it	cs
 8000ede:	2304      	movcs	r3, #4
 8000ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	2b06      	cmp	r3, #6
 8000ee8:	d902      	bls.n	8000ef0 <NVIC_EncodePriority+0x30>
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3b03      	subs	r3, #3
 8000eee:	e000      	b.n	8000ef2 <NVIC_EncodePriority+0x32>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43da      	mvns	r2, r3
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	401a      	ands	r2, r3
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f12:	43d9      	mvns	r1, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	4313      	orrs	r3, r2
         );
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3724      	adds	r7, #36	; 0x24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f38:	d301      	bcc.n	8000f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e00f      	b.n	8000f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <SysTick_Config+0x40>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f46:	210f      	movs	r1, #15
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f4c:	f7ff ff8e 	bl	8000e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <SysTick_Config+0x40>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f56:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <SysTick_Config+0x40>)
 8000f58:	2207      	movs	r2, #7
 8000f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	e000e010 	.word	0xe000e010

08000f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff ff29 	bl	8000dcc <__NVIC_SetPriorityGrouping>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b086      	sub	sp, #24
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4603      	mov	r3, r0
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
 8000f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f94:	f7ff ff3e 	bl	8000e14 <__NVIC_GetPriorityGrouping>
 8000f98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	68b9      	ldr	r1, [r7, #8]
 8000f9e:	6978      	ldr	r0, [r7, #20]
 8000fa0:	f7ff ff8e 	bl	8000ec0 <NVIC_EncodePriority>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000faa:	4611      	mov	r1, r2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff5d 	bl	8000e6c <__NVIC_SetPriority>
}
 8000fb2:	bf00      	nop
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff31 	bl	8000e30 <__NVIC_EnableIRQ>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ffa2 	bl	8000f28 <SysTick_Config>
 8000fe4:	4603      	mov	r3, r0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000ffc:	f7ff feb6 	bl	8000d6c <HAL_GetTick>
 8001000:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d101      	bne.n	800100c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e099      	b.n	8001140 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2202      	movs	r2, #2
 8001010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 0201 	bic.w	r2, r2, #1
 800102a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800102c:	e00f      	b.n	800104e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800102e:	f7ff fe9d 	bl	8000d6c <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b05      	cmp	r3, #5
 800103a:	d908      	bls.n	800104e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2220      	movs	r2, #32
 8001040:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2203      	movs	r2, #3
 8001046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e078      	b.n	8001140 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1e8      	bne.n	800102e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	4b38      	ldr	r3, [pc, #224]	; (8001148 <HAL_DMA_Init+0x158>)
 8001068:	4013      	ands	r3, r2
 800106a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800107a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	691b      	ldr	r3, [r3, #16]
 8001080:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001086:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001092:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800109a:	697a      	ldr	r2, [r7, #20]
 800109c:	4313      	orrs	r3, r2
 800109e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a4:	2b04      	cmp	r3, #4
 80010a6:	d107      	bne.n	80010b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b0:	4313      	orrs	r3, r2
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	f023 0307 	bic.w	r3, r3, #7
 80010ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010de:	2b04      	cmp	r3, #4
 80010e0:	d117      	bne.n	8001112 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00e      	beq.n	8001112 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f000 fa6f 	bl	80015d8 <DMA_CheckFifoParam>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d008      	beq.n	8001112 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2240      	movs	r2, #64	; 0x40
 8001104:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2201      	movs	r2, #1
 800110a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800110e:	2301      	movs	r3, #1
 8001110:	e016      	b.n	8001140 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 fa26 	bl	800156c <DMA_CalcBaseAndBitshift>
 8001120:	4603      	mov	r3, r0
 8001122:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001128:	223f      	movs	r2, #63	; 0x3f
 800112a:	409a      	lsls	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2201      	movs	r2, #1
 800113a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	f010803f 	.word	0xf010803f

0800114c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001162:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800116a:	2b01      	cmp	r3, #1
 800116c:	d101      	bne.n	8001172 <HAL_DMA_Start_IT+0x26>
 800116e:	2302      	movs	r3, #2
 8001170:	e040      	b.n	80011f4 <HAL_DMA_Start_IT+0xa8>
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2201      	movs	r2, #1
 8001176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b01      	cmp	r3, #1
 8001184:	d12f      	bne.n	80011e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2202      	movs	r2, #2
 800118a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2200      	movs	r2, #0
 8001192:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	68b9      	ldr	r1, [r7, #8]
 800119a:	68f8      	ldr	r0, [r7, #12]
 800119c:	f000 f9b8 	bl	8001510 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a4:	223f      	movs	r2, #63	; 0x3f
 80011a6:	409a      	lsls	r2, r3
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f042 0216 	orr.w	r2, r2, #22
 80011ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d007      	beq.n	80011d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f042 0208 	orr.w	r2, r2, #8
 80011d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 0201 	orr.w	r2, r2, #1
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	e005      	b.n	80011f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80011ee:	2302      	movs	r3, #2
 80011f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80011f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001208:	4b92      	ldr	r3, [pc, #584]	; (8001454 <HAL_DMA_IRQHandler+0x258>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a92      	ldr	r2, [pc, #584]	; (8001458 <HAL_DMA_IRQHandler+0x25c>)
 800120e:	fba2 2303 	umull	r2, r3, r2, r3
 8001212:	0a9b      	lsrs	r3, r3, #10
 8001214:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001226:	2208      	movs	r2, #8
 8001228:	409a      	lsls	r2, r3
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4013      	ands	r3, r2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d01a      	beq.n	8001268 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	2b00      	cmp	r3, #0
 800123e:	d013      	beq.n	8001268 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 0204 	bic.w	r2, r2, #4
 800124e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001254:	2208      	movs	r2, #8
 8001256:	409a      	lsls	r2, r3
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001260:	f043 0201 	orr.w	r2, r3, #1
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800126c:	2201      	movs	r2, #1
 800126e:	409a      	lsls	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4013      	ands	r3, r2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d012      	beq.n	800129e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00b      	beq.n	800129e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800128a:	2201      	movs	r2, #1
 800128c:	409a      	lsls	r2, r3
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001296:	f043 0202 	orr.w	r2, r3, #2
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a2:	2204      	movs	r2, #4
 80012a4:	409a      	lsls	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4013      	ands	r3, r2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d012      	beq.n	80012d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00b      	beq.n	80012d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c0:	2204      	movs	r2, #4
 80012c2:	409a      	lsls	r2, r3
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012cc:	f043 0204 	orr.w	r2, r3, #4
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d8:	2210      	movs	r2, #16
 80012da:	409a      	lsls	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4013      	ands	r3, r2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d043      	beq.n	800136c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d03c      	beq.n	800136c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f6:	2210      	movs	r2, #16
 80012f8:	409a      	lsls	r2, r3
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d018      	beq.n	800133e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d108      	bne.n	800132c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	2b00      	cmp	r3, #0
 8001320:	d024      	beq.n	800136c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	4798      	blx	r3
 800132a:	e01f      	b.n	800136c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001330:	2b00      	cmp	r3, #0
 8001332:	d01b      	beq.n	800136c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	4798      	blx	r3
 800133c:	e016      	b.n	800136c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001348:	2b00      	cmp	r3, #0
 800134a:	d107      	bne.n	800135c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 0208 	bic.w	r2, r2, #8
 800135a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	2b00      	cmp	r3, #0
 8001362:	d003      	beq.n	800136c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001370:	2220      	movs	r2, #32
 8001372:	409a      	lsls	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4013      	ands	r3, r2
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 808e 	beq.w	800149a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0310 	and.w	r3, r3, #16
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 8086 	beq.w	800149a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001392:	2220      	movs	r2, #32
 8001394:	409a      	lsls	r2, r3
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b05      	cmp	r3, #5
 80013a4:	d136      	bne.n	8001414 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f022 0216 	bic.w	r2, r2, #22
 80013b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	695a      	ldr	r2, [r3, #20]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d103      	bne.n	80013d6 <HAL_DMA_IRQHandler+0x1da>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d007      	beq.n	80013e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f022 0208 	bic.w	r2, r2, #8
 80013e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ea:	223f      	movs	r2, #63	; 0x3f
 80013ec:	409a      	lsls	r2, r3
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2201      	movs	r2, #1
 80013f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001406:	2b00      	cmp	r3, #0
 8001408:	d07d      	beq.n	8001506 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	4798      	blx	r3
        }
        return;
 8001412:	e078      	b.n	8001506 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d01c      	beq.n	800145c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d108      	bne.n	8001442 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001434:	2b00      	cmp	r3, #0
 8001436:	d030      	beq.n	800149a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	4798      	blx	r3
 8001440:	e02b      	b.n	800149a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001446:	2b00      	cmp	r3, #0
 8001448:	d027      	beq.n	800149a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	4798      	blx	r3
 8001452:	e022      	b.n	800149a <HAL_DMA_IRQHandler+0x29e>
 8001454:	20000000 	.word	0x20000000
 8001458:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001466:	2b00      	cmp	r3, #0
 8001468:	d10f      	bne.n	800148a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0210 	bic.w	r2, r2, #16
 8001478:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2201      	movs	r2, #1
 800147e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d032      	beq.n	8001508 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d022      	beq.n	80014f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2205      	movs	r2, #5
 80014b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f022 0201 	bic.w	r2, r2, #1
 80014c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	3301      	adds	r3, #1
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d307      	bcc.n	80014e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f2      	bne.n	80014c6 <HAL_DMA_IRQHandler+0x2ca>
 80014e0:	e000      	b.n	80014e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80014e2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d005      	beq.n	8001508 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	4798      	blx	r3
 8001504:	e000      	b.n	8001508 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001506:	bf00      	nop
    }
  }
}
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop

08001510 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
 800151c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800152c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b40      	cmp	r3, #64	; 0x40
 800153c:	d108      	bne.n	8001550 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800154e:	e007      	b.n	8001560 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68ba      	ldr	r2, [r7, #8]
 8001556:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	60da      	str	r2, [r3, #12]
}
 8001560:	bf00      	nop
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	3b10      	subs	r3, #16
 800157c:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <DMA_CalcBaseAndBitshift+0x64>)
 800157e:	fba2 2303 	umull	r2, r3, r2, r3
 8001582:	091b      	lsrs	r3, r3, #4
 8001584:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001586:	4a13      	ldr	r2, [pc, #76]	; (80015d4 <DMA_CalcBaseAndBitshift+0x68>)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4413      	add	r3, r2
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2b03      	cmp	r3, #3
 8001598:	d909      	bls.n	80015ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80015a2:	f023 0303 	bic.w	r3, r3, #3
 80015a6:	1d1a      	adds	r2, r3, #4
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	659a      	str	r2, [r3, #88]	; 0x58
 80015ac:	e007      	b.n	80015be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80015b6:	f023 0303 	bic.w	r3, r3, #3
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	aaaaaaab 	.word	0xaaaaaaab
 80015d4:	08008e44 	.word	0x08008e44

080015d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d11f      	bne.n	8001632 <DMA_CheckFifoParam+0x5a>
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	2b03      	cmp	r3, #3
 80015f6:	d856      	bhi.n	80016a6 <DMA_CheckFifoParam+0xce>
 80015f8:	a201      	add	r2, pc, #4	; (adr r2, 8001600 <DMA_CheckFifoParam+0x28>)
 80015fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015fe:	bf00      	nop
 8001600:	08001611 	.word	0x08001611
 8001604:	08001623 	.word	0x08001623
 8001608:	08001611 	.word	0x08001611
 800160c:	080016a7 	.word	0x080016a7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001614:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d046      	beq.n	80016aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001620:	e043      	b.n	80016aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001626:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800162a:	d140      	bne.n	80016ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001630:	e03d      	b.n	80016ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800163a:	d121      	bne.n	8001680 <DMA_CheckFifoParam+0xa8>
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	2b03      	cmp	r3, #3
 8001640:	d837      	bhi.n	80016b2 <DMA_CheckFifoParam+0xda>
 8001642:	a201      	add	r2, pc, #4	; (adr r2, 8001648 <DMA_CheckFifoParam+0x70>)
 8001644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001648:	08001659 	.word	0x08001659
 800164c:	0800165f 	.word	0x0800165f
 8001650:	08001659 	.word	0x08001659
 8001654:	08001671 	.word	0x08001671
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	73fb      	strb	r3, [r7, #15]
      break;
 800165c:	e030      	b.n	80016c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001662:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d025      	beq.n	80016b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800166e:	e022      	b.n	80016b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001674:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001678:	d11f      	bne.n	80016ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800167e:	e01c      	b.n	80016ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	2b02      	cmp	r3, #2
 8001684:	d903      	bls.n	800168e <DMA_CheckFifoParam+0xb6>
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	2b03      	cmp	r3, #3
 800168a:	d003      	beq.n	8001694 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800168c:	e018      	b.n	80016c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	73fb      	strb	r3, [r7, #15]
      break;
 8001692:	e015      	b.n	80016c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001698:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d00e      	beq.n	80016be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	73fb      	strb	r3, [r7, #15]
      break;
 80016a4:	e00b      	b.n	80016be <DMA_CheckFifoParam+0xe6>
      break;
 80016a6:	bf00      	nop
 80016a8:	e00a      	b.n	80016c0 <DMA_CheckFifoParam+0xe8>
      break;
 80016aa:	bf00      	nop
 80016ac:	e008      	b.n	80016c0 <DMA_CheckFifoParam+0xe8>
      break;
 80016ae:	bf00      	nop
 80016b0:	e006      	b.n	80016c0 <DMA_CheckFifoParam+0xe8>
      break;
 80016b2:	bf00      	nop
 80016b4:	e004      	b.n	80016c0 <DMA_CheckFifoParam+0xe8>
      break;
 80016b6:	bf00      	nop
 80016b8:	e002      	b.n	80016c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80016ba:	bf00      	nop
 80016bc:	e000      	b.n	80016c0 <DMA_CheckFifoParam+0xe8>
      break;
 80016be:	bf00      	nop
    }
  } 
  
  return status; 
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop

080016d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b089      	sub	sp, #36	; 0x24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
 80016ea:	e165      	b.n	80019b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016ec:	2201      	movs	r2, #1
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	429a      	cmp	r2, r3
 8001706:	f040 8154 	bne.w	80019b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	2b01      	cmp	r3, #1
 8001714:	d005      	beq.n	8001722 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800171e:	2b02      	cmp	r3, #2
 8001720:	d130      	bne.n	8001784 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	2203      	movs	r2, #3
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4013      	ands	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	68da      	ldr	r2, [r3, #12]
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4313      	orrs	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001758:	2201      	movs	r2, #1
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	091b      	lsrs	r3, r3, #4
 800176e:	f003 0201 	and.w	r2, r3, #1
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4313      	orrs	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 0303 	and.w	r3, r3, #3
 800178c:	2b03      	cmp	r3, #3
 800178e:	d017      	beq.n	80017c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	2203      	movs	r2, #3
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d123      	bne.n	8001814 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	08da      	lsrs	r2, r3, #3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3208      	adds	r2, #8
 80017d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	f003 0307 	and.w	r3, r3, #7
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	220f      	movs	r2, #15
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	691a      	ldr	r2, [r3, #16]
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	08da      	lsrs	r2, r3, #3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3208      	adds	r2, #8
 800180e:	69b9      	ldr	r1, [r7, #24]
 8001810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	2203      	movs	r2, #3
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 0203 	and.w	r2, r3, #3
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 80ae 	beq.w	80019b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	4b5d      	ldr	r3, [pc, #372]	; (80019d0 <HAL_GPIO_Init+0x300>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	4a5c      	ldr	r2, [pc, #368]	; (80019d0 <HAL_GPIO_Init+0x300>)
 8001860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001864:	6453      	str	r3, [r2, #68]	; 0x44
 8001866:	4b5a      	ldr	r3, [pc, #360]	; (80019d0 <HAL_GPIO_Init+0x300>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001872:	4a58      	ldr	r2, [pc, #352]	; (80019d4 <HAL_GPIO_Init+0x304>)
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	3302      	adds	r3, #2
 800187a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	220f      	movs	r2, #15
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4013      	ands	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a4f      	ldr	r2, [pc, #316]	; (80019d8 <HAL_GPIO_Init+0x308>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d025      	beq.n	80018ea <HAL_GPIO_Init+0x21a>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a4e      	ldr	r2, [pc, #312]	; (80019dc <HAL_GPIO_Init+0x30c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d01f      	beq.n	80018e6 <HAL_GPIO_Init+0x216>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a4d      	ldr	r2, [pc, #308]	; (80019e0 <HAL_GPIO_Init+0x310>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d019      	beq.n	80018e2 <HAL_GPIO_Init+0x212>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a4c      	ldr	r2, [pc, #304]	; (80019e4 <HAL_GPIO_Init+0x314>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d013      	beq.n	80018de <HAL_GPIO_Init+0x20e>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a4b      	ldr	r2, [pc, #300]	; (80019e8 <HAL_GPIO_Init+0x318>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d00d      	beq.n	80018da <HAL_GPIO_Init+0x20a>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a4a      	ldr	r2, [pc, #296]	; (80019ec <HAL_GPIO_Init+0x31c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d007      	beq.n	80018d6 <HAL_GPIO_Init+0x206>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a49      	ldr	r2, [pc, #292]	; (80019f0 <HAL_GPIO_Init+0x320>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d101      	bne.n	80018d2 <HAL_GPIO_Init+0x202>
 80018ce:	2306      	movs	r3, #6
 80018d0:	e00c      	b.n	80018ec <HAL_GPIO_Init+0x21c>
 80018d2:	2307      	movs	r3, #7
 80018d4:	e00a      	b.n	80018ec <HAL_GPIO_Init+0x21c>
 80018d6:	2305      	movs	r3, #5
 80018d8:	e008      	b.n	80018ec <HAL_GPIO_Init+0x21c>
 80018da:	2304      	movs	r3, #4
 80018dc:	e006      	b.n	80018ec <HAL_GPIO_Init+0x21c>
 80018de:	2303      	movs	r3, #3
 80018e0:	e004      	b.n	80018ec <HAL_GPIO_Init+0x21c>
 80018e2:	2302      	movs	r3, #2
 80018e4:	e002      	b.n	80018ec <HAL_GPIO_Init+0x21c>
 80018e6:	2301      	movs	r3, #1
 80018e8:	e000      	b.n	80018ec <HAL_GPIO_Init+0x21c>
 80018ea:	2300      	movs	r3, #0
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	f002 0203 	and.w	r2, r2, #3
 80018f2:	0092      	lsls	r2, r2, #2
 80018f4:	4093      	lsls	r3, r2
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018fc:	4935      	ldr	r1, [pc, #212]	; (80019d4 <HAL_GPIO_Init+0x304>)
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	089b      	lsrs	r3, r3, #2
 8001902:	3302      	adds	r3, #2
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800190a:	4b3a      	ldr	r3, [pc, #232]	; (80019f4 <HAL_GPIO_Init+0x324>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	43db      	mvns	r3, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4013      	ands	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800192e:	4a31      	ldr	r2, [pc, #196]	; (80019f4 <HAL_GPIO_Init+0x324>)
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001934:	4b2f      	ldr	r3, [pc, #188]	; (80019f4 <HAL_GPIO_Init+0x324>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001958:	4a26      	ldr	r2, [pc, #152]	; (80019f4 <HAL_GPIO_Init+0x324>)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800195e:	4b25      	ldr	r3, [pc, #148]	; (80019f4 <HAL_GPIO_Init+0x324>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001982:	4a1c      	ldr	r2, [pc, #112]	; (80019f4 <HAL_GPIO_Init+0x324>)
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001988:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <HAL_GPIO_Init+0x324>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019ac:	4a11      	ldr	r2, [pc, #68]	; (80019f4 <HAL_GPIO_Init+0x324>)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3301      	adds	r3, #1
 80019b6:	61fb      	str	r3, [r7, #28]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	2b0f      	cmp	r3, #15
 80019bc:	f67f ae96 	bls.w	80016ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	3724      	adds	r7, #36	; 0x24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40013800 	.word	0x40013800
 80019d8:	40020000 	.word	0x40020000
 80019dc:	40020400 	.word	0x40020400
 80019e0:	40020800 	.word	0x40020800
 80019e4:	40020c00 	.word	0x40020c00
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40021400 	.word	0x40021400
 80019f0:	40021800 	.word	0x40021800
 80019f4:	40013c00 	.word	0x40013c00

080019f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	807b      	strh	r3, [r7, #2]
 8001a04:	4613      	mov	r3, r2
 8001a06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a08:	787b      	ldrb	r3, [r7, #1]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a0e:	887a      	ldrh	r2, [r7, #2]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a14:	e003      	b.n	8001a1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a16:	887b      	ldrh	r3, [r7, #2]
 8001a18:	041a      	lsls	r2, r3, #16
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	619a      	str	r2, [r3, #24]
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2c:	b08f      	sub	sp, #60	; 0x3c
 8001a2e:	af0a      	add	r7, sp, #40	; 0x28
 8001a30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e116      	b.n	8001c6a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d106      	bne.n	8001a5c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f006 fe32 	bl	80086c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2203      	movs	r2, #3
 8001a60:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d102      	bne.n	8001a76 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f003 fcd7 	bl	800542e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	603b      	str	r3, [r7, #0]
 8001a86:	687e      	ldr	r6, [r7, #4]
 8001a88:	466d      	mov	r5, sp
 8001a8a:	f106 0410 	add.w	r4, r6, #16
 8001a8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a9e:	1d33      	adds	r3, r6, #4
 8001aa0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aa2:	6838      	ldr	r0, [r7, #0]
 8001aa4:	f003 fbae 	bl	8005204 <USB_CoreInit>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d005      	beq.n	8001aba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e0d7      	b.n	8001c6a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f003 fcc5 	bl	8005450 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	73fb      	strb	r3, [r7, #15]
 8001aca:	e04a      	b.n	8001b62 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001acc:	7bfa      	ldrb	r2, [r7, #15]
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	1a9b      	subs	r3, r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	440b      	add	r3, r1
 8001ada:	333d      	adds	r3, #61	; 0x3d
 8001adc:	2201      	movs	r2, #1
 8001ade:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ae0:	7bfa      	ldrb	r2, [r7, #15]
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	1a9b      	subs	r3, r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	333c      	adds	r3, #60	; 0x3c
 8001af0:	7bfa      	ldrb	r2, [r7, #15]
 8001af2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001af4:	7bfa      	ldrb	r2, [r7, #15]
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
 8001af8:	b298      	uxth	r0, r3
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	4613      	mov	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	1a9b      	subs	r3, r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	440b      	add	r3, r1
 8001b06:	3342      	adds	r3, #66	; 0x42
 8001b08:	4602      	mov	r2, r0
 8001b0a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b0c:	7bfa      	ldrb	r2, [r7, #15]
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	4613      	mov	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	1a9b      	subs	r3, r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	440b      	add	r3, r1
 8001b1a:	333f      	adds	r3, #63	; 0x3f
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b20:	7bfa      	ldrb	r2, [r7, #15]
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	1a9b      	subs	r3, r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	3344      	adds	r3, #68	; 0x44
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b34:	7bfa      	ldrb	r2, [r7, #15]
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	1a9b      	subs	r3, r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	440b      	add	r3, r1
 8001b42:	3348      	adds	r3, #72	; 0x48
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b48:	7bfa      	ldrb	r2, [r7, #15]
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	1a9b      	subs	r3, r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	3350      	adds	r3, #80	; 0x50
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	73fb      	strb	r3, [r7, #15]
 8001b62:	7bfa      	ldrb	r2, [r7, #15]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d3af      	bcc.n	8001acc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	73fb      	strb	r3, [r7, #15]
 8001b70:	e044      	b.n	8001bfc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b72:	7bfa      	ldrb	r2, [r7, #15]
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	4613      	mov	r3, r2
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	1a9b      	subs	r3, r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	440b      	add	r3, r1
 8001b80:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b88:	7bfa      	ldrb	r2, [r7, #15]
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	1a9b      	subs	r3, r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001b9a:	7bfa      	ldrb	r2, [r7, #15]
 8001b9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	1a9b      	subs	r3, r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	440b      	add	r3, r1
 8001bac:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001bb4:	7bfa      	ldrb	r2, [r7, #15]
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	1a9b      	subs	r3, r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001bca:	7bfa      	ldrb	r2, [r7, #15]
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	1a9b      	subs	r3, r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001be0:	7bfa      	ldrb	r2, [r7, #15]
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	4613      	mov	r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	1a9b      	subs	r3, r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	73fb      	strb	r3, [r7, #15]
 8001bfc:	7bfa      	ldrb	r2, [r7, #15]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d3b5      	bcc.n	8001b72 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	603b      	str	r3, [r7, #0]
 8001c0c:	687e      	ldr	r6, [r7, #4]
 8001c0e:	466d      	mov	r5, sp
 8001c10:	f106 0410 	add.w	r4, r6, #16
 8001c14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c1c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c20:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c24:	1d33      	adds	r3, r6, #4
 8001c26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c28:	6838      	ldr	r0, [r7, #0]
 8001c2a:	f003 fc5d 	bl	80054e8 <USB_DevInit>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2202      	movs	r2, #2
 8001c38:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e014      	b.n	8001c6a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d102      	bne.n	8001c5e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f001 f891 	bl	8002d80 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f004 fccc 	bl	8006600 <USB_DevDisconnect>

  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c72 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b084      	sub	sp, #16
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d101      	bne.n	8001c8e <HAL_PCD_Start+0x1c>
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e020      	b.n	8001cd0 <HAL_PCD_Start+0x5e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d109      	bne.n	8001cb2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d005      	beq.n	8001cb2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001caa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f003 fba8 	bl	800540c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f004 fc7c 	bl	80065be <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001cd8:	b590      	push	{r4, r7, lr}
 8001cda:	b08d      	sub	sp, #52	; 0x34
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f004 fd3a 	bl	8006768 <USB_GetMode>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f040 83ca 	bne.w	8002490 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f004 fc9e 	bl	8006642 <USB_ReadInterrupts>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 83c0 	beq.w	800248e <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f004 fc95 	bl	8006642 <USB_ReadInterrupts>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d107      	bne.n	8001d32 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	695a      	ldr	r2, [r3, #20]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f002 0202 	and.w	r2, r2, #2
 8001d30:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f004 fc83 	bl	8006642 <USB_ReadInterrupts>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	f003 0310 	and.w	r3, r3, #16
 8001d42:	2b10      	cmp	r3, #16
 8001d44:	d161      	bne.n	8001e0a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	699a      	ldr	r2, [r3, #24]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0210 	bic.w	r2, r2, #16
 8001d54:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001d56:	6a3b      	ldr	r3, [r7, #32]
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	f003 020f 	and.w	r2, r3, #15
 8001d62:	4613      	mov	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	1a9b      	subs	r3, r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	3304      	adds	r3, #4
 8001d74:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	0c5b      	lsrs	r3, r3, #17
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d124      	bne.n	8001dcc <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d035      	beq.n	8001dfa <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	091b      	lsrs	r3, r3, #4
 8001d96:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	461a      	mov	r2, r3
 8001da0:	6a38      	ldr	r0, [r7, #32]
 8001da2:	f004 faba 	bl	800631a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	091b      	lsrs	r3, r3, #4
 8001dae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001db2:	441a      	add	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	699a      	ldr	r2, [r3, #24]
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	091b      	lsrs	r3, r3, #4
 8001dc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dc4:	441a      	add	r2, r3
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	619a      	str	r2, [r3, #24]
 8001dca:	e016      	b.n	8001dfa <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	0c5b      	lsrs	r3, r3, #17
 8001dd0:	f003 030f 	and.w	r3, r3, #15
 8001dd4:	2b06      	cmp	r3, #6
 8001dd6:	d110      	bne.n	8001dfa <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001dde:	2208      	movs	r2, #8
 8001de0:	4619      	mov	r1, r3
 8001de2:	6a38      	ldr	r0, [r7, #32]
 8001de4:	f004 fa99 	bl	800631a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	699a      	ldr	r2, [r3, #24]
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	091b      	lsrs	r3, r3, #4
 8001df0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001df4:	441a      	add	r2, r3
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	699a      	ldr	r2, [r3, #24]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f042 0210 	orr.w	r2, r2, #16
 8001e08:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f004 fc17 	bl	8006642 <USB_ReadInterrupts>
 8001e14:	4603      	mov	r3, r0
 8001e16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e1a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001e1e:	d16e      	bne.n	8001efe <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f004 fc1d 	bl	8006668 <USB_ReadDevAllOutEpInterrupt>
 8001e2e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001e30:	e062      	b.n	8001ef8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d057      	beq.n	8001eec <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	4611      	mov	r1, r2
 8001e46:	4618      	mov	r0, r3
 8001e48:	f004 fc42 	bl	80066d0 <USB_ReadDevOutEPInterrupt>
 8001e4c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00c      	beq.n	8001e72 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	015a      	lsls	r2, r3, #5
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	4413      	add	r3, r2
 8001e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e64:	461a      	mov	r2, r3
 8001e66:	2301      	movs	r3, #1
 8001e68:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001e6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 fddd 	bl	8002a2c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00c      	beq.n	8001e96 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	015a      	lsls	r2, r3, #5
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	4413      	add	r3, r2
 8001e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e88:	461a      	mov	r2, r3
 8001e8a:	2308      	movs	r3, #8
 8001e8c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001e8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 fed7 	bl	8002c44 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	f003 0310 	and.w	r3, r3, #16
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d008      	beq.n	8001eb2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	015a      	lsls	r2, r3, #5
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eac:	461a      	mov	r2, r3
 8001eae:	2310      	movs	r3, #16
 8001eb0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	f003 0320 	and.w	r3, r3, #32
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d008      	beq.n	8001ece <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	015a      	lsls	r2, r3, #5
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ec8:	461a      	mov	r2, r3
 8001eca:	2320      	movs	r3, #32
 8001ecc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d009      	beq.n	8001eec <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	015a      	lsls	r2, r3, #5
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	4413      	add	r3, r2
 8001ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eea:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	3301      	adds	r3, #1
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef4:	085b      	lsrs	r3, r3, #1
 8001ef6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d199      	bne.n	8001e32 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f004 fb9d 	bl	8006642 <USB_ReadInterrupts>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f12:	f040 80c0 	bne.w	8002096 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f004 fbbe 	bl	800669c <USB_ReadDevAllInEpInterrupt>
 8001f20:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001f26:	e0b2      	b.n	800208e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 80a7 	beq.w	8002082 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	4611      	mov	r1, r2
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f004 fbe4 	bl	800670c <USB_ReadDevInEPInterrupt>
 8001f44:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d057      	beq.n	8002000 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	2201      	movs	r2, #1
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	69f9      	ldr	r1, [r7, #28]
 8001f6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f70:	4013      	ands	r3, r2
 8001f72:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	015a      	lsls	r2, r3, #5
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f80:	461a      	mov	r2, r3
 8001f82:	2301      	movs	r3, #1
 8001f84:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d132      	bne.n	8001ff4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f92:	4613      	mov	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	1a9b      	subs	r3, r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	3348      	adds	r3, #72	; 0x48
 8001f9e:	6819      	ldr	r1, [r3, #0]
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	1a9b      	subs	r3, r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4403      	add	r3, r0
 8001fae:	3344      	adds	r3, #68	; 0x44
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4419      	add	r1, r3
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb8:	4613      	mov	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	1a9b      	subs	r3, r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4403      	add	r3, r0
 8001fc2:	3348      	adds	r3, #72	; 0x48
 8001fc4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d113      	bne.n	8001ff4 <HAL_PCD_IRQHandler+0x31c>
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	1a9b      	subs	r3, r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	3350      	adds	r3, #80	; 0x50
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d108      	bne.n	8001ff4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6818      	ldr	r0, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001fec:	461a      	mov	r2, r3
 8001fee:	2101      	movs	r1, #1
 8001ff0:	f004 fbec 	bl	80067cc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f006 fbe1 	bl	80087c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d008      	beq.n	800201c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	015a      	lsls	r2, r3, #5
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	4413      	add	r3, r2
 8002012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002016:	461a      	mov	r2, r3
 8002018:	2308      	movs	r3, #8
 800201a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	2b00      	cmp	r3, #0
 8002024:	d008      	beq.n	8002038 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	015a      	lsls	r2, r3, #5
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	4413      	add	r3, r2
 800202e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002032:	461a      	mov	r2, r3
 8002034:	2310      	movs	r3, #16
 8002036:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203e:	2b00      	cmp	r3, #0
 8002040:	d008      	beq.n	8002054 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	015a      	lsls	r2, r3, #5
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	4413      	add	r3, r2
 800204a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800204e:	461a      	mov	r2, r3
 8002050:	2340      	movs	r3, #64	; 0x40
 8002052:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d008      	beq.n	8002070 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	015a      	lsls	r2, r3, #5
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	4413      	add	r3, r2
 8002066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800206a:	461a      	mov	r2, r3
 800206c:	2302      	movs	r3, #2
 800206e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800207a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 fc48 	bl	8002912 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	3301      	adds	r3, #1
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208a:	085b      	lsrs	r3, r3, #1
 800208c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800208e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002090:	2b00      	cmp	r3, #0
 8002092:	f47f af49 	bne.w	8001f28 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f004 fad1 	bl	8006642 <USB_ReadInterrupts>
 80020a0:	4603      	mov	r3, r0
 80020a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80020a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020aa:	d122      	bne.n	80020f2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	69fa      	ldr	r2, [r7, #28]
 80020b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020ba:	f023 0301 	bic.w	r3, r3, #1
 80020be:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d108      	bne.n	80020dc <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80020d2:	2100      	movs	r1, #0
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f006 fdc3 	bl	8008c60 <HAL_PCDEx_LPM_Callback>
 80020da:	e002      	b.n	80020e2 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f006 fbe7 	bl	80088b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	695a      	ldr	r2, [r3, #20]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80020f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f004 faa3 	bl	8006642 <USB_ReadInterrupts>
 80020fc:	4603      	mov	r3, r0
 80020fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002102:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002106:	d112      	bne.n	800212e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b01      	cmp	r3, #1
 8002116:	d102      	bne.n	800211e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f006 fba3 	bl	8008864 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	695a      	ldr	r2, [r3, #20]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800212c:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f004 fa85 	bl	8006642 <USB_ReadInterrupts>
 8002138:	4603      	mov	r3, r0
 800213a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800213e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002142:	d121      	bne.n	8002188 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695a      	ldr	r2, [r3, #20]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002152:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800215a:	2b00      	cmp	r3, #0
 800215c:	d111      	bne.n	8002182 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216c:	089b      	lsrs	r3, r3, #2
 800216e:	f003 020f 	and.w	r2, r3, #15
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002178:	2101      	movs	r1, #1
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f006 fd70 	bl	8008c60 <HAL_PCDEx_LPM_Callback>
 8002180:	e002      	b.n	8002188 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f006 fb6e 	bl	8008864 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f004 fa58 	bl	8006642 <USB_ReadInterrupts>
 8002192:	4603      	mov	r3, r0
 8002194:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800219c:	f040 80c7 	bne.w	800232e <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	69fa      	ldr	r2, [r7, #28]
 80021aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021ae:	f023 0301 	bic.w	r3, r3, #1
 80021b2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2110      	movs	r1, #16
 80021ba:	4618      	mov	r0, r3
 80021bc:	f003 faf2 	bl	80057a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c0:	2300      	movs	r3, #0
 80021c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021c4:	e056      	b.n	8002274 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80021c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c8:	015a      	lsls	r2, r3, #5
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	4413      	add	r3, r2
 80021ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021d2:	461a      	mov	r2, r3
 80021d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80021d8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80021da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ea:	0151      	lsls	r1, r2, #5
 80021ec:	69fa      	ldr	r2, [r7, #28]
 80021ee:	440a      	add	r2, r1
 80021f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80021f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80021f8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80021fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fc:	015a      	lsls	r2, r3, #5
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	4413      	add	r3, r2
 8002202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800220a:	0151      	lsls	r1, r2, #5
 800220c:	69fa      	ldr	r2, [r7, #28]
 800220e:	440a      	add	r2, r1
 8002210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002214:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002218:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800221a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221c:	015a      	lsls	r2, r3, #5
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	4413      	add	r3, r2
 8002222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002226:	461a      	mov	r2, r3
 8002228:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800222c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800222e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002230:	015a      	lsls	r2, r3, #5
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	4413      	add	r3, r2
 8002236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800223e:	0151      	lsls	r1, r2, #5
 8002240:	69fa      	ldr	r2, [r7, #28]
 8002242:	440a      	add	r2, r1
 8002244:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002248:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800224c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800224e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002250:	015a      	lsls	r2, r3, #5
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	4413      	add	r3, r2
 8002256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800225e:	0151      	lsls	r1, r2, #5
 8002260:	69fa      	ldr	r2, [r7, #28]
 8002262:	440a      	add	r2, r1
 8002264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002268:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800226c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800226e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002270:	3301      	adds	r3, #1
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800227a:	429a      	cmp	r2, r3
 800227c:	d3a3      	bcc.n	80021c6 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	69fa      	ldr	r2, [r7, #28]
 8002288:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800228c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002290:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	2b00      	cmp	r3, #0
 8002298:	d016      	beq.n	80022c8 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022a4:	69fa      	ldr	r2, [r7, #28]
 80022a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022aa:	f043 030b 	orr.w	r3, r3, #11
 80022ae:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	69fa      	ldr	r2, [r7, #28]
 80022bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022c0:	f043 030b 	orr.w	r3, r3, #11
 80022c4:	6453      	str	r3, [r2, #68]	; 0x44
 80022c6:	e015      	b.n	80022f4 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	69fa      	ldr	r2, [r7, #28]
 80022d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022da:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80022de:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	69fa      	ldr	r2, [r7, #28]
 80022ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022ee:	f043 030b 	orr.w	r3, r3, #11
 80022f2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002302:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002306:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6818      	ldr	r0, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002318:	461a      	mov	r2, r3
 800231a:	f004 fa57 	bl	80067cc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	695a      	ldr	r2, [r3, #20]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800232c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f004 f985 	bl	8006642 <USB_ReadInterrupts>
 8002338:	4603      	mov	r3, r0
 800233a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800233e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002342:	d124      	bne.n	800238e <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f004 fa1b 	bl	8006784 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f003 fa83 	bl	800585e <USB_GetDevSpeed>
 8002358:	4603      	mov	r3, r0
 800235a:	461a      	mov	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681c      	ldr	r4, [r3, #0]
 8002364:	f000 fe66 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 8002368:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800236e:	b2db      	uxtb	r3, r3
 8002370:	461a      	mov	r2, r3
 8002372:	4620      	mov	r0, r4
 8002374:	f002 ffa8 	bl	80052c8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f006 fa4a 	bl	8008812 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	695a      	ldr	r2, [r3, #20]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800238c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f004 f955 	bl	8006642 <USB_ReadInterrupts>
 8002398:	4603      	mov	r3, r0
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	2b08      	cmp	r3, #8
 80023a0:	d10a      	bne.n	80023b8 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f006 fa27 	bl	80087f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	695a      	ldr	r2, [r3, #20]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f002 0208 	and.w	r2, r2, #8
 80023b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f004 f940 	bl	8006642 <USB_ReadInterrupts>
 80023c2:	4603      	mov	r3, r0
 80023c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023cc:	d10f      	bne.n	80023ee <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	4619      	mov	r1, r3
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f006 fa89 	bl	80088f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	695a      	ldr	r2, [r3, #20]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80023ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f004 f925 	bl	8006642 <USB_ReadInterrupts>
 80023f8:	4603      	mov	r3, r0
 80023fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002402:	d10f      	bne.n	8002424 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	b2db      	uxtb	r3, r3
 800240c:	4619      	mov	r1, r3
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f006 fa5c 	bl	80088cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	695a      	ldr	r2, [r3, #20]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002422:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f004 f90a 	bl	8006642 <USB_ReadInterrupts>
 800242e:	4603      	mov	r3, r0
 8002430:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002438:	d10a      	bne.n	8002450 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f006 fa6a 	bl	8008914 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695a      	ldr	r2, [r3, #20]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800244e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f004 f8f4 	bl	8006642 <USB_ReadInterrupts>
 800245a:	4603      	mov	r3, r0
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b04      	cmp	r3, #4
 8002462:	d115      	bne.n	8002490 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	f003 0304 	and.w	r3, r3, #4
 8002472:	2b00      	cmp	r3, #0
 8002474:	d002      	beq.n	800247c <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f006 fa5a 	bl	8008930 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6859      	ldr	r1, [r3, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	430a      	orrs	r2, r1
 800248a:	605a      	str	r2, [r3, #4]
 800248c:	e000      	b.n	8002490 <HAL_PCD_IRQHandler+0x7b8>
      return;
 800248e:	bf00      	nop
    }
  }
}
 8002490:	3734      	adds	r7, #52	; 0x34
 8002492:	46bd      	mov	sp, r7
 8002494:	bd90      	pop	{r4, r7, pc}

08002496 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	460b      	mov	r3, r1
 80024a0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_PCD_SetAddress+0x1a>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e013      	b.n	80024d8 <HAL_PCD_SetAddress+0x42>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	78fa      	ldrb	r2, [r7, #3]
 80024bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	78fa      	ldrb	r2, [r7, #3]
 80024c6:	4611      	mov	r1, r2
 80024c8:	4618      	mov	r0, r3
 80024ca:	f004 f852 	bl	8006572 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	4608      	mov	r0, r1
 80024ea:	4611      	mov	r1, r2
 80024ec:	461a      	mov	r2, r3
 80024ee:	4603      	mov	r3, r0
 80024f0:	70fb      	strb	r3, [r7, #3]
 80024f2:	460b      	mov	r3, r1
 80024f4:	803b      	strh	r3, [r7, #0]
 80024f6:	4613      	mov	r3, r2
 80024f8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002502:	2b00      	cmp	r3, #0
 8002504:	da0f      	bge.n	8002526 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002506:	78fb      	ldrb	r3, [r7, #3]
 8002508:	f003 020f 	and.w	r2, r3, #15
 800250c:	4613      	mov	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	3338      	adds	r3, #56	; 0x38
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	4413      	add	r3, r2
 800251a:	3304      	adds	r3, #4
 800251c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2201      	movs	r2, #1
 8002522:	705a      	strb	r2, [r3, #1]
 8002524:	e00f      	b.n	8002546 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002526:	78fb      	ldrb	r3, [r7, #3]
 8002528:	f003 020f 	and.w	r2, r3, #15
 800252c:	4613      	mov	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	4413      	add	r3, r2
 800253c:	3304      	adds	r3, #4
 800253e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002546:	78fb      	ldrb	r3, [r7, #3]
 8002548:	f003 030f 	and.w	r3, r3, #15
 800254c:	b2da      	uxtb	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002552:	883a      	ldrh	r2, [r7, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	78ba      	ldrb	r2, [r7, #2]
 800255c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	785b      	ldrb	r3, [r3, #1]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d004      	beq.n	8002570 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002570:	78bb      	ldrb	r3, [r7, #2]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d102      	bne.n	800257c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002582:	2b01      	cmp	r3, #1
 8002584:	d101      	bne.n	800258a <HAL_PCD_EP_Open+0xaa>
 8002586:	2302      	movs	r3, #2
 8002588:	e00e      	b.n	80025a8 <HAL_PCD_EP_Open+0xc8>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68f9      	ldr	r1, [r7, #12]
 8002598:	4618      	mov	r0, r3
 800259a:	f003 f985 	bl	80058a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80025a6:	7afb      	ldrb	r3, [r7, #11]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	da0f      	bge.n	80025e4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025c4:	78fb      	ldrb	r3, [r7, #3]
 80025c6:	f003 020f 	and.w	r2, r3, #15
 80025ca:	4613      	mov	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	1a9b      	subs	r3, r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	3338      	adds	r3, #56	; 0x38
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	4413      	add	r3, r2
 80025d8:	3304      	adds	r3, #4
 80025da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2201      	movs	r2, #1
 80025e0:	705a      	strb	r2, [r3, #1]
 80025e2:	e00f      	b.n	8002604 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025e4:	78fb      	ldrb	r3, [r7, #3]
 80025e6:	f003 020f 	and.w	r2, r3, #15
 80025ea:	4613      	mov	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	1a9b      	subs	r3, r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	3304      	adds	r3, #4
 80025fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002604:	78fb      	ldrb	r3, [r7, #3]
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	b2da      	uxtb	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002616:	2b01      	cmp	r3, #1
 8002618:	d101      	bne.n	800261e <HAL_PCD_EP_Close+0x6e>
 800261a:	2302      	movs	r3, #2
 800261c:	e00e      	b.n	800263c <HAL_PCD_EP_Close+0x8c>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68f9      	ldr	r1, [r7, #12]
 800262c:	4618      	mov	r0, r3
 800262e:	f003 f9c3 	bl	80059b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	607a      	str	r2, [r7, #4]
 800264e:	603b      	str	r3, [r7, #0]
 8002650:	460b      	mov	r3, r1
 8002652:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002654:	7afb      	ldrb	r3, [r7, #11]
 8002656:	f003 020f 	and.w	r2, r3, #15
 800265a:	4613      	mov	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	1a9b      	subs	r3, r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	4413      	add	r3, r2
 800266a:	3304      	adds	r3, #4
 800266c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2200      	movs	r2, #0
 800267e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	2200      	movs	r2, #0
 8002684:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002686:	7afb      	ldrb	r3, [r7, #11]
 8002688:	f003 030f 	and.w	r3, r3, #15
 800268c:	b2da      	uxtb	r2, r3
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d102      	bne.n	80026a0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026a0:	7afb      	ldrb	r3, [r7, #11]
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d109      	bne.n	80026be <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6818      	ldr	r0, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	461a      	mov	r2, r3
 80026b6:	6979      	ldr	r1, [r7, #20]
 80026b8:	f003 fc9e 	bl	8005ff8 <USB_EP0StartXfer>
 80026bc:	e008      	b.n	80026d0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	461a      	mov	r2, r3
 80026ca:	6979      	ldr	r1, [r7, #20]
 80026cc:	f003 fa50 	bl	8005b70 <USB_EPStartXfer>
  }

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	460b      	mov	r3, r1
 80026e4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80026e6:	78fb      	ldrb	r3, [r7, #3]
 80026e8:	f003 020f 	and.w	r2, r3, #15
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	1a9b      	subs	r3, r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	440b      	add	r3, r1
 80026f8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80026fc:	681b      	ldr	r3, [r3, #0]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b086      	sub	sp, #24
 800270e:	af00      	add	r7, sp, #0
 8002710:	60f8      	str	r0, [r7, #12]
 8002712:	607a      	str	r2, [r7, #4]
 8002714:	603b      	str	r3, [r7, #0]
 8002716:	460b      	mov	r3, r1
 8002718:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800271a:	7afb      	ldrb	r3, [r7, #11]
 800271c:	f003 020f 	and.w	r2, r3, #15
 8002720:	4613      	mov	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	1a9b      	subs	r3, r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	3338      	adds	r3, #56	; 0x38
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	4413      	add	r3, r2
 800272e:	3304      	adds	r3, #4
 8002730:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	2200      	movs	r2, #0
 8002742:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	2201      	movs	r2, #1
 8002748:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800274a:	7afb      	ldrb	r3, [r7, #11]
 800274c:	f003 030f 	and.w	r3, r3, #15
 8002750:	b2da      	uxtb	r2, r3
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d102      	bne.n	8002764 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002764:	7afb      	ldrb	r3, [r7, #11]
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	2b00      	cmp	r3, #0
 800276c:	d109      	bne.n	8002782 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6818      	ldr	r0, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	b2db      	uxtb	r3, r3
 8002778:	461a      	mov	r2, r3
 800277a:	6979      	ldr	r1, [r7, #20]
 800277c:	f003 fc3c 	bl	8005ff8 <USB_EP0StartXfer>
 8002780:	e008      	b.n	8002794 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	b2db      	uxtb	r3, r3
 800278c:	461a      	mov	r2, r3
 800278e:	6979      	ldr	r1, [r7, #20]
 8002790:	f003 f9ee 	bl	8005b70 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b084      	sub	sp, #16
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	460b      	mov	r3, r1
 80027a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80027aa:	78fb      	ldrb	r3, [r7, #3]
 80027ac:	f003 020f 	and.w	r2, r3, #15
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d901      	bls.n	80027bc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e050      	b.n	800285e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	da0f      	bge.n	80027e4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027c4:	78fb      	ldrb	r3, [r7, #3]
 80027c6:	f003 020f 	and.w	r2, r3, #15
 80027ca:	4613      	mov	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	1a9b      	subs	r3, r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	3338      	adds	r3, #56	; 0x38
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	4413      	add	r3, r2
 80027d8:	3304      	adds	r3, #4
 80027da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2201      	movs	r2, #1
 80027e0:	705a      	strb	r2, [r3, #1]
 80027e2:	e00d      	b.n	8002800 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80027e4:	78fa      	ldrb	r2, [r7, #3]
 80027e6:	4613      	mov	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	1a9b      	subs	r3, r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	4413      	add	r3, r2
 80027f6:	3304      	adds	r3, #4
 80027f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2201      	movs	r2, #1
 8002804:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002806:	78fb      	ldrb	r3, [r7, #3]
 8002808:	f003 030f 	and.w	r3, r3, #15
 800280c:	b2da      	uxtb	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_PCD_EP_SetStall+0x82>
 800281c:	2302      	movs	r3, #2
 800281e:	e01e      	b.n	800285e <HAL_PCD_EP_SetStall+0xc0>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68f9      	ldr	r1, [r7, #12]
 800282e:	4618      	mov	r0, r3
 8002830:	f003 fdcb 	bl	80063ca <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002834:	78fb      	ldrb	r3, [r7, #3]
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10a      	bne.n	8002854 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	b2d9      	uxtb	r1, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800284e:	461a      	mov	r2, r3
 8002850:	f003 ffbc 	bl	80067cc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b084      	sub	sp, #16
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	460b      	mov	r3, r1
 8002870:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002872:	78fb      	ldrb	r3, [r7, #3]
 8002874:	f003 020f 	and.w	r2, r3, #15
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	429a      	cmp	r2, r3
 800287e:	d901      	bls.n	8002884 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e042      	b.n	800290a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002884:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002888:	2b00      	cmp	r3, #0
 800288a:	da0f      	bge.n	80028ac <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800288c:	78fb      	ldrb	r3, [r7, #3]
 800288e:	f003 020f 	and.w	r2, r3, #15
 8002892:	4613      	mov	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	1a9b      	subs	r3, r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	3338      	adds	r3, #56	; 0x38
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	4413      	add	r3, r2
 80028a0:	3304      	adds	r3, #4
 80028a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2201      	movs	r2, #1
 80028a8:	705a      	strb	r2, [r3, #1]
 80028aa:	e00f      	b.n	80028cc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028ac:	78fb      	ldrb	r3, [r7, #3]
 80028ae:	f003 020f 	and.w	r2, r3, #15
 80028b2:	4613      	mov	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	1a9b      	subs	r3, r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	4413      	add	r3, r2
 80028c2:	3304      	adds	r3, #4
 80028c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028d2:	78fb      	ldrb	r3, [r7, #3]
 80028d4:	f003 030f 	and.w	r3, r3, #15
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_PCD_EP_ClrStall+0x86>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e00e      	b.n	800290a <HAL_PCD_EP_ClrStall+0xa4>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68f9      	ldr	r1, [r7, #12]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f003 fdd3 	bl	80064a6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b08a      	sub	sp, #40	; 0x28
 8002916:	af02      	add	r7, sp, #8
 8002918:	6078      	str	r0, [r7, #4]
 800291a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	4613      	mov	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	1a9b      	subs	r3, r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	3338      	adds	r3, #56	; 0x38
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	4413      	add	r3, r2
 8002936:	3304      	adds	r3, #4
 8002938:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	699a      	ldr	r2, [r3, #24]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	429a      	cmp	r2, r3
 8002944:	d901      	bls.n	800294a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e06c      	b.n	8002a24 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	695a      	ldr	r2, [r3, #20]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	69fa      	ldr	r2, [r7, #28]
 800295c:	429a      	cmp	r2, r3
 800295e:	d902      	bls.n	8002966 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	3303      	adds	r3, #3
 800296a:	089b      	lsrs	r3, r3, #2
 800296c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800296e:	e02b      	b.n	80029c8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	695a      	ldr	r2, [r3, #20]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	69fa      	ldr	r2, [r7, #28]
 8002982:	429a      	cmp	r2, r3
 8002984:	d902      	bls.n	800298c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	3303      	adds	r3, #3
 8002990:	089b      	lsrs	r3, r3, #2
 8002992:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	68d9      	ldr	r1, [r3, #12]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	b2da      	uxtb	r2, r3
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	4603      	mov	r3, r0
 80029aa:	6978      	ldr	r0, [r7, #20]
 80029ac:	f003 fc77 	bl	800629e <USB_WritePacket>

    ep->xfer_buff  += len;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	441a      	add	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	699a      	ldr	r2, [r3, #24]
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	441a      	add	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d809      	bhi.n	80029f2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	699a      	ldr	r2, [r3, #24]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d203      	bcs.n	80029f2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1be      	bne.n	8002970 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	695a      	ldr	r2, [r3, #20]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d811      	bhi.n	8002a22 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	f003 030f 	and.w	r3, r3, #15
 8002a04:	2201      	movs	r2, #1
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	43db      	mvns	r3, r3
 8002a18:	6939      	ldr	r1, [r7, #16]
 8002a1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a1e:	4013      	ands	r3, r2
 8002a20:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3720      	adds	r7, #32
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	333c      	adds	r3, #60	; 0x3c
 8002a44:	3304      	adds	r3, #4
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	015a      	lsls	r2, r3, #5
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	4413      	add	r3, r2
 8002a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	f040 80a0 	bne.w	8002ba4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d015      	beq.n	8002a9a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	4a72      	ldr	r2, [pc, #456]	; (8002c3c <PCD_EP_OutXfrComplete_int+0x210>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	f240 80dd 	bls.w	8002c32 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 80d7 	beq.w	8002c32 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a90:	461a      	mov	r2, r3
 8002a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a96:	6093      	str	r3, [r2, #8]
 8002a98:	e0cb      	b.n	8002c32 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d009      	beq.n	8002ab8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	2320      	movs	r3, #32
 8002ab4:	6093      	str	r3, [r2, #8]
 8002ab6:	e0bc      	b.n	8002c32 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f040 80b7 	bne.w	8002c32 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4a5d      	ldr	r2, [pc, #372]	; (8002c3c <PCD_EP_OutXfrComplete_int+0x210>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d90f      	bls.n	8002aec <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00a      	beq.n	8002aec <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	015a      	lsls	r2, r3, #5
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ae8:	6093      	str	r3, [r2, #8]
 8002aea:	e0a2      	b.n	8002c32 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	4613      	mov	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	1a9b      	subs	r3, r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002afe:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	0159      	lsls	r1, r3, #5
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	440b      	add	r3, r1
 8002b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002b12:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	1a9b      	subs	r3, r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4403      	add	r3, r0
 8002b22:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002b26:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	1a9b      	subs	r3, r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b3a:	6819      	ldr	r1, [r3, #0]
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	4613      	mov	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	1a9b      	subs	r3, r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4403      	add	r3, r0
 8002b4a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4419      	add	r1, r3
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	4613      	mov	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	1a9b      	subs	r3, r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4403      	add	r3, r0
 8002b60:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b64:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d114      	bne.n	8002b96 <PCD_EP_OutXfrComplete_int+0x16a>
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	4613      	mov	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	1a9b      	subs	r3, r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d108      	bne.n	8002b96 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b8e:	461a      	mov	r2, r3
 8002b90:	2101      	movs	r1, #1
 8002b92:	f003 fe1b 	bl	80067cc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f005 fdf5 	bl	800878c <HAL_PCD_DataOutStageCallback>
 8002ba2:	e046      	b.n	8002c32 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4a26      	ldr	r2, [pc, #152]	; (8002c40 <PCD_EP_OutXfrComplete_int+0x214>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d124      	bne.n	8002bf6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	015a      	lsls	r2, r3, #5
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bc8:	6093      	str	r3, [r2, #8]
 8002bca:	e032      	b.n	8002c32 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d008      	beq.n	8002be8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	015a      	lsls	r2, r3, #5
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	4413      	add	r3, r2
 8002bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002be2:	461a      	mov	r2, r3
 8002be4:	2320      	movs	r3, #32
 8002be6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	4619      	mov	r1, r3
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f005 fdcc 	bl	800878c <HAL_PCD_DataOutStageCallback>
 8002bf4:	e01d      	b.n	8002c32 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d114      	bne.n	8002c26 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	4613      	mov	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	1a9b      	subs	r3, r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d108      	bne.n	8002c26 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6818      	ldr	r0, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c1e:	461a      	mov	r2, r3
 8002c20:	2100      	movs	r1, #0
 8002c22:	f003 fdd3 	bl	80067cc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f005 fdad 	bl	800878c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	4f54300a 	.word	0x4f54300a
 8002c40:	4f54310a 	.word	0x4f54310a

08002c44 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	333c      	adds	r3, #60	; 0x3c
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	015a      	lsls	r2, r3, #5
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	4413      	add	r3, r2
 8002c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4a15      	ldr	r2, [pc, #84]	; (8002ccc <PCD_EP_OutSetupPacket_int+0x88>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d90e      	bls.n	8002c98 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d009      	beq.n	8002c98 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	015a      	lsls	r2, r3, #5
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c90:	461a      	mov	r2, r3
 8002c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c96:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f005 fd65 	bl	8008768 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	4a0a      	ldr	r2, [pc, #40]	; (8002ccc <PCD_EP_OutSetupPacket_int+0x88>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d90c      	bls.n	8002cc0 <PCD_EP_OutSetupPacket_int+0x7c>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d108      	bne.n	8002cc0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002cb8:	461a      	mov	r2, r3
 8002cba:	2101      	movs	r1, #1
 8002cbc:	f003 fd86 	bl	80067cc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	4f54300a 	.word	0x4f54300a

08002cd0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	70fb      	strb	r3, [r7, #3]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002ce8:	78fb      	ldrb	r3, [r7, #3]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d107      	bne.n	8002cfe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002cee:	883b      	ldrh	r3, [r7, #0]
 8002cf0:	0419      	lsls	r1, r3, #16
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	629a      	str	r2, [r3, #40]	; 0x28
 8002cfc:	e028      	b.n	8002d50 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d04:	0c1b      	lsrs	r3, r3, #16
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	4413      	add	r3, r2
 8002d0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	73fb      	strb	r3, [r7, #15]
 8002d10:	e00d      	b.n	8002d2e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
 8002d18:	3340      	adds	r3, #64	; 0x40
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	0c1b      	lsrs	r3, r3, #16
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	4413      	add	r3, r2
 8002d26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	73fb      	strb	r3, [r7, #15]
 8002d2e:	7bfa      	ldrb	r2, [r7, #15]
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d3ec      	bcc.n	8002d12 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002d38:	883b      	ldrh	r3, [r7, #0]
 8002d3a:	0418      	lsls	r0, r3, #16
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6819      	ldr	r1, [r3, #0]
 8002d40:	78fb      	ldrb	r3, [r7, #3]
 8002d42:	3b01      	subs	r3, #1
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	4302      	orrs	r2, r0
 8002d48:	3340      	adds	r3, #64	; 0x40
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
 8002d66:	460b      	mov	r3, r1
 8002d68:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	887a      	ldrh	r2, [r7, #2]
 8002d70:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db2:	f043 0303 	orr.w	r3, r3, #3
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	603b      	str	r3, [r7, #0]
 8002dd6:	4b20      	ldr	r3, [pc, #128]	; (8002e58 <HAL_PWREx_EnableOverDrive+0x90>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	4a1f      	ldr	r2, [pc, #124]	; (8002e58 <HAL_PWREx_EnableOverDrive+0x90>)
 8002ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de0:	6413      	str	r3, [r2, #64]	; 0x40
 8002de2:	4b1d      	ldr	r3, [pc, #116]	; (8002e58 <HAL_PWREx_EnableOverDrive+0x90>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002dee:	4b1b      	ldr	r3, [pc, #108]	; (8002e5c <HAL_PWREx_EnableOverDrive+0x94>)
 8002df0:	2201      	movs	r2, #1
 8002df2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002df4:	f7fd ffba 	bl	8000d6c <HAL_GetTick>
 8002df8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002dfa:	e009      	b.n	8002e10 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002dfc:	f7fd ffb6 	bl	8000d6c <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e0a:	d901      	bls.n	8002e10 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e01f      	b.n	8002e50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e10:	4b13      	ldr	r3, [pc, #76]	; (8002e60 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e1c:	d1ee      	bne.n	8002dfc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e1e:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e20:	2201      	movs	r2, #1
 8002e22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e24:	f7fd ffa2 	bl	8000d6c <HAL_GetTick>
 8002e28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e2a:	e009      	b.n	8002e40 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e2c:	f7fd ff9e 	bl	8000d6c <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e3a:	d901      	bls.n	8002e40 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e007      	b.n	8002e50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e40:	4b07      	ldr	r3, [pc, #28]	; (8002e60 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e4c:	d1ee      	bne.n	8002e2c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	420e0040 	.word	0x420e0040
 8002e60:	40007000 	.word	0x40007000
 8002e64:	420e0044 	.word	0x420e0044

08002e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e0cc      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e7c:	4b68      	ldr	r3, [pc, #416]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 030f 	and.w	r3, r3, #15
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d90c      	bls.n	8002ea4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8a:	4b65      	ldr	r3, [pc, #404]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e92:	4b63      	ldr	r3, [pc, #396]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0b8      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d020      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ebc:	4b59      	ldr	r3, [pc, #356]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	4a58      	ldr	r2, [pc, #352]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ec6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ed4:	4b53      	ldr	r3, [pc, #332]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	4a52      	ldr	r2, [pc, #328]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ede:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee0:	4b50      	ldr	r3, [pc, #320]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	494d      	ldr	r1, [pc, #308]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d044      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d107      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f06:	4b47      	ldr	r3, [pc, #284]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d119      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e07f      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d003      	beq.n	8002f26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f22:	2b03      	cmp	r3, #3
 8002f24:	d107      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f26:	4b3f      	ldr	r3, [pc, #252]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d109      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e06f      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f36:	4b3b      	ldr	r3, [pc, #236]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e067      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f46:	4b37      	ldr	r3, [pc, #220]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f023 0203 	bic.w	r2, r3, #3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	4934      	ldr	r1, [pc, #208]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f58:	f7fd ff08 	bl	8000d6c <HAL_GetTick>
 8002f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5e:	e00a      	b.n	8002f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f60:	f7fd ff04 	bl	8000d6c <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e04f      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f76:	4b2b      	ldr	r3, [pc, #172]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 020c 	and.w	r2, r3, #12
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d1eb      	bne.n	8002f60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f88:	4b25      	ldr	r3, [pc, #148]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 030f 	and.w	r3, r3, #15
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d20c      	bcs.n	8002fb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f96:	4b22      	ldr	r3, [pc, #136]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9e:	4b20      	ldr	r3, [pc, #128]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d001      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e032      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d008      	beq.n	8002fce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fbc:	4b19      	ldr	r3, [pc, #100]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	4916      	ldr	r1, [pc, #88]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fda:	4b12      	ldr	r3, [pc, #72]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	490e      	ldr	r1, [pc, #56]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fee:	f000 fd9f 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	490a      	ldr	r1, [pc, #40]	; (8003028 <HAL_RCC_ClockConfig+0x1c0>)
 8003000:	5ccb      	ldrb	r3, [r1, r3]
 8003002:	fa22 f303 	lsr.w	r3, r2, r3
 8003006:	4a09      	ldr	r2, [pc, #36]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8003008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800300a:	4b09      	ldr	r3, [pc, #36]	; (8003030 <HAL_RCC_ClockConfig+0x1c8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7fd fe68 	bl	8000ce4 <HAL_InitTick>

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40023c00 	.word	0x40023c00
 8003024:	40023800 	.word	0x40023800
 8003028:	08008e34 	.word	0x08008e34
 800302c:	20000000 	.word	0x20000000
 8003030:	20000004 	.word	0x20000004

08003034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003038:	4b03      	ldr	r3, [pc, #12]	; (8003048 <HAL_RCC_GetHCLKFreq+0x14>)
 800303a:	681b      	ldr	r3, [r3, #0]
}
 800303c:	4618      	mov	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	20000000 	.word	0x20000000

0800304c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08c      	sub	sp, #48	; 0x30
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003054:	2300      	movs	r3, #0
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800305c:	2300      	movs	r3, #0
 800305e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d010      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003084:	4b6f      	ldr	r3, [pc, #444]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003086:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800308a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003092:	496c      	ldr	r1, [pc, #432]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003094:	4313      	orrs	r3, r2
 8003096:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80030a2:	2301      	movs	r3, #1
 80030a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d010      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80030b2:	4b64      	ldr	r3, [pc, #400]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030b8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c0:	4960      	ldr	r1, [pc, #384]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80030d0:	2301      	movs	r3, #1
 80030d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d017      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030e0:	4b58      	ldr	r3, [pc, #352]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	4955      	ldr	r1, [pc, #340]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030fe:	d101      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003100:	2301      	movs	r3, #1
 8003102:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800310c:	2301      	movs	r3, #1
 800310e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0308 	and.w	r3, r3, #8
 8003118:	2b00      	cmp	r3, #0
 800311a:	d017      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800311c:	4b49      	ldr	r3, [pc, #292]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800311e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003122:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800312a:	4946      	ldr	r1, [pc, #280]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800312c:	4313      	orrs	r3, r2
 800312e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003136:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800313a:	d101      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800313c:	2301      	movs	r3, #1
 800313e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003148:	2301      	movs	r3, #1
 800314a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0320 	and.w	r3, r3, #32
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 808a 	beq.w	800326e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	4b39      	ldr	r3, [pc, #228]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	4a38      	ldr	r2, [pc, #224]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003168:	6413      	str	r3, [r2, #64]	; 0x40
 800316a:	4b36      	ldr	r3, [pc, #216]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003172:	60bb      	str	r3, [r7, #8]
 8003174:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003176:	4b34      	ldr	r3, [pc, #208]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a33      	ldr	r2, [pc, #204]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800317c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003180:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003182:	f7fd fdf3 	bl	8000d6c <HAL_GetTick>
 8003186:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003188:	e008      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800318a:	f7fd fdef 	bl	8000d6c <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e278      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800319c:	4b2a      	ldr	r3, [pc, #168]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f0      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031a8:	4b26      	ldr	r3, [pc, #152]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031b0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d02f      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031c0:	6a3a      	ldr	r2, [r7, #32]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d028      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031c6:	4b1f      	ldr	r3, [pc, #124]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ce:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031d0:	4b1e      	ldr	r3, [pc, #120]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80031d2:	2201      	movs	r2, #1
 80031d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031d6:	4b1d      	ldr	r3, [pc, #116]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80031dc:	4a19      	ldr	r2, [pc, #100]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80031e2:	4b18      	ldr	r3, [pc, #96]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d114      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80031ee:	f7fd fdbd 	bl	8000d6c <HAL_GetTick>
 80031f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f4:	e00a      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031f6:	f7fd fdb9 	bl	8000d6c <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	f241 3288 	movw	r2, #5000	; 0x1388
 8003204:	4293      	cmp	r3, r2
 8003206:	d901      	bls.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e240      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800320c:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800320e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0ee      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003220:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003224:	d114      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003226:	4b07      	ldr	r3, [pc, #28]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800323a:	4902      	ldr	r1, [pc, #8]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800323c:	4313      	orrs	r3, r2
 800323e:	608b      	str	r3, [r1, #8]
 8003240:	e00c      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003242:	bf00      	nop
 8003244:	40023800 	.word	0x40023800
 8003248:	40007000 	.word	0x40007000
 800324c:	42470e40 	.word	0x42470e40
 8003250:	4b4a      	ldr	r3, [pc, #296]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	4a49      	ldr	r2, [pc, #292]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003256:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800325a:	6093      	str	r3, [r2, #8]
 800325c:	4b47      	ldr	r3, [pc, #284]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800325e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003268:	4944      	ldr	r1, [pc, #272]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800326a:	4313      	orrs	r3, r2
 800326c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0310 	and.w	r3, r3, #16
 8003276:	2b00      	cmp	r3, #0
 8003278:	d004      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003280:	4b3f      	ldr	r3, [pc, #252]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003282:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00a      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003290:	4b3a      	ldr	r3, [pc, #232]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003296:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329e:	4937      	ldr	r1, [pc, #220]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032b2:	4b32      	ldr	r3, [pc, #200]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80032b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032b8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c0:	492e      	ldr	r1, [pc, #184]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d011      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80032d4:	4b29      	ldr	r3, [pc, #164]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80032d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032da:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e2:	4926      	ldr	r1, [pc, #152]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032f2:	d101      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80032f4:	2301      	movs	r3, #1
 80032f6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00a      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003304:	4b1d      	ldr	r3, [pc, #116]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800330a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003312:	491a      	ldr	r1, [pc, #104]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003314:	4313      	orrs	r3, r2
 8003316:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003322:	2b00      	cmp	r3, #0
 8003324:	d011      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003326:	4b15      	ldr	r3, [pc, #84]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003328:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800332c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003334:	4911      	ldr	r1, [pc, #68]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003336:	4313      	orrs	r3, r2
 8003338:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003340:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003344:	d101      	bne.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003346:	2301      	movs	r3, #1
 8003348:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800334a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334c:	2b01      	cmp	r3, #1
 800334e:	d005      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003358:	f040 80ff 	bne.w	800355a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800335c:	4b09      	ldr	r3, [pc, #36]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003362:	f7fd fd03 	bl	8000d6c <HAL_GetTick>
 8003366:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003368:	e00e      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800336a:	f7fd fcff 	bl	8000d6c <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d907      	bls.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e188      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800337c:	40023800 	.word	0x40023800
 8003380:	424711e0 	.word	0x424711e0
 8003384:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003388:	4b7e      	ldr	r3, [pc, #504]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1ea      	bne.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d009      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d028      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d124      	bne.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80033bc:	4b71      	ldr	r3, [pc, #452]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80033be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033c2:	0c1b      	lsrs	r3, r3, #16
 80033c4:	f003 0303 	and.w	r3, r3, #3
 80033c8:	3301      	adds	r3, #1
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033ce:	4b6d      	ldr	r3, [pc, #436]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80033d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033d4:	0e1b      	lsrs	r3, r3, #24
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	019b      	lsls	r3, r3, #6
 80033e6:	431a      	orrs	r2, r3
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	085b      	lsrs	r3, r3, #1
 80033ec:	3b01      	subs	r3, #1
 80033ee:	041b      	lsls	r3, r3, #16
 80033f0:	431a      	orrs	r2, r3
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	061b      	lsls	r3, r3, #24
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	071b      	lsls	r3, r3, #28
 80033fe:	4961      	ldr	r1, [pc, #388]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0304 	and.w	r3, r3, #4
 800340e:	2b00      	cmp	r3, #0
 8003410:	d004      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800341a:	d00a      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003424:	2b00      	cmp	r3, #0
 8003426:	d035      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003430:	d130      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003432:	4b54      	ldr	r3, [pc, #336]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003434:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003438:	0c1b      	lsrs	r3, r3, #16
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	3301      	adds	r3, #1
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003444:	4b4f      	ldr	r3, [pc, #316]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800344a:	0f1b      	lsrs	r3, r3, #28
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	019b      	lsls	r3, r3, #6
 800345c:	431a      	orrs	r2, r3
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	085b      	lsrs	r3, r3, #1
 8003462:	3b01      	subs	r3, #1
 8003464:	041b      	lsls	r3, r3, #16
 8003466:	431a      	orrs	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	061b      	lsls	r3, r3, #24
 800346e:	431a      	orrs	r2, r3
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	071b      	lsls	r3, r3, #28
 8003474:	4943      	ldr	r1, [pc, #268]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800347c:	4b41      	ldr	r3, [pc, #260]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800347e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003482:	f023 021f 	bic.w	r2, r3, #31
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348a:	3b01      	subs	r3, #1
 800348c:	493d      	ldr	r1, [pc, #244]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800348e:	4313      	orrs	r3, r2
 8003490:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800349c:	2b00      	cmp	r3, #0
 800349e:	d029      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034a8:	d124      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80034aa:	4b36      	ldr	r3, [pc, #216]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80034ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034b0:	0c1b      	lsrs	r3, r3, #16
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	3301      	adds	r3, #1
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80034bc:	4b31      	ldr	r3, [pc, #196]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80034be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034c2:	0f1b      	lsrs	r3, r3, #28
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	019b      	lsls	r3, r3, #6
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	085b      	lsrs	r3, r3, #1
 80034dc:	3b01      	subs	r3, #1
 80034de:	041b      	lsls	r3, r3, #16
 80034e0:	431a      	orrs	r2, r3
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	061b      	lsls	r3, r3, #24
 80034e6:	431a      	orrs	r2, r3
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	071b      	lsls	r3, r3, #28
 80034ec:	4925      	ldr	r1, [pc, #148]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d016      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	019b      	lsls	r3, r3, #6
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	085b      	lsrs	r3, r3, #1
 8003512:	3b01      	subs	r3, #1
 8003514:	041b      	lsls	r3, r3, #16
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	061b      	lsls	r3, r3, #24
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	071b      	lsls	r3, r3, #28
 8003526:	4917      	ldr	r1, [pc, #92]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800352e:	4b16      	ldr	r3, [pc, #88]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003530:	2201      	movs	r2, #1
 8003532:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003534:	f7fd fc1a 	bl	8000d6c <HAL_GetTick>
 8003538:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800353a:	e008      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800353c:	f7fd fc16 	bl	8000d6c <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d901      	bls.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e09f      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800354e:	4b0d      	ldr	r3, [pc, #52]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0f0      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800355a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355c:	2b01      	cmp	r3, #1
 800355e:	f040 8095 	bne.w	800368c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003562:	4b0a      	ldr	r3, [pc, #40]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003568:	f7fd fc00 	bl	8000d6c <HAL_GetTick>
 800356c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800356e:	e00f      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003570:	f7fd fbfc 	bl	8000d6c <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d908      	bls.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e085      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003582:	bf00      	nop
 8003584:	40023800 	.word	0x40023800
 8003588:	42470068 	.word	0x42470068
 800358c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003590:	4b41      	ldr	r3, [pc, #260]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800359c:	d0e8      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0304 	and.w	r3, r3, #4
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d009      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d02b      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d127      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80035c6:	4b34      	ldr	r3, [pc, #208]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80035c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035cc:	0c1b      	lsrs	r3, r3, #16
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	3301      	adds	r3, #1
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	699a      	ldr	r2, [r3, #24]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	019b      	lsls	r3, r3, #6
 80035e2:	431a      	orrs	r2, r3
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	085b      	lsrs	r3, r3, #1
 80035e8:	3b01      	subs	r3, #1
 80035ea:	041b      	lsls	r3, r3, #16
 80035ec:	431a      	orrs	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	061b      	lsls	r3, r3, #24
 80035f4:	4928      	ldr	r1, [pc, #160]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80035fc:	4b26      	ldr	r3, [pc, #152]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80035fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003602:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360a:	3b01      	subs	r3, #1
 800360c:	021b      	lsls	r3, r3, #8
 800360e:	4922      	ldr	r1, [pc, #136]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003610:	4313      	orrs	r3, r2
 8003612:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361e:	2b00      	cmp	r3, #0
 8003620:	d01d      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003626:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800362a:	d118      	bne.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800362c:	4b1a      	ldr	r3, [pc, #104]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800362e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003632:	0e1b      	lsrs	r3, r3, #24
 8003634:	f003 030f 	and.w	r3, r3, #15
 8003638:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	699a      	ldr	r2, [r3, #24]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	019b      	lsls	r3, r3, #6
 8003644:	431a      	orrs	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	085b      	lsrs	r3, r3, #1
 800364c:	3b01      	subs	r3, #1
 800364e:	041b      	lsls	r3, r3, #16
 8003650:	431a      	orrs	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	061b      	lsls	r3, r3, #24
 8003656:	4910      	ldr	r1, [pc, #64]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800365e:	4b0f      	ldr	r3, [pc, #60]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003660:	2201      	movs	r2, #1
 8003662:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003664:	f7fd fb82 	bl	8000d6c <HAL_GetTick>
 8003668:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800366a:	e008      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800366c:	f7fd fb7e 	bl	8000d6c <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e007      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800367e:	4b06      	ldr	r3, [pc, #24]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003686:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800368a:	d1ef      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3730      	adds	r7, #48	; 0x30
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40023800 	.word	0x40023800
 800369c:	42470070 	.word	0x42470070

080036a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b089      	sub	sp, #36	; 0x24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80036bc:	2300      	movs	r3, #0
 80036be:	60bb      	str	r3, [r7, #8]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	2b07      	cmp	r3, #7
 80036c6:	f200 8224 	bhi.w	8003b12 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80036ca:	a201      	add	r2, pc, #4	; (adr r2, 80036d0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80036cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d0:	080038d3 	.word	0x080038d3
 80036d4:	080039fd 	.word	0x080039fd
 80036d8:	08003b13 	.word	0x08003b13
 80036dc:	080036f1 	.word	0x080036f1
 80036e0:	08003b13 	.word	0x08003b13
 80036e4:	08003b13 	.word	0x08003b13
 80036e8:	08003b13 	.word	0x08003b13
 80036ec:	080036f1 	.word	0x080036f1
  switch (PeriphClk)
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 80036f0:	4ba8      	ldr	r3, [pc, #672]	; (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80036f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036f6:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003706:	f000 80d6 	beq.w	80038b6 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003710:	f200 80dd 	bhi.w	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800371a:	f000 809f 	beq.w	800385c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003724:	f200 80d3 	bhi.w	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800372e:	d05b      	beq.n	80037e8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003736:	f200 80ca 	bhi.w	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003740:	f000 80b6 	beq.w	80038b0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800374a:	f200 80c0 	bhi.w	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003754:	f000 8082 	beq.w	800385c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800375e:	f200 80b6 	bhi.w	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d004      	beq.n	8003772 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800376e:	d03b      	beq.n	80037e8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8003770:	e0ad      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003772:	4b88      	ldr	r3, [pc, #544]	; (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d109      	bne.n	8003792 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 800377e:	4b85      	ldr	r3, [pc, #532]	; (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003784:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003788:	4a83      	ldr	r2, [pc, #524]	; (8003998 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800378a:	fbb2 f3f3 	udiv	r3, r2, r3
 800378e:	61bb      	str	r3, [r7, #24]
 8003790:	e008      	b.n	80037a4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8003792:	4b80      	ldr	r3, [pc, #512]	; (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800379c:	4a7f      	ldr	r2, [pc, #508]	; (800399c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800379e:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a2:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 80037a4:	4b7b      	ldr	r3, [pc, #492]	; (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80037a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037aa:	0e1b      	lsrs	r3, r3, #24
 80037ac:	f003 030f 	and.w	r3, r3, #15
 80037b0:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 80037b2:	4b78      	ldr	r3, [pc, #480]	; (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80037b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b8:	099b      	lsrs	r3, r3, #6
 80037ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	fb02 f203 	mul.w	r2, r2, r3
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ca:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80037cc:	4b71      	ldr	r3, [pc, #452]	; (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80037ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037d2:	0a1b      	lsrs	r3, r3, #8
 80037d4:	f003 031f 	and.w	r3, r3, #31
 80037d8:	3301      	adds	r3, #1
 80037da:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80037dc:	69fa      	ldr	r2, [r7, #28]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e4:	61fb      	str	r3, [r7, #28]
          break;
 80037e6:	e073      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80037e8:	4b6a      	ldr	r3, [pc, #424]	; (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d109      	bne.n	8003808 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80037f4:	4b67      	ldr	r3, [pc, #412]	; (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80037f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037fe:	4a66      	ldr	r2, [pc, #408]	; (8003998 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003800:	fbb2 f3f3 	udiv	r3, r2, r3
 8003804:	61bb      	str	r3, [r7, #24]
 8003806:	e008      	b.n	800381a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8003808:	4b62      	ldr	r3, [pc, #392]	; (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800380a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800380e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003812:	4a62      	ldr	r2, [pc, #392]	; (800399c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003814:	fbb2 f3f3 	udiv	r3, r2, r3
 8003818:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 800381a:	4b5e      	ldr	r3, [pc, #376]	; (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800381c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003820:	0e1b      	lsrs	r3, r3, #24
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8003828:	4b5a      	ldr	r3, [pc, #360]	; (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800382a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800382e:	099b      	lsrs	r3, r3, #6
 8003830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	fb02 f203 	mul.w	r2, r2, r3
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003840:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8003842:	4b54      	ldr	r3, [pc, #336]	; (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003844:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003848:	f003 031f 	and.w	r3, r3, #31
 800384c:	3301      	adds	r3, #1
 800384e:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8003850:	69fa      	ldr	r2, [r7, #28]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	fbb2 f3f3 	udiv	r3, r2, r3
 8003858:	61fb      	str	r3, [r7, #28]
          break;
 800385a:	e039      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800385c:	4b4d      	ldr	r3, [pc, #308]	; (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d108      	bne.n	800387a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003868:	4b4a      	ldr	r3, [pc, #296]	; (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003870:	4a49      	ldr	r2, [pc, #292]	; (8003998 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003872:	fbb2 f3f3 	udiv	r3, r2, r3
 8003876:	61bb      	str	r3, [r7, #24]
 8003878:	e007      	b.n	800388a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800387a:	4b46      	ldr	r3, [pc, #280]	; (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003882:	4a46      	ldr	r2, [pc, #280]	; (800399c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003884:	fbb2 f3f3 	udiv	r3, r2, r3
 8003888:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 800388a:	4b42      	ldr	r3, [pc, #264]	; (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	0f1b      	lsrs	r3, r3, #28
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 8003896:	4b3f      	ldr	r3, [pc, #252]	; (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	099b      	lsrs	r3, r3, #6
 800389c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	fb02 f203 	mul.w	r2, r2, r3
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ac:	61fb      	str	r3, [r7, #28]
          break;
 80038ae:	e00f      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 80038b0:	4b3b      	ldr	r3, [pc, #236]	; (80039a0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80038b2:	61fb      	str	r3, [r7, #28]
          break;
 80038b4:	e00c      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80038b6:	4b37      	ldr	r3, [pc, #220]	; (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d102      	bne.n	80038c8 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 80038c2:	4b35      	ldr	r3, [pc, #212]	; (8003998 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80038c4:	61fb      	str	r3, [r7, #28]
          break;
 80038c6:	e003      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 80038c8:	4b34      	ldr	r3, [pc, #208]	; (800399c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80038ca:	61fb      	str	r3, [r7, #28]
          break;
 80038cc:	e000      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 80038ce:	bf00      	nop
        }
      }
      break;
 80038d0:	e11f      	b.n	8003b12 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80038d2:	4b30      	ldr	r3, [pc, #192]	; (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80038d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038d8:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80038e4:	d079      	beq.n	80039da <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80038ec:	f200 8082 	bhi.w	80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038f6:	d03c      	beq.n	8003972 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038fe:	d879      	bhi.n	80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d006      	beq.n	8003914 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800390c:	d172      	bne.n	80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800390e:	4b24      	ldr	r3, [pc, #144]	; (80039a0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003910:	61fb      	str	r3, [r7, #28]
          break;
 8003912:	e072      	b.n	80039fa <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003914:	4b1f      	ldr	r3, [pc, #124]	; (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800391c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003920:	d109      	bne.n	8003936 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003922:	4b1c      	ldr	r3, [pc, #112]	; (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003924:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800392c:	4a1b      	ldr	r2, [pc, #108]	; (800399c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800392e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003932:	61bb      	str	r3, [r7, #24]
 8003934:	e008      	b.n	8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003936:	4b17      	ldr	r3, [pc, #92]	; (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003938:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800393c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003940:	4a15      	ldr	r2, [pc, #84]	; (8003998 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003942:	fbb2 f3f3 	udiv	r3, r2, r3
 8003946:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003948:	4b12      	ldr	r3, [pc, #72]	; (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800394a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800394e:	099b      	lsrs	r3, r3, #6
 8003950:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	fb02 f303 	mul.w	r3, r2, r3
 800395a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800395c:	4b0d      	ldr	r3, [pc, #52]	; (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800395e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003962:	0f1b      	lsrs	r3, r3, #28
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	fbb2 f3f3 	udiv	r3, r2, r3
 800396e:	61fb      	str	r3, [r7, #28]
          break;
 8003970:	e043      	b.n	80039fa <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003972:	4b08      	ldr	r3, [pc, #32]	; (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800397a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800397e:	d111      	bne.n	80039a4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003980:	4b04      	ldr	r3, [pc, #16]	; (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003988:	4a04      	ldr	r2, [pc, #16]	; (800399c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800398a:	fbb2 f3f3 	udiv	r3, r2, r3
 800398e:	61bb      	str	r3, [r7, #24]
 8003990:	e010      	b.n	80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8003992:	bf00      	nop
 8003994:	40023800 	.word	0x40023800
 8003998:	00f42400 	.word	0x00f42400
 800399c:	007a1200 	.word	0x007a1200
 80039a0:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80039a4:	4b5e      	ldr	r3, [pc, #376]	; (8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039ac:	4a5d      	ldr	r2, [pc, #372]	; (8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80039ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b2:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80039b4:	4b5a      	ldr	r3, [pc, #360]	; (8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	099b      	lsrs	r3, r3, #6
 80039ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	fb02 f303 	mul.w	r3, r2, r3
 80039c4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80039c6:	4b56      	ldr	r3, [pc, #344]	; (8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	0f1b      	lsrs	r3, r3, #28
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d6:	61fb      	str	r3, [r7, #28]
          break;
 80039d8:	e00f      	b.n	80039fa <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80039da:	4b51      	ldr	r3, [pc, #324]	; (8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039e6:	d102      	bne.n	80039ee <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 80039e8:	4b4f      	ldr	r3, [pc, #316]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80039ea:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80039ec:	e005      	b.n	80039fa <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 80039ee:	4b4d      	ldr	r3, [pc, #308]	; (8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80039f0:	61fb      	str	r3, [r7, #28]
          break;
 80039f2:	e002      	b.n	80039fa <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	61fb      	str	r3, [r7, #28]
          break;
 80039f8:	bf00      	nop
        }
      }
      break;
 80039fa:	e08a      	b.n	8003b12 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80039fc:	4b48      	ldr	r3, [pc, #288]	; (8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80039fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a02:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003a0e:	d06f      	beq.n	8003af0 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003a16:	d878      	bhi.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a1e:	d03c      	beq.n	8003a9a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a26:	d870      	bhi.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d006      	beq.n	8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a34:	d169      	bne.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003a36:	4b3d      	ldr	r3, [pc, #244]	; (8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8003a38:	61fb      	str	r3, [r7, #28]
          break;
 8003a3a:	e069      	b.n	8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003a3c:	4b38      	ldr	r3, [pc, #224]	; (8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a48:	d109      	bne.n	8003a5e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003a4a:	4b35      	ldr	r3, [pc, #212]	; (8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a54:	4a34      	ldr	r2, [pc, #208]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5a:	61bb      	str	r3, [r7, #24]
 8003a5c:	e008      	b.n	8003a70 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003a5e:	4b30      	ldr	r3, [pc, #192]	; (8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a68:	4a2e      	ldr	r2, [pc, #184]	; (8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6e:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003a70:	4b2b      	ldr	r3, [pc, #172]	; (8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a76:	099b      	lsrs	r3, r3, #6
 8003a78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	fb02 f303 	mul.w	r3, r2, r3
 8003a82:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003a84:	4b26      	ldr	r3, [pc, #152]	; (8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a8a:	0f1b      	lsrs	r3, r3, #28
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a96:	61fb      	str	r3, [r7, #28]
          break;
 8003a98:	e03a      	b.n	8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003a9a:	4b21      	ldr	r3, [pc, #132]	; (8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aa6:	d108      	bne.n	8003aba <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003aa8:	4b1d      	ldr	r3, [pc, #116]	; (8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ab0:	4a1d      	ldr	r2, [pc, #116]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab6:	61bb      	str	r3, [r7, #24]
 8003ab8:	e007      	b.n	8003aca <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003aba:	4b19      	ldr	r3, [pc, #100]	; (8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ac2:	4a18      	ldr	r2, [pc, #96]	; (8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac8:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003aca:	4b15      	ldr	r3, [pc, #84]	; (8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	099b      	lsrs	r3, r3, #6
 8003ad0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	fb02 f303 	mul.w	r3, r2, r3
 8003ada:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003adc:	4b10      	ldr	r3, [pc, #64]	; (8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	0f1b      	lsrs	r3, r3, #28
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aec:	61fb      	str	r3, [r7, #28]
          break;
 8003aee:	e00f      	b.n	8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003af0:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003af8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003afc:	d102      	bne.n	8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8003afe:	4b0a      	ldr	r3, [pc, #40]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003b00:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003b02:	e005      	b.n	8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8003b04:	4b07      	ldr	r3, [pc, #28]	; (8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003b06:	61fb      	str	r3, [r7, #28]
          break;
 8003b08:	e002      	b.n	8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61fb      	str	r3, [r7, #28]
          break;
 8003b0e:	bf00      	nop
        }
      }
      break;
 8003b10:	bf00      	nop
    }
  }
  return frequency;
 8003b12:	69fb      	ldr	r3, [r7, #28]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3724      	adds	r7, #36	; 0x24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	40023800 	.word	0x40023800
 8003b24:	00f42400 	.word	0x00f42400
 8003b28:	007a1200 	.word	0x007a1200
 8003b2c:	00bb8000 	.word	0x00bb8000

08003b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b34:	b088      	sub	sp, #32
 8003b36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b4c:	4bce      	ldr	r3, [pc, #824]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x358>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 030c 	and.w	r3, r3, #12
 8003b54:	2b0c      	cmp	r3, #12
 8003b56:	f200 818d 	bhi.w	8003e74 <HAL_RCC_GetSysClockFreq+0x344>
 8003b5a:	a201      	add	r2, pc, #4	; (adr r2, 8003b60 <HAL_RCC_GetSysClockFreq+0x30>)
 8003b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b60:	08003b95 	.word	0x08003b95
 8003b64:	08003e75 	.word	0x08003e75
 8003b68:	08003e75 	.word	0x08003e75
 8003b6c:	08003e75 	.word	0x08003e75
 8003b70:	08003b9b 	.word	0x08003b9b
 8003b74:	08003e75 	.word	0x08003e75
 8003b78:	08003e75 	.word	0x08003e75
 8003b7c:	08003e75 	.word	0x08003e75
 8003b80:	08003ba1 	.word	0x08003ba1
 8003b84:	08003e75 	.word	0x08003e75
 8003b88:	08003e75 	.word	0x08003e75
 8003b8c:	08003e75 	.word	0x08003e75
 8003b90:	08003d15 	.word	0x08003d15
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b94:	4bbd      	ldr	r3, [pc, #756]	; (8003e8c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003b96:	61bb      	str	r3, [r7, #24]
       break;
 8003b98:	e16f      	b.n	8003e7a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b9a:	4bbd      	ldr	r3, [pc, #756]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x360>)
 8003b9c:	61bb      	str	r3, [r7, #24]
      break;
 8003b9e:	e16c      	b.n	8003e7a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ba0:	4bb9      	ldr	r3, [pc, #740]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ba8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003baa:	4bb7      	ldr	r3, [pc, #732]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x358>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d053      	beq.n	8003c5e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bb6:	4bb4      	ldr	r3, [pc, #720]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x358>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	099b      	lsrs	r3, r3, #6
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	f04f 0300 	mov.w	r3, #0
 8003bc2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003bc6:	f04f 0100 	mov.w	r1, #0
 8003bca:	ea02 0400 	and.w	r4, r2, r0
 8003bce:	603c      	str	r4, [r7, #0]
 8003bd0:	400b      	ands	r3, r1
 8003bd2:	607b      	str	r3, [r7, #4]
 8003bd4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bd8:	4620      	mov	r0, r4
 8003bda:	4629      	mov	r1, r5
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	014b      	lsls	r3, r1, #5
 8003be6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003bea:	0142      	lsls	r2, r0, #5
 8003bec:	4610      	mov	r0, r2
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4623      	mov	r3, r4
 8003bf2:	1ac0      	subs	r0, r0, r3
 8003bf4:	462b      	mov	r3, r5
 8003bf6:	eb61 0103 	sbc.w	r1, r1, r3
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	018b      	lsls	r3, r1, #6
 8003c04:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c08:	0182      	lsls	r2, r0, #6
 8003c0a:	1a12      	subs	r2, r2, r0
 8003c0c:	eb63 0301 	sbc.w	r3, r3, r1
 8003c10:	f04f 0000 	mov.w	r0, #0
 8003c14:	f04f 0100 	mov.w	r1, #0
 8003c18:	00d9      	lsls	r1, r3, #3
 8003c1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c1e:	00d0      	lsls	r0, r2, #3
 8003c20:	4602      	mov	r2, r0
 8003c22:	460b      	mov	r3, r1
 8003c24:	4621      	mov	r1, r4
 8003c26:	1852      	adds	r2, r2, r1
 8003c28:	4629      	mov	r1, r5
 8003c2a:	eb43 0101 	adc.w	r1, r3, r1
 8003c2e:	460b      	mov	r3, r1
 8003c30:	f04f 0000 	mov.w	r0, #0
 8003c34:	f04f 0100 	mov.w	r1, #0
 8003c38:	0259      	lsls	r1, r3, #9
 8003c3a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003c3e:	0250      	lsls	r0, r2, #9
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4610      	mov	r0, r2
 8003c46:	4619      	mov	r1, r3
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	f7fc fad8 	bl	8000204 <__aeabi_uldivmod>
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4613      	mov	r3, r2
 8003c5a:	61fb      	str	r3, [r7, #28]
 8003c5c:	e04c      	b.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c5e:	4b8a      	ldr	r3, [pc, #552]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x358>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	099b      	lsrs	r3, r3, #6
 8003c64:	461a      	mov	r2, r3
 8003c66:	f04f 0300 	mov.w	r3, #0
 8003c6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c6e:	f04f 0100 	mov.w	r1, #0
 8003c72:	ea02 0a00 	and.w	sl, r2, r0
 8003c76:	ea03 0b01 	and.w	fp, r3, r1
 8003c7a:	4650      	mov	r0, sl
 8003c7c:	4659      	mov	r1, fp
 8003c7e:	f04f 0200 	mov.w	r2, #0
 8003c82:	f04f 0300 	mov.w	r3, #0
 8003c86:	014b      	lsls	r3, r1, #5
 8003c88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c8c:	0142      	lsls	r2, r0, #5
 8003c8e:	4610      	mov	r0, r2
 8003c90:	4619      	mov	r1, r3
 8003c92:	ebb0 000a 	subs.w	r0, r0, sl
 8003c96:	eb61 010b 	sbc.w	r1, r1, fp
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	f04f 0300 	mov.w	r3, #0
 8003ca2:	018b      	lsls	r3, r1, #6
 8003ca4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ca8:	0182      	lsls	r2, r0, #6
 8003caa:	1a12      	subs	r2, r2, r0
 8003cac:	eb63 0301 	sbc.w	r3, r3, r1
 8003cb0:	f04f 0000 	mov.w	r0, #0
 8003cb4:	f04f 0100 	mov.w	r1, #0
 8003cb8:	00d9      	lsls	r1, r3, #3
 8003cba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cbe:	00d0      	lsls	r0, r2, #3
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	eb12 020a 	adds.w	r2, r2, sl
 8003cc8:	eb43 030b 	adc.w	r3, r3, fp
 8003ccc:	f04f 0000 	mov.w	r0, #0
 8003cd0:	f04f 0100 	mov.w	r1, #0
 8003cd4:	0299      	lsls	r1, r3, #10
 8003cd6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003cda:	0290      	lsls	r0, r2, #10
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4610      	mov	r0, r2
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	f04f 0300 	mov.w	r3, #0
 8003cec:	f7fc fa8a 	bl	8000204 <__aeabi_uldivmod>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cf8:	4b63      	ldr	r3, [pc, #396]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x358>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	0c1b      	lsrs	r3, r3, #16
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	3301      	adds	r3, #1
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003d08:	69fa      	ldr	r2, [r7, #28]
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d10:	61bb      	str	r3, [r7, #24]
      break;
 8003d12:	e0b2      	b.n	8003e7a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d14:	4b5c      	ldr	r3, [pc, #368]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d1c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d1e:	4b5a      	ldr	r3, [pc, #360]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d04d      	beq.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d2a:	4b57      	ldr	r3, [pc, #348]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	099b      	lsrs	r3, r3, #6
 8003d30:	461a      	mov	r2, r3
 8003d32:	f04f 0300 	mov.w	r3, #0
 8003d36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d3a:	f04f 0100 	mov.w	r1, #0
 8003d3e:	ea02 0800 	and.w	r8, r2, r0
 8003d42:	ea03 0901 	and.w	r9, r3, r1
 8003d46:	4640      	mov	r0, r8
 8003d48:	4649      	mov	r1, r9
 8003d4a:	f04f 0200 	mov.w	r2, #0
 8003d4e:	f04f 0300 	mov.w	r3, #0
 8003d52:	014b      	lsls	r3, r1, #5
 8003d54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d58:	0142      	lsls	r2, r0, #5
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	ebb0 0008 	subs.w	r0, r0, r8
 8003d62:	eb61 0109 	sbc.w	r1, r1, r9
 8003d66:	f04f 0200 	mov.w	r2, #0
 8003d6a:	f04f 0300 	mov.w	r3, #0
 8003d6e:	018b      	lsls	r3, r1, #6
 8003d70:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d74:	0182      	lsls	r2, r0, #6
 8003d76:	1a12      	subs	r2, r2, r0
 8003d78:	eb63 0301 	sbc.w	r3, r3, r1
 8003d7c:	f04f 0000 	mov.w	r0, #0
 8003d80:	f04f 0100 	mov.w	r1, #0
 8003d84:	00d9      	lsls	r1, r3, #3
 8003d86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d8a:	00d0      	lsls	r0, r2, #3
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	eb12 0208 	adds.w	r2, r2, r8
 8003d94:	eb43 0309 	adc.w	r3, r3, r9
 8003d98:	f04f 0000 	mov.w	r0, #0
 8003d9c:	f04f 0100 	mov.w	r1, #0
 8003da0:	0259      	lsls	r1, r3, #9
 8003da2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003da6:	0250      	lsls	r0, r2, #9
 8003da8:	4602      	mov	r2, r0
 8003daa:	460b      	mov	r3, r1
 8003dac:	4610      	mov	r0, r2
 8003dae:	4619      	mov	r1, r3
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	461a      	mov	r2, r3
 8003db4:	f04f 0300 	mov.w	r3, #0
 8003db8:	f7fc fa24 	bl	8000204 <__aeabi_uldivmod>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	61fb      	str	r3, [r7, #28]
 8003dc4:	e04a      	b.n	8003e5c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dc6:	4b30      	ldr	r3, [pc, #192]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x358>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	099b      	lsrs	r3, r3, #6
 8003dcc:	461a      	mov	r2, r3
 8003dce:	f04f 0300 	mov.w	r3, #0
 8003dd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003dd6:	f04f 0100 	mov.w	r1, #0
 8003dda:	ea02 0400 	and.w	r4, r2, r0
 8003dde:	ea03 0501 	and.w	r5, r3, r1
 8003de2:	4620      	mov	r0, r4
 8003de4:	4629      	mov	r1, r5
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	f04f 0300 	mov.w	r3, #0
 8003dee:	014b      	lsls	r3, r1, #5
 8003df0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003df4:	0142      	lsls	r2, r0, #5
 8003df6:	4610      	mov	r0, r2
 8003df8:	4619      	mov	r1, r3
 8003dfa:	1b00      	subs	r0, r0, r4
 8003dfc:	eb61 0105 	sbc.w	r1, r1, r5
 8003e00:	f04f 0200 	mov.w	r2, #0
 8003e04:	f04f 0300 	mov.w	r3, #0
 8003e08:	018b      	lsls	r3, r1, #6
 8003e0a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e0e:	0182      	lsls	r2, r0, #6
 8003e10:	1a12      	subs	r2, r2, r0
 8003e12:	eb63 0301 	sbc.w	r3, r3, r1
 8003e16:	f04f 0000 	mov.w	r0, #0
 8003e1a:	f04f 0100 	mov.w	r1, #0
 8003e1e:	00d9      	lsls	r1, r3, #3
 8003e20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e24:	00d0      	lsls	r0, r2, #3
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	1912      	adds	r2, r2, r4
 8003e2c:	eb45 0303 	adc.w	r3, r5, r3
 8003e30:	f04f 0000 	mov.w	r0, #0
 8003e34:	f04f 0100 	mov.w	r1, #0
 8003e38:	0299      	lsls	r1, r3, #10
 8003e3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e3e:	0290      	lsls	r0, r2, #10
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4610      	mov	r0, r2
 8003e46:	4619      	mov	r1, r3
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	f04f 0300 	mov.w	r3, #0
 8003e50:	f7fc f9d8 	bl	8000204 <__aeabi_uldivmod>
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	4613      	mov	r3, r2
 8003e5a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003e5c:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	0f1b      	lsrs	r3, r3, #28
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003e68:	69fa      	ldr	r2, [r7, #28]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e70:	61bb      	str	r3, [r7, #24]
      break;
 8003e72:	e002      	b.n	8003e7a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e74:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003e76:	61bb      	str	r3, [r7, #24]
      break;
 8003e78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e7a:	69bb      	ldr	r3, [r7, #24]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3720      	adds	r7, #32
 8003e80:	46bd      	mov	sp, r7
 8003e82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e86:	bf00      	nop
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	00f42400 	.word	0x00f42400
 8003e90:	007a1200 	.word	0x007a1200

08003e94 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e28d      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 8083 	beq.w	8003fba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003eb4:	4b94      	ldr	r3, [pc, #592]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 030c 	and.w	r3, r3, #12
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d019      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ec0:	4b91      	ldr	r3, [pc, #580]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d106      	bne.n	8003eda <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ecc:	4b8e      	ldr	r3, [pc, #568]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ed4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ed8:	d00c      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eda:	4b8b      	ldr	r3, [pc, #556]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ee2:	2b0c      	cmp	r3, #12
 8003ee4:	d112      	bne.n	8003f0c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ee6:	4b88      	ldr	r3, [pc, #544]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ef2:	d10b      	bne.n	8003f0c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef4:	4b84      	ldr	r3, [pc, #528]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d05b      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x124>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d157      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e25a      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f14:	d106      	bne.n	8003f24 <HAL_RCC_OscConfig+0x90>
 8003f16:	4b7c      	ldr	r3, [pc, #496]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a7b      	ldr	r2, [pc, #492]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 8003f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f20:	6013      	str	r3, [r2, #0]
 8003f22:	e01d      	b.n	8003f60 <HAL_RCC_OscConfig+0xcc>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f2c:	d10c      	bne.n	8003f48 <HAL_RCC_OscConfig+0xb4>
 8003f2e:	4b76      	ldr	r3, [pc, #472]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a75      	ldr	r2, [pc, #468]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 8003f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	4b73      	ldr	r3, [pc, #460]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a72      	ldr	r2, [pc, #456]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 8003f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f44:	6013      	str	r3, [r2, #0]
 8003f46:	e00b      	b.n	8003f60 <HAL_RCC_OscConfig+0xcc>
 8003f48:	4b6f      	ldr	r3, [pc, #444]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a6e      	ldr	r2, [pc, #440]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 8003f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f52:	6013      	str	r3, [r2, #0]
 8003f54:	4b6c      	ldr	r3, [pc, #432]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a6b      	ldr	r2, [pc, #428]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 8003f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d013      	beq.n	8003f90 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f68:	f7fc ff00 	bl	8000d6c <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f70:	f7fc fefc 	bl	8000d6c <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b64      	cmp	r3, #100	; 0x64
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e21f      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f82:	4b61      	ldr	r3, [pc, #388]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0f0      	beq.n	8003f70 <HAL_RCC_OscConfig+0xdc>
 8003f8e:	e014      	b.n	8003fba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f90:	f7fc feec 	bl	8000d6c <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f98:	f7fc fee8 	bl	8000d6c <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b64      	cmp	r3, #100	; 0x64
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e20b      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003faa:	4b57      	ldr	r3, [pc, #348]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f0      	bne.n	8003f98 <HAL_RCC_OscConfig+0x104>
 8003fb6:	e000      	b.n	8003fba <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d06f      	beq.n	80040a6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003fc6:	4b50      	ldr	r3, [pc, #320]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 030c 	and.w	r3, r3, #12
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d017      	beq.n	8004002 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003fd2:	4b4d      	ldr	r3, [pc, #308]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003fda:	2b08      	cmp	r3, #8
 8003fdc:	d105      	bne.n	8003fea <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003fde:	4b4a      	ldr	r3, [pc, #296]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00b      	beq.n	8004002 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fea:	4b47      	ldr	r3, [pc, #284]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ff2:	2b0c      	cmp	r3, #12
 8003ff4:	d11c      	bne.n	8004030 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ff6:	4b44      	ldr	r3, [pc, #272]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d116      	bne.n	8004030 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004002:	4b41      	ldr	r3, [pc, #260]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d005      	beq.n	800401a <HAL_RCC_OscConfig+0x186>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d001      	beq.n	800401a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e1d3      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800401a:	4b3b      	ldr	r3, [pc, #236]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	4937      	ldr	r1, [pc, #220]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 800402a:	4313      	orrs	r3, r2
 800402c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800402e:	e03a      	b.n	80040a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d020      	beq.n	800407a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004038:	4b34      	ldr	r3, [pc, #208]	; (800410c <HAL_RCC_OscConfig+0x278>)
 800403a:	2201      	movs	r2, #1
 800403c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403e:	f7fc fe95 	bl	8000d6c <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004046:	f7fc fe91 	bl	8000d6c <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e1b4      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004058:	4b2b      	ldr	r3, [pc, #172]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0f0      	beq.n	8004046 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004064:	4b28      	ldr	r3, [pc, #160]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	4925      	ldr	r1, [pc, #148]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 8004074:	4313      	orrs	r3, r2
 8004076:	600b      	str	r3, [r1, #0]
 8004078:	e015      	b.n	80040a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800407a:	4b24      	ldr	r3, [pc, #144]	; (800410c <HAL_RCC_OscConfig+0x278>)
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004080:	f7fc fe74 	bl	8000d6c <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004088:	f7fc fe70 	bl	8000d6c <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e193      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800409a:	4b1b      	ldr	r3, [pc, #108]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1f0      	bne.n	8004088 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0308 	and.w	r3, r3, #8
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d036      	beq.n	8004120 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d016      	beq.n	80040e8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ba:	4b15      	ldr	r3, [pc, #84]	; (8004110 <HAL_RCC_OscConfig+0x27c>)
 80040bc:	2201      	movs	r2, #1
 80040be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c0:	f7fc fe54 	bl	8000d6c <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040c8:	f7fc fe50 	bl	8000d6c <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e173      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040da:	4b0b      	ldr	r3, [pc, #44]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 80040dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0f0      	beq.n	80040c8 <HAL_RCC_OscConfig+0x234>
 80040e6:	e01b      	b.n	8004120 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040e8:	4b09      	ldr	r3, [pc, #36]	; (8004110 <HAL_RCC_OscConfig+0x27c>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ee:	f7fc fe3d 	bl	8000d6c <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040f4:	e00e      	b.n	8004114 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040f6:	f7fc fe39 	bl	8000d6c <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d907      	bls.n	8004114 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e15c      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
 8004108:	40023800 	.word	0x40023800
 800410c:	42470000 	.word	0x42470000
 8004110:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004114:	4b8a      	ldr	r3, [pc, #552]	; (8004340 <HAL_RCC_OscConfig+0x4ac>)
 8004116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1ea      	bne.n	80040f6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 8097 	beq.w	800425c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800412e:	2300      	movs	r3, #0
 8004130:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004132:	4b83      	ldr	r3, [pc, #524]	; (8004340 <HAL_RCC_OscConfig+0x4ac>)
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10f      	bne.n	800415e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800413e:	2300      	movs	r3, #0
 8004140:	60bb      	str	r3, [r7, #8]
 8004142:	4b7f      	ldr	r3, [pc, #508]	; (8004340 <HAL_RCC_OscConfig+0x4ac>)
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	4a7e      	ldr	r2, [pc, #504]	; (8004340 <HAL_RCC_OscConfig+0x4ac>)
 8004148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800414c:	6413      	str	r3, [r2, #64]	; 0x40
 800414e:	4b7c      	ldr	r3, [pc, #496]	; (8004340 <HAL_RCC_OscConfig+0x4ac>)
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004156:	60bb      	str	r3, [r7, #8]
 8004158:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800415a:	2301      	movs	r3, #1
 800415c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800415e:	4b79      	ldr	r3, [pc, #484]	; (8004344 <HAL_RCC_OscConfig+0x4b0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004166:	2b00      	cmp	r3, #0
 8004168:	d118      	bne.n	800419c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800416a:	4b76      	ldr	r3, [pc, #472]	; (8004344 <HAL_RCC_OscConfig+0x4b0>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a75      	ldr	r2, [pc, #468]	; (8004344 <HAL_RCC_OscConfig+0x4b0>)
 8004170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004174:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004176:	f7fc fdf9 	bl	8000d6c <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800417c:	e008      	b.n	8004190 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800417e:	f7fc fdf5 	bl	8000d6c <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e118      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004190:	4b6c      	ldr	r3, [pc, #432]	; (8004344 <HAL_RCC_OscConfig+0x4b0>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0f0      	beq.n	800417e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d106      	bne.n	80041b2 <HAL_RCC_OscConfig+0x31e>
 80041a4:	4b66      	ldr	r3, [pc, #408]	; (8004340 <HAL_RCC_OscConfig+0x4ac>)
 80041a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a8:	4a65      	ldr	r2, [pc, #404]	; (8004340 <HAL_RCC_OscConfig+0x4ac>)
 80041aa:	f043 0301 	orr.w	r3, r3, #1
 80041ae:	6713      	str	r3, [r2, #112]	; 0x70
 80041b0:	e01c      	b.n	80041ec <HAL_RCC_OscConfig+0x358>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	2b05      	cmp	r3, #5
 80041b8:	d10c      	bne.n	80041d4 <HAL_RCC_OscConfig+0x340>
 80041ba:	4b61      	ldr	r3, [pc, #388]	; (8004340 <HAL_RCC_OscConfig+0x4ac>)
 80041bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041be:	4a60      	ldr	r2, [pc, #384]	; (8004340 <HAL_RCC_OscConfig+0x4ac>)
 80041c0:	f043 0304 	orr.w	r3, r3, #4
 80041c4:	6713      	str	r3, [r2, #112]	; 0x70
 80041c6:	4b5e      	ldr	r3, [pc, #376]	; (8004340 <HAL_RCC_OscConfig+0x4ac>)
 80041c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ca:	4a5d      	ldr	r2, [pc, #372]	; (8004340 <HAL_RCC_OscConfig+0x4ac>)
 80041cc:	f043 0301 	orr.w	r3, r3, #1
 80041d0:	6713      	str	r3, [r2, #112]	; 0x70
 80041d2:	e00b      	b.n	80041ec <HAL_RCC_OscConfig+0x358>
 80041d4:	4b5a      	ldr	r3, [pc, #360]	; (8004340 <HAL_RCC_OscConfig+0x4ac>)
 80041d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d8:	4a59      	ldr	r2, [pc, #356]	; (8004340 <HAL_RCC_OscConfig+0x4ac>)
 80041da:	f023 0301 	bic.w	r3, r3, #1
 80041de:	6713      	str	r3, [r2, #112]	; 0x70
 80041e0:	4b57      	ldr	r3, [pc, #348]	; (8004340 <HAL_RCC_OscConfig+0x4ac>)
 80041e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e4:	4a56      	ldr	r2, [pc, #344]	; (8004340 <HAL_RCC_OscConfig+0x4ac>)
 80041e6:	f023 0304 	bic.w	r3, r3, #4
 80041ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d015      	beq.n	8004220 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f4:	f7fc fdba 	bl	8000d6c <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041fa:	e00a      	b.n	8004212 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041fc:	f7fc fdb6 	bl	8000d6c <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	f241 3288 	movw	r2, #5000	; 0x1388
 800420a:	4293      	cmp	r3, r2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e0d7      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004212:	4b4b      	ldr	r3, [pc, #300]	; (8004340 <HAL_RCC_OscConfig+0x4ac>)
 8004214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0ee      	beq.n	80041fc <HAL_RCC_OscConfig+0x368>
 800421e:	e014      	b.n	800424a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004220:	f7fc fda4 	bl	8000d6c <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004226:	e00a      	b.n	800423e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004228:	f7fc fda0 	bl	8000d6c <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	f241 3288 	movw	r2, #5000	; 0x1388
 8004236:	4293      	cmp	r3, r2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e0c1      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800423e:	4b40      	ldr	r3, [pc, #256]	; (8004340 <HAL_RCC_OscConfig+0x4ac>)
 8004240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1ee      	bne.n	8004228 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800424a:	7dfb      	ldrb	r3, [r7, #23]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d105      	bne.n	800425c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004250:	4b3b      	ldr	r3, [pc, #236]	; (8004340 <HAL_RCC_OscConfig+0x4ac>)
 8004252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004254:	4a3a      	ldr	r2, [pc, #232]	; (8004340 <HAL_RCC_OscConfig+0x4ac>)
 8004256:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800425a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 80ad 	beq.w	80043c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004266:	4b36      	ldr	r3, [pc, #216]	; (8004340 <HAL_RCC_OscConfig+0x4ac>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 030c 	and.w	r3, r3, #12
 800426e:	2b08      	cmp	r3, #8
 8004270:	d060      	beq.n	8004334 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d145      	bne.n	8004306 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800427a:	4b33      	ldr	r3, [pc, #204]	; (8004348 <HAL_RCC_OscConfig+0x4b4>)
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004280:	f7fc fd74 	bl	8000d6c <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004288:	f7fc fd70 	bl	8000d6c <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e093      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800429a:	4b29      	ldr	r3, [pc, #164]	; (8004340 <HAL_RCC_OscConfig+0x4ac>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	69da      	ldr	r2, [r3, #28]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	019b      	lsls	r3, r3, #6
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042bc:	085b      	lsrs	r3, r3, #1
 80042be:	3b01      	subs	r3, #1
 80042c0:	041b      	lsls	r3, r3, #16
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c8:	061b      	lsls	r3, r3, #24
 80042ca:	431a      	orrs	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d0:	071b      	lsls	r3, r3, #28
 80042d2:	491b      	ldr	r1, [pc, #108]	; (8004340 <HAL_RCC_OscConfig+0x4ac>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042d8:	4b1b      	ldr	r3, [pc, #108]	; (8004348 <HAL_RCC_OscConfig+0x4b4>)
 80042da:	2201      	movs	r2, #1
 80042dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042de:	f7fc fd45 	bl	8000d6c <HAL_GetTick>
 80042e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042e4:	e008      	b.n	80042f8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042e6:	f7fc fd41 	bl	8000d6c <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e064      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f8:	4b11      	ldr	r3, [pc, #68]	; (8004340 <HAL_RCC_OscConfig+0x4ac>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0f0      	beq.n	80042e6 <HAL_RCC_OscConfig+0x452>
 8004304:	e05c      	b.n	80043c0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004306:	4b10      	ldr	r3, [pc, #64]	; (8004348 <HAL_RCC_OscConfig+0x4b4>)
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430c:	f7fc fd2e 	bl	8000d6c <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004314:	f7fc fd2a 	bl	8000d6c <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e04d      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004326:	4b06      	ldr	r3, [pc, #24]	; (8004340 <HAL_RCC_OscConfig+0x4ac>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1f0      	bne.n	8004314 <HAL_RCC_OscConfig+0x480>
 8004332:	e045      	b.n	80043c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d107      	bne.n	800434c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e040      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
 8004340:	40023800 	.word	0x40023800
 8004344:	40007000 	.word	0x40007000
 8004348:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800434c:	4b1f      	ldr	r3, [pc, #124]	; (80043cc <HAL_RCC_OscConfig+0x538>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d030      	beq.n	80043bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004364:	429a      	cmp	r2, r3
 8004366:	d129      	bne.n	80043bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004372:	429a      	cmp	r2, r3
 8004374:	d122      	bne.n	80043bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800437c:	4013      	ands	r3, r2
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004382:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004384:	4293      	cmp	r3, r2
 8004386:	d119      	bne.n	80043bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004392:	085b      	lsrs	r3, r3, #1
 8004394:	3b01      	subs	r3, #1
 8004396:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004398:	429a      	cmp	r2, r3
 800439a:	d10f      	bne.n	80043bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d107      	bne.n	80043bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d001      	beq.n	80043c0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e000      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3718      	adds	r7, #24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40023800 	.word	0x40023800

080043d0 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
 80043dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d904      	bls.n	80043f2 <HAL_SAI_InitProtocol+0x22>
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	3b03      	subs	r3, #3
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d812      	bhi.n	8004416 <HAL_SAI_InitProtocol+0x46>
 80043f0:	e008      	b.n	8004404 <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	68b9      	ldr	r1, [r7, #8]
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f000 f9ff 	bl	80047fc <SAI_InitI2S>
 80043fe:	4603      	mov	r3, r0
 8004400:	75fb      	strb	r3, [r7, #23]
      break;
 8004402:	e00b      	b.n	800441c <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	68b9      	ldr	r1, [r7, #8]
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 faa4 	bl	8004958 <SAI_InitPCM>
 8004410:	4603      	mov	r3, r0
 8004412:	75fb      	strb	r3, [r7, #23]
      break;
 8004414:	e002      	b.n	800441c <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	75fb      	strb	r3, [r7, #23]
      break;
 800441a:	bf00      	nop
  }

  if (status == HAL_OK)
 800441c:	7dfb      	ldrb	r3, [r7, #23]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d104      	bne.n	800442c <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 f808 	bl	8004438 <HAL_SAI_Init>
 8004428:	4603      	mov	r3, r0
 800442a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800442c:	7dfb      	ldrb	r3, [r7, #23]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e10c      	b.n	8004674 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d106      	bne.n	8004474 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7fc fa6c 	bl	800094c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 fb21 	bl	8004ac4 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 fbc8 	bl	8004c18 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d030      	beq.n	80044f2 <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 fc05 	bl	8004ca0 <SAI_GetInputClock>
 8004496:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	4613      	mov	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	461a      	mov	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	025b      	lsls	r3, r3, #9
 80044aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ae:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4a72      	ldr	r2, [pc, #456]	; (800467c <HAL_SAI_Init+0x244>)
 80044b4:	fba2 2303 	umull	r2, r3, r2, r3
 80044b8:	08da      	lsrs	r2, r3, #3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 80044be:	68f9      	ldr	r1, [r7, #12]
 80044c0:	4b6e      	ldr	r3, [pc, #440]	; (800467c <HAL_SAI_Init+0x244>)
 80044c2:	fba3 2301 	umull	r2, r3, r3, r1
 80044c6:	08da      	lsrs	r2, r3, #3
 80044c8:	4613      	mov	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	1aca      	subs	r2, r1, r3
 80044d2:	2a08      	cmp	r2, #8
 80044d4:	d904      	bls.n	80044e0 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	1c5a      	adds	r2, r3, #1
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e4:	2b04      	cmp	r3, #4
 80044e6:	d104      	bne.n	80044f2 <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	085a      	lsrs	r2, r3, #1
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_SAI_Init+0xca>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d109      	bne.n	8004516 <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	2b01      	cmp	r3, #1
 8004508:	d101      	bne.n	800450e <HAL_SAI_Init+0xd6>
 800450a:	2300      	movs	r3, #0
 800450c:	e001      	b.n	8004512 <HAL_SAI_Init+0xda>
 800450e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	e008      	b.n	8004528 <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	2b01      	cmp	r3, #1
 800451c:	d102      	bne.n	8004524 <HAL_SAI_Init+0xec>
 800451e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004522:	e000      	b.n	8004526 <HAL_SAI_Init+0xee>
 8004524:	2300      	movs	r3, #0
 8004526:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	2b03      	cmp	r3, #3
 800452e:	d811      	bhi.n	8004554 <HAL_SAI_Init+0x11c>
 8004530:	2b02      	cmp	r3, #2
 8004532:	d20b      	bcs.n	800454c <HAL_SAI_Init+0x114>
 8004534:	2b00      	cmp	r3, #0
 8004536:	d002      	beq.n	800453e <HAL_SAI_Init+0x106>
 8004538:	2b01      	cmp	r3, #1
 800453a:	d003      	beq.n	8004544 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 800453c:	e00a      	b.n	8004554 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	613b      	str	r3, [r7, #16]
    break;
 8004542:	e008      	b.n	8004556 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004544:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004548:	613b      	str	r3, [r7, #16]
    break;
 800454a:	e004      	b.n	8004556 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800454c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004550:	613b      	str	r3, [r7, #16]
    break;
 8004552:	e000      	b.n	8004556 <HAL_SAI_Init+0x11e>
      break;
 8004554:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6819      	ldr	r1, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	4b47      	ldr	r3, [pc, #284]	; (8004680 <HAL_SAI_Init+0x248>)
 8004562:	400b      	ands	r3, r1
 8004564:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6819      	ldr	r1, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004574:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800457a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004580:	431a      	orrs	r2, r3
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 800458e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800459a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	051b      	lsls	r3, r3, #20
 80045a2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6812      	ldr	r2, [r2, #0]
 80045b6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80045ba:	f023 030f 	bic.w	r3, r3, #15
 80045be:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6859      	ldr	r1, [r3, #4]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	699a      	ldr	r2, [r3, #24]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	431a      	orrs	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6899      	ldr	r1, [r3, #8]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	4b26      	ldr	r3, [pc, #152]	; (8004684 <HAL_SAI_Init+0x24c>)
 80045ea:	400b      	ands	r3, r1
 80045ec:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6899      	ldr	r1, [r3, #8]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80045fe:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSOffset     |
 8004604:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                           hsai->FrameInit.FSDefinition |
 800460a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004610:	3b01      	subs	r3, #1
 8004612:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004614:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68d9      	ldr	r1, [r3, #12]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	f24f 0320 	movw	r3, #61472	; 0xf020
 800462c:	400b      	ands	r3, r1
 800462e:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68d9      	ldr	r1, [r3, #12]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800463e:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004644:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8004646:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800464c:	3b01      	subs	r3, #1
 800464e:	021b      	lsls	r3, r3, #8
 8004650:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	cccccccd 	.word	0xcccccccd
 8004680:	ff05c010 	.word	0xff05c010
 8004684:	fff88000 	.word	0xfff88000

08004688 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	4613      	mov	r3, r2
 8004694:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8004696:	f7fc fb69 	bl	8000d6c <HAL_GetTick>
 800469a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <HAL_SAI_Transmit_DMA+0x20>
 80046a2:	88fb      	ldrh	r3, [r7, #6]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e093      	b.n	80047d4 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	f040 808c 	bne.w	80047d2 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d101      	bne.n	80046c8 <HAL_SAI_Transmit_DMA+0x40>
 80046c4:	2302      	movs	r3, #2
 80046c6:	e085      	b.n	80047d4 <HAL_SAI_Transmit_DMA+0x14c>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hsai->pBuffPtr = pData;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	669a      	str	r2, [r3, #104]	; 0x68
    hsai->XferSize = Size;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	88fa      	ldrh	r2, [r7, #6]
 80046da:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    hsai->XferCount = Size;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	88fa      	ldrh	r2, [r7, #6]
 80046e2:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2212      	movs	r2, #18
 80046f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fa:	4a38      	ldr	r2, [pc, #224]	; (80047dc <HAL_SAI_Transmit_DMA+0x154>)
 80046fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004702:	4a37      	ldr	r2, [pc, #220]	; (80047e0 <HAL_SAI_Transmit_DMA+0x158>)
 8004704:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470a:	4a36      	ldr	r2, [pc, #216]	; (80047e4 <HAL_SAI_Transmit_DMA+0x15c>)
 800470c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004712:	2200      	movs	r2, #0
 8004714:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800471e:	4619      	mov	r1, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	331c      	adds	r3, #28
 8004726:	461a      	mov	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800472e:	f7fc fd0d 	bl	800114c <HAL_DMA_Start_IT>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d005      	beq.n	8004744 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      return  HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e047      	b.n	80047d4 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004744:	2100      	movs	r1, #0
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 f986 	bl	8004a58 <SAI_InterruptFlag>
 800474c:	4601      	mov	r1, r0
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	691a      	ldr	r2, [r3, #16]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800476a:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800476c:	e015      	b.n	800479a <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800476e:	f7fc fafd 	bl	8000d6c <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800477c:	d90d      	bls.n	800479a <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004784:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e01c      	b.n	80047d4 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0e2      	beq.n	800476e <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d107      	bne.n	80047c6 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80047c4:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	e000      	b.n	80047d4 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 80047d2:	2302      	movs	r3, #2
  }
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3718      	adds	r7, #24
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	08004b95 	.word	0x08004b95
 80047e0:	08004b35 	.word	0x08004b35
 80047e4:	08004bb1 	.word	0x08004bb1

080047e8 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
 8004808:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <SAI_InitI2S+0x2a>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d103      	bne.n	800482e <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	641a      	str	r2, [r3, #64]	; 0x40
 800482c:	e002      	b.n	8004834 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2201      	movs	r2, #1
 8004832:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800483a:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004842:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0U;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	661a      	str	r2, [r3, #96]	; 0x60

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e076      	b.n	800494c <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d107      	bne.n	8004874 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004870:	655a      	str	r2, [r3, #84]	; 0x54
 8004872:	e006      	b.n	8004882 <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800487a:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	655a      	str	r2, [r3, #84]	; 0x54
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b03      	cmp	r3, #3
 8004886:	d84f      	bhi.n	8004928 <SAI_InitI2S+0x12c>
 8004888:	a201      	add	r2, pc, #4	; (adr r2, 8004890 <SAI_InitI2S+0x94>)
 800488a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488e:	bf00      	nop
 8004890:	080048a1 	.word	0x080048a1
 8004894:	080048c3 	.word	0x080048c3
 8004898:	080048e5 	.word	0x080048e5
 800489c:	08004907 	.word	0x08004907

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2280      	movs	r2, #128	; 0x80
 80048a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	085b      	lsrs	r3, r3, #1
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	085b      	lsrs	r3, r3, #1
 80048b4:	011a      	lsls	r2, r3, #4
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2240      	movs	r2, #64	; 0x40
 80048be:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 80048c0:	e034      	b.n	800492c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2280      	movs	r2, #128	; 0x80
 80048c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	085b      	lsrs	r3, r3, #1
 80048cc:	019a      	lsls	r2, r3, #6
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	085b      	lsrs	r3, r3, #1
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2280      	movs	r2, #128	; 0x80
 80048e0:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 80048e2:	e023      	b.n	800492c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	22c0      	movs	r2, #192	; 0xc0
 80048e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	085b      	lsrs	r3, r3, #1
 80048ee:	019a      	lsls	r2, r3, #6
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	085b      	lsrs	r3, r3, #1
 80048f8:	015a      	lsls	r2, r3, #5
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2280      	movs	r2, #128	; 0x80
 8004902:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8004904:	e012      	b.n	800492c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	22e0      	movs	r2, #224	; 0xe0
 800490a:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	085b      	lsrs	r3, r3, #1
 8004910:	019a      	lsls	r2, r3, #6
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	085b      	lsrs	r3, r3, #1
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2280      	movs	r2, #128	; 0x80
 8004924:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8004926:	e001      	b.n	800492c <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e00f      	b.n	800494c <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2b02      	cmp	r3, #2
 8004930:	d10b      	bne.n	800494a <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d102      	bne.n	800493e <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16U;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2210      	movs	r2, #16
 800493c:	659a      	str	r2, [r3, #88]	; 0x58
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b02      	cmp	r3, #2
 8004942:	d102      	bne.n	800494a <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8U;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2208      	movs	r2, #8
 8004948:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
 8004964:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <SAI_InitPCM+0x2a>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2b02      	cmp	r3, #2
 8004980:	d103      	bne.n	800498a <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2201      	movs	r2, #1
 8004986:	641a      	str	r2, [r3, #64]	; 0x40
 8004988:	e002      	b.n	8004990 <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800499c:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80049a4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.FirstBitOffset  = 0U;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049b8:	665a      	str	r2, [r3, #100]	; 0x64

  if (protocol == SAI_PCM_SHORT)
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	2b04      	cmp	r3, #4
 80049be:	d103      	bne.n	80049c8 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2201      	movs	r2, #1
 80049c4:	649a      	str	r2, [r3, #72]	; 0x48
 80049c6:	e002      	b.n	80049ce <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	220d      	movs	r2, #13
 80049cc:	649a      	str	r2, [r3, #72]	; 0x48
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b03      	cmp	r3, #3
 80049d2:	d837      	bhi.n	8004a44 <SAI_InitPCM+0xec>
 80049d4:	a201      	add	r2, pc, #4	; (adr r2, 80049dc <SAI_InitPCM+0x84>)
 80049d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049da:	bf00      	nop
 80049dc:	080049ed 	.word	0x080049ed
 80049e0:	08004a03 	.word	0x08004a03
 80049e4:	08004a19 	.word	0x08004a19
 80049e8:	08004a2f 	.word	0x08004a2f
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2280      	movs	r2, #128	; 0x80
 80049f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	011a      	lsls	r2, r3, #4
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2240      	movs	r2, #64	; 0x40
 80049fe:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8004a00:	e022      	b.n	8004a48 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2280      	movs	r2, #128	; 0x80
 8004a06:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2280      	movs	r2, #128	; 0x80
 8004a14:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8004a16:	e017      	b.n	8004a48 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	22c0      	movs	r2, #192	; 0xc0
 8004a1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2280      	movs	r2, #128	; 0x80
 8004a2a:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8004a2c:	e00c      	b.n	8004a48 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	22e0      	movs	r2, #224	; 0xe0
 8004a32:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2280      	movs	r2, #128	; 0x80
 8004a40:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8004a42:	e001      	b.n	8004a48 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e000      	b.n	8004a4a <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop

08004a58 <SAI_InterruptFlag>:
  *               the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d103      	bne.n	8004a74 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f043 0308 	orr.w	r3, r3, #8
 8004a72:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d10b      	bne.n	8004a94 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004a80:	2b03      	cmp	r3, #3
 8004a82:	d003      	beq.n	8004a8c <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d103      	bne.n	8004a94 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f043 0310 	orr.w	r3, r3, #16
 8004a92:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	2b03      	cmp	r3, #3
 8004a9a:	d003      	beq.n	8004aa4 <SAI_InterruptFlag+0x4c>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d104      	bne.n	8004aae <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	e003      	b.n	8004ab6 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f043 0304 	orr.w	r3, r3, #4
 8004ab4:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004acc:	4b17      	ldr	r3, [pc, #92]	; (8004b2c <SAI_Disable+0x68>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a17      	ldr	r2, [pc, #92]	; (8004b30 <SAI_Disable+0x6c>)
 8004ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad6:	0b1b      	lsrs	r3, r3, #12
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004adc:	2300      	movs	r3, #0
 8004ade:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004aee:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	1e5a      	subs	r2, r3, #1
 8004af4:	60fa      	str	r2, [r7, #12]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10a      	bne.n	8004b10 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      status = HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	72fb      	strb	r3, [r7, #11]
      break;
 8004b0e:	e006      	b.n	8004b1e <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1e8      	bne.n	8004af0 <SAI_Disable+0x2c>

  return status;
 8004b1e:	7afb      	ldrb	r3, [r7, #11]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	20000000 	.word	0x20000000
 8004b30:	95cbec1b 	.word	0x95cbec1b

08004b34 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b40:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b4a:	d01c      	beq.n	8004b86 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0U;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004b62:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004b64:	2100      	movs	r1, #0
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f7ff ff76 	bl	8004a58 <SAI_InterruptFlag>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	43d9      	mvns	r1, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	691a      	ldr	r2, [r3, #16]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	400a      	ands	r2, r1
 8004b7c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f7fb ffff 	bl	8000b8a <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8004b8c:	bf00      	nop
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f7fb fffb 	bl	8000b9e <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8004ba8:	bf00      	nop
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbc:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bc4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d004      	beq.n	8004be2 <SAI_DMAError+0x32>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d112      	bne.n	8004c08 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004bf0:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f7ff ff66 	bl	8004ac4 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f7ff fded 	bl	80047e8 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8004c0e:	bf00      	nop
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
	...

08004c18 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(SAI_HandleTypeDef *hsai)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;

#if defined(STM32F446xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d00c      	beq.n	8004c42 <SAI_BlockSynchroConfig+0x2a>
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d80d      	bhi.n	8004c48 <SAI_BlockSynchroConfig+0x30>
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <SAI_BlockSynchroConfig+0x1e>
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d003      	beq.n	8004c3c <SAI_BlockSynchroConfig+0x24>
 8004c34:	e008      	b.n	8004c48 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 8004c36:	2300      	movs	r3, #0
 8004c38:	60fb      	str	r3, [r7, #12]
      break;
 8004c3a:	e008      	b.n	8004c4e <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004c3c:	2310      	movs	r3, #16
 8004c3e:	60fb      	str	r3, [r7, #12]
      break;
 8004c40:	e005      	b.n	8004c4e <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004c42:	2320      	movs	r3, #32
 8004c44:	60fb      	str	r3, [r7, #12]
      break;
 8004c46:	e002      	b.n	8004c4e <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	60fb      	str	r3, [r7, #12]
      break;
 8004c4c:	bf00      	nop
  }

  if ((hsai->Init.Synchro) == SAI_SYNCHRONOUS_EXT_SAI2)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	2b03      	cmp	r3, #3
 8004c54:	d103      	bne.n	8004c5e <SAI_BlockSynchroConfig+0x46>
  {
    tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f043 0301 	orr.w	r3, r3, #1
 8004c5c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a0b      	ldr	r2, [pc, #44]	; (8004c90 <SAI_BlockSynchroConfig+0x78>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d004      	beq.n	8004c72 <SAI_BlockSynchroConfig+0x5a>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a09      	ldr	r2, [pc, #36]	; (8004c94 <SAI_BlockSynchroConfig+0x7c>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d103      	bne.n	8004c7a <SAI_BlockSynchroConfig+0x62>
  {
    SAI1->GCR = tmpregisterGCR;
 8004c72:	4a09      	ldr	r2, [pc, #36]	; (8004c98 <SAI_BlockSynchroConfig+0x80>)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6013      	str	r3, [r2, #0]
 8004c78:	e003      	b.n	8004c82 <SAI_BlockSynchroConfig+0x6a>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004c7a:	4a08      	ldr	r2, [pc, #32]	; (8004c9c <SAI_BlockSynchroConfig+0x84>)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6013      	str	r3, [r2, #0]
      tmpregisterGCR = 0U;
      break;
  }
  SAI1->GCR = tmpregisterGCR;
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 8004c80:	bf00      	nop
 8004c82:	bf00      	nop
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	40015804 	.word	0x40015804
 8004c94:	40015824 	.word	0x40015824
 8004c98:	40015800 	.word	0x40015800
 8004c9c:	40015c00 	.word	0x40015c00

08004ca0 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(SAI_HandleTypeDef *hsai)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	60fb      	str	r3, [r7, #12]

#if defined(STM32F446xx)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a0a      	ldr	r2, [pc, #40]	; (8004cdc <SAI_GetInputClock+0x3c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d004      	beq.n	8004cc0 <SAI_GetInputClock+0x20>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a09      	ldr	r2, [pc, #36]	; (8004ce0 <SAI_GetInputClock+0x40>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d104      	bne.n	8004cca <SAI_GetInputClock+0x2a>
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004cc0:	2004      	movs	r0, #4
 8004cc2:	f7fe fced 	bl	80036a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	e003      	b.n	8004cd2 <SAI_GetInputClock+0x32>
  }
  else /* SAI2_Block_A || SAI2_Block_B*/
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004cca:	2008      	movs	r0, #8
 8004ccc:	f7fe fce8 	bl	80036a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004cd0:	60f8      	str	r0, [r7, #12]
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	40015804 	.word	0x40015804
 8004ce0:	40015824 	.word	0x40015824

08004ce4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e07b      	b.n	8004dee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d108      	bne.n	8004d10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d06:	d009      	beq.n	8004d1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	61da      	str	r2, [r3, #28]
 8004d0e:	e005      	b.n	8004d1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d106      	bne.n	8004d3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7fb fdc0 	bl	80008bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d64:	431a      	orrs	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da0:	ea42 0103 	orr.w	r1, r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	0c1b      	lsrs	r3, r3, #16
 8004dba:	f003 0104 	and.w	r1, r3, #4
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	f003 0210 	and.w	r2, r3, #16
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	69da      	ldr	r2, [r3, #28]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ddc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3708      	adds	r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b088      	sub	sp, #32
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	60f8      	str	r0, [r7, #12]
 8004dfe:	60b9      	str	r1, [r7, #8]
 8004e00:	603b      	str	r3, [r7, #0]
 8004e02:	4613      	mov	r3, r2
 8004e04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d101      	bne.n	8004e18 <HAL_SPI_Transmit+0x22>
 8004e14:	2302      	movs	r3, #2
 8004e16:	e126      	b.n	8005066 <HAL_SPI_Transmit+0x270>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e20:	f7fb ffa4 	bl	8000d6c <HAL_GetTick>
 8004e24:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004e26:	88fb      	ldrh	r3, [r7, #6]
 8004e28:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d002      	beq.n	8004e3c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004e36:	2302      	movs	r3, #2
 8004e38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e3a:	e10b      	b.n	8005054 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d002      	beq.n	8004e48 <HAL_SPI_Transmit+0x52>
 8004e42:	88fb      	ldrh	r3, [r7, #6]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d102      	bne.n	8004e4e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e4c:	e102      	b.n	8005054 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2203      	movs	r2, #3
 8004e52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	88fa      	ldrh	r2, [r7, #6]
 8004e66:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	88fa      	ldrh	r2, [r7, #6]
 8004e6c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e94:	d10f      	bne.n	8004eb6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ea4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004eb4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec0:	2b40      	cmp	r3, #64	; 0x40
 8004ec2:	d007      	beq.n	8004ed4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ed2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004edc:	d14b      	bne.n	8004f76 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d002      	beq.n	8004eec <HAL_SPI_Transmit+0xf6>
 8004ee6:	8afb      	ldrh	r3, [r7, #22]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d13e      	bne.n	8004f6a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef0:	881a      	ldrh	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efc:	1c9a      	adds	r2, r3, #2
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f10:	e02b      	b.n	8004f6a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d112      	bne.n	8004f46 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f24:	881a      	ldrh	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f30:	1c9a      	adds	r2, r3, #2
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f44:	e011      	b.n	8004f6a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f46:	f7fb ff11 	bl	8000d6c <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d803      	bhi.n	8004f5e <HAL_SPI_Transmit+0x168>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f5c:	d102      	bne.n	8004f64 <HAL_SPI_Transmit+0x16e>
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d102      	bne.n	8004f6a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f68:	e074      	b.n	8005054 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1ce      	bne.n	8004f12 <HAL_SPI_Transmit+0x11c>
 8004f74:	e04c      	b.n	8005010 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d002      	beq.n	8004f84 <HAL_SPI_Transmit+0x18e>
 8004f7e:	8afb      	ldrh	r3, [r7, #22]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d140      	bne.n	8005006 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	330c      	adds	r3, #12
 8004f8e:	7812      	ldrb	r2, [r2, #0]
 8004f90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f96:	1c5a      	adds	r2, r3, #1
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004faa:	e02c      	b.n	8005006 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d113      	bne.n	8004fe2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	330c      	adds	r3, #12
 8004fc4:	7812      	ldrb	r2, [r2, #0]
 8004fc6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	86da      	strh	r2, [r3, #54]	; 0x36
 8004fe0:	e011      	b.n	8005006 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fe2:	f7fb fec3 	bl	8000d6c <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d803      	bhi.n	8004ffa <HAL_SPI_Transmit+0x204>
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ff8:	d102      	bne.n	8005000 <HAL_SPI_Transmit+0x20a>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d102      	bne.n	8005006 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005004:	e026      	b.n	8005054 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800500a:	b29b      	uxth	r3, r3
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1cd      	bne.n	8004fac <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	6839      	ldr	r1, [r7, #0]
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 f8b3 	bl	8005180 <SPI_EndRxTxTransaction>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d002      	beq.n	8005026 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2220      	movs	r2, #32
 8005024:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10a      	bne.n	8005044 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800502e:	2300      	movs	r3, #0
 8005030:	613b      	str	r3, [r7, #16]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	613b      	str	r3, [r7, #16]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	613b      	str	r3, [r7, #16]
 8005042:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	77fb      	strb	r3, [r7, #31]
 8005050:	e000      	b.n	8005054 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005052:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005064:	7ffb      	ldrb	r3, [r7, #31]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3720      	adds	r7, #32
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
	...

08005070 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b088      	sub	sp, #32
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	603b      	str	r3, [r7, #0]
 800507c:	4613      	mov	r3, r2
 800507e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005080:	f7fb fe74 	bl	8000d6c <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005088:	1a9b      	subs	r3, r3, r2
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	4413      	add	r3, r2
 800508e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005090:	f7fb fe6c 	bl	8000d6c <HAL_GetTick>
 8005094:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005096:	4b39      	ldr	r3, [pc, #228]	; (800517c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	015b      	lsls	r3, r3, #5
 800509c:	0d1b      	lsrs	r3, r3, #20
 800509e:	69fa      	ldr	r2, [r7, #28]
 80050a0:	fb02 f303 	mul.w	r3, r2, r3
 80050a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050a6:	e054      	b.n	8005152 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050ae:	d050      	beq.n	8005152 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050b0:	f7fb fe5c 	bl	8000d6c <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	69fa      	ldr	r2, [r7, #28]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d902      	bls.n	80050c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d13d      	bne.n	8005142 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050de:	d111      	bne.n	8005104 <SPI_WaitFlagStateUntilTimeout+0x94>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050e8:	d004      	beq.n	80050f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f2:	d107      	bne.n	8005104 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005102:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800510c:	d10f      	bne.n	800512e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800512c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e017      	b.n	8005172 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d101      	bne.n	800514c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005148:	2300      	movs	r3, #0
 800514a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	3b01      	subs	r3, #1
 8005150:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	4013      	ands	r3, r2
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	429a      	cmp	r2, r3
 8005160:	bf0c      	ite	eq
 8005162:	2301      	moveq	r3, #1
 8005164:	2300      	movne	r3, #0
 8005166:	b2db      	uxtb	r3, r3
 8005168:	461a      	mov	r2, r3
 800516a:	79fb      	ldrb	r3, [r7, #7]
 800516c:	429a      	cmp	r2, r3
 800516e:	d19b      	bne.n	80050a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3720      	adds	r7, #32
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	20000000 	.word	0x20000000

08005180 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b088      	sub	sp, #32
 8005184:	af02      	add	r7, sp, #8
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800518c:	4b1b      	ldr	r3, [pc, #108]	; (80051fc <SPI_EndRxTxTransaction+0x7c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a1b      	ldr	r2, [pc, #108]	; (8005200 <SPI_EndRxTxTransaction+0x80>)
 8005192:	fba2 2303 	umull	r2, r3, r2, r3
 8005196:	0d5b      	lsrs	r3, r3, #21
 8005198:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800519c:	fb02 f303 	mul.w	r3, r2, r3
 80051a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051aa:	d112      	bne.n	80051d2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2200      	movs	r2, #0
 80051b4:	2180      	movs	r1, #128	; 0x80
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f7ff ff5a 	bl	8005070 <SPI_WaitFlagStateUntilTimeout>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d016      	beq.n	80051f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c6:	f043 0220 	orr.w	r2, r3, #32
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e00f      	b.n	80051f2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00a      	beq.n	80051ee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	3b01      	subs	r3, #1
 80051dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e8:	2b80      	cmp	r3, #128	; 0x80
 80051ea:	d0f2      	beq.n	80051d2 <SPI_EndRxTxTransaction+0x52>
 80051ec:	e000      	b.n	80051f0 <SPI_EndRxTxTransaction+0x70>
        break;
 80051ee:	bf00      	nop
  }

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3718      	adds	r7, #24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	20000000 	.word	0x20000000
 8005200:	165e9f81 	.word	0x165e9f81

08005204 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005204:	b084      	sub	sp, #16
 8005206:	b580      	push	{r7, lr}
 8005208:	b084      	sub	sp, #16
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
 800520e:	f107 001c 	add.w	r0, r7, #28
 8005212:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005218:	2b01      	cmp	r3, #1
 800521a:	d122      	bne.n	8005262 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005220:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005246:	2b01      	cmp	r3, #1
 8005248:	d105      	bne.n	8005256 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f001 fb16 	bl	8006888 <USB_CoreReset>
 800525c:	4603      	mov	r3, r0
 800525e:	73fb      	strb	r3, [r7, #15]
 8005260:	e01a      	b.n	8005298 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f001 fb0a 	bl	8006888 <USB_CoreReset>
 8005274:	4603      	mov	r3, r0
 8005276:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800527a:	2b00      	cmp	r3, #0
 800527c:	d106      	bne.n	800528c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005282:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	639a      	str	r2, [r3, #56]	; 0x38
 800528a:	e005      	b.n	8005298 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005290:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529a:	2b01      	cmp	r3, #1
 800529c:	d10b      	bne.n	80052b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f043 0206 	orr.w	r2, r3, #6
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f043 0220 	orr.w	r2, r3, #32
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052c2:	b004      	add	sp, #16
 80052c4:	4770      	bx	lr
	...

080052c8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	4613      	mov	r3, r2
 80052d4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80052d6:	79fb      	ldrb	r3, [r7, #7]
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d165      	bne.n	80053a8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	4a41      	ldr	r2, [pc, #260]	; (80053e4 <USB_SetTurnaroundTime+0x11c>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d906      	bls.n	80052f2 <USB_SetTurnaroundTime+0x2a>
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	4a40      	ldr	r2, [pc, #256]	; (80053e8 <USB_SetTurnaroundTime+0x120>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d202      	bcs.n	80052f2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80052ec:	230f      	movs	r3, #15
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	e062      	b.n	80053b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	4a3c      	ldr	r2, [pc, #240]	; (80053e8 <USB_SetTurnaroundTime+0x120>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d306      	bcc.n	8005308 <USB_SetTurnaroundTime+0x40>
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	4a3b      	ldr	r2, [pc, #236]	; (80053ec <USB_SetTurnaroundTime+0x124>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d202      	bcs.n	8005308 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005302:	230e      	movs	r3, #14
 8005304:	617b      	str	r3, [r7, #20]
 8005306:	e057      	b.n	80053b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	4a38      	ldr	r2, [pc, #224]	; (80053ec <USB_SetTurnaroundTime+0x124>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d306      	bcc.n	800531e <USB_SetTurnaroundTime+0x56>
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	4a37      	ldr	r2, [pc, #220]	; (80053f0 <USB_SetTurnaroundTime+0x128>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d202      	bcs.n	800531e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005318:	230d      	movs	r3, #13
 800531a:	617b      	str	r3, [r7, #20]
 800531c:	e04c      	b.n	80053b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	4a33      	ldr	r2, [pc, #204]	; (80053f0 <USB_SetTurnaroundTime+0x128>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d306      	bcc.n	8005334 <USB_SetTurnaroundTime+0x6c>
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	4a32      	ldr	r2, [pc, #200]	; (80053f4 <USB_SetTurnaroundTime+0x12c>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d802      	bhi.n	8005334 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800532e:	230c      	movs	r3, #12
 8005330:	617b      	str	r3, [r7, #20]
 8005332:	e041      	b.n	80053b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4a2f      	ldr	r2, [pc, #188]	; (80053f4 <USB_SetTurnaroundTime+0x12c>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d906      	bls.n	800534a <USB_SetTurnaroundTime+0x82>
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	4a2e      	ldr	r2, [pc, #184]	; (80053f8 <USB_SetTurnaroundTime+0x130>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d802      	bhi.n	800534a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005344:	230b      	movs	r3, #11
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	e036      	b.n	80053b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	4a2a      	ldr	r2, [pc, #168]	; (80053f8 <USB_SetTurnaroundTime+0x130>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d906      	bls.n	8005360 <USB_SetTurnaroundTime+0x98>
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	4a29      	ldr	r2, [pc, #164]	; (80053fc <USB_SetTurnaroundTime+0x134>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d802      	bhi.n	8005360 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800535a:	230a      	movs	r3, #10
 800535c:	617b      	str	r3, [r7, #20]
 800535e:	e02b      	b.n	80053b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	4a26      	ldr	r2, [pc, #152]	; (80053fc <USB_SetTurnaroundTime+0x134>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d906      	bls.n	8005376 <USB_SetTurnaroundTime+0xae>
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4a25      	ldr	r2, [pc, #148]	; (8005400 <USB_SetTurnaroundTime+0x138>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d202      	bcs.n	8005376 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005370:	2309      	movs	r3, #9
 8005372:	617b      	str	r3, [r7, #20]
 8005374:	e020      	b.n	80053b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	4a21      	ldr	r2, [pc, #132]	; (8005400 <USB_SetTurnaroundTime+0x138>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d306      	bcc.n	800538c <USB_SetTurnaroundTime+0xc4>
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	4a20      	ldr	r2, [pc, #128]	; (8005404 <USB_SetTurnaroundTime+0x13c>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d802      	bhi.n	800538c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005386:	2308      	movs	r3, #8
 8005388:	617b      	str	r3, [r7, #20]
 800538a:	e015      	b.n	80053b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	4a1d      	ldr	r2, [pc, #116]	; (8005404 <USB_SetTurnaroundTime+0x13c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d906      	bls.n	80053a2 <USB_SetTurnaroundTime+0xda>
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	4a1c      	ldr	r2, [pc, #112]	; (8005408 <USB_SetTurnaroundTime+0x140>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d202      	bcs.n	80053a2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800539c:	2307      	movs	r3, #7
 800539e:	617b      	str	r3, [r7, #20]
 80053a0:	e00a      	b.n	80053b8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80053a2:	2306      	movs	r3, #6
 80053a4:	617b      	str	r3, [r7, #20]
 80053a6:	e007      	b.n	80053b8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80053a8:	79fb      	ldrb	r3, [r7, #7]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d102      	bne.n	80053b4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80053ae:	2309      	movs	r3, #9
 80053b0:	617b      	str	r3, [r7, #20]
 80053b2:	e001      	b.n	80053b8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80053b4:	2309      	movs	r3, #9
 80053b6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	68da      	ldr	r2, [r3, #12]
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	029b      	lsls	r3, r3, #10
 80053cc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80053d0:	431a      	orrs	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	371c      	adds	r7, #28
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	00d8acbf 	.word	0x00d8acbf
 80053e8:	00e4e1c0 	.word	0x00e4e1c0
 80053ec:	00f42400 	.word	0x00f42400
 80053f0:	01067380 	.word	0x01067380
 80053f4:	011a499f 	.word	0x011a499f
 80053f8:	01312cff 	.word	0x01312cff
 80053fc:	014ca43f 	.word	0x014ca43f
 8005400:	016e3600 	.word	0x016e3600
 8005404:	01a6ab1f 	.word	0x01a6ab1f
 8005408:	01e84800 	.word	0x01e84800

0800540c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f043 0201 	orr.w	r2, r3, #1
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f023 0201 	bic.w	r2, r3, #1
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	460b      	mov	r3, r1
 800545a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800545c:	2300      	movs	r3, #0
 800545e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800546c:	78fb      	ldrb	r3, [r7, #3]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d115      	bne.n	800549e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800547e:	2001      	movs	r0, #1
 8005480:	f7fb fc80 	bl	8000d84 <HAL_Delay>
      ms++;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	3301      	adds	r3, #1
 8005488:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f001 f96c 	bl	8006768 <USB_GetMode>
 8005490:	4603      	mov	r3, r0
 8005492:	2b01      	cmp	r3, #1
 8005494:	d01e      	beq.n	80054d4 <USB_SetCurrentMode+0x84>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2b31      	cmp	r3, #49	; 0x31
 800549a:	d9f0      	bls.n	800547e <USB_SetCurrentMode+0x2e>
 800549c:	e01a      	b.n	80054d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800549e:	78fb      	ldrb	r3, [r7, #3]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d115      	bne.n	80054d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054b0:	2001      	movs	r0, #1
 80054b2:	f7fb fc67 	bl	8000d84 <HAL_Delay>
      ms++;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	3301      	adds	r3, #1
 80054ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f001 f953 	bl	8006768 <USB_GetMode>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d005      	beq.n	80054d4 <USB_SetCurrentMode+0x84>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2b31      	cmp	r3, #49	; 0x31
 80054cc:	d9f0      	bls.n	80054b0 <USB_SetCurrentMode+0x60>
 80054ce:	e001      	b.n	80054d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e005      	b.n	80054e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2b32      	cmp	r3, #50	; 0x32
 80054d8:	d101      	bne.n	80054de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e000      	b.n	80054e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054e8:	b084      	sub	sp, #16
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b086      	sub	sp, #24
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
 80054f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80054f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80054fa:	2300      	movs	r3, #0
 80054fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005502:	2300      	movs	r3, #0
 8005504:	613b      	str	r3, [r7, #16]
 8005506:	e009      	b.n	800551c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	3340      	adds	r3, #64	; 0x40
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	2200      	movs	r2, #0
 8005514:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	3301      	adds	r3, #1
 800551a:	613b      	str	r3, [r7, #16]
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	2b0e      	cmp	r3, #14
 8005520:	d9f2      	bls.n	8005508 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005524:	2b00      	cmp	r3, #0
 8005526:	d11c      	bne.n	8005562 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005536:	f043 0302 	orr.w	r3, r3, #2
 800553a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005540:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	e005      	b.n	800556e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005566:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005574:	461a      	mov	r2, r3
 8005576:	2300      	movs	r3, #0
 8005578:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005580:	4619      	mov	r1, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005588:	461a      	mov	r2, r3
 800558a:	680b      	ldr	r3, [r1, #0]
 800558c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800558e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005590:	2b01      	cmp	r3, #1
 8005592:	d10c      	bne.n	80055ae <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005596:	2b00      	cmp	r3, #0
 8005598:	d104      	bne.n	80055a4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800559a:	2100      	movs	r1, #0
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f945 	bl	800582c <USB_SetDevSpeed>
 80055a2:	e008      	b.n	80055b6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80055a4:	2101      	movs	r1, #1
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f940 	bl	800582c <USB_SetDevSpeed>
 80055ac:	e003      	b.n	80055b6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80055ae:	2103      	movs	r1, #3
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f93b 	bl	800582c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80055b6:	2110      	movs	r1, #16
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f8f3 	bl	80057a4 <USB_FlushTxFifo>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f90f 	bl	80057ec <USB_FlushRxFifo>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d001      	beq.n	80055d8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055de:	461a      	mov	r2, r3
 80055e0:	2300      	movs	r3, #0
 80055e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ea:	461a      	mov	r2, r3
 80055ec:	2300      	movs	r3, #0
 80055ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f6:	461a      	mov	r2, r3
 80055f8:	2300      	movs	r3, #0
 80055fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055fc:	2300      	movs	r3, #0
 80055fe:	613b      	str	r3, [r7, #16]
 8005600:	e043      	b.n	800568a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005614:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005618:	d118      	bne.n	800564c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10a      	bne.n	8005636 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562c:	461a      	mov	r2, r3
 800562e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005632:	6013      	str	r3, [r2, #0]
 8005634:	e013      	b.n	800565e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	4413      	add	r3, r2
 800563e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005642:	461a      	mov	r2, r3
 8005644:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005648:	6013      	str	r3, [r2, #0]
 800564a:	e008      	b.n	800565e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	015a      	lsls	r2, r3, #5
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4413      	add	r3, r2
 8005654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005658:	461a      	mov	r2, r3
 800565a:	2300      	movs	r3, #0
 800565c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	015a      	lsls	r2, r3, #5
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	4413      	add	r3, r2
 8005666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566a:	461a      	mov	r2, r3
 800566c:	2300      	movs	r3, #0
 800566e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800567c:	461a      	mov	r2, r3
 800567e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005682:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	3301      	adds	r3, #1
 8005688:	613b      	str	r3, [r7, #16]
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	429a      	cmp	r2, r3
 8005690:	d3b7      	bcc.n	8005602 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005692:	2300      	movs	r3, #0
 8005694:	613b      	str	r3, [r7, #16]
 8005696:	e043      	b.n	8005720 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056ae:	d118      	bne.n	80056e2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10a      	bne.n	80056cc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c2:	461a      	mov	r2, r3
 80056c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056c8:	6013      	str	r3, [r2, #0]
 80056ca:	e013      	b.n	80056f4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d8:	461a      	mov	r2, r3
 80056da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056de:	6013      	str	r3, [r2, #0]
 80056e0:	e008      	b.n	80056f4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	015a      	lsls	r2, r3, #5
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4413      	add	r3, r2
 80056ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ee:	461a      	mov	r2, r3
 80056f0:	2300      	movs	r3, #0
 80056f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	015a      	lsls	r2, r3, #5
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4413      	add	r3, r2
 80056fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005700:	461a      	mov	r2, r3
 8005702:	2300      	movs	r3, #0
 8005704:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	4413      	add	r3, r2
 800570e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005712:	461a      	mov	r2, r3
 8005714:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005718:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	3301      	adds	r3, #1
 800571e:	613b      	str	r3, [r7, #16]
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	429a      	cmp	r2, r3
 8005726:	d3b7      	bcc.n	8005698 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005736:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800573a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005748:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800574a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574c:	2b00      	cmp	r3, #0
 800574e:	d105      	bne.n	800575c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	f043 0210 	orr.w	r2, r3, #16
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	699a      	ldr	r2, [r3, #24]
 8005760:	4b0f      	ldr	r3, [pc, #60]	; (80057a0 <USB_DevInit+0x2b8>)
 8005762:	4313      	orrs	r3, r2
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800576a:	2b00      	cmp	r3, #0
 800576c:	d005      	beq.n	800577a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	f043 0208 	orr.w	r2, r3, #8
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800577a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800577c:	2b01      	cmp	r3, #1
 800577e:	d107      	bne.n	8005790 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005788:	f043 0304 	orr.w	r3, r3, #4
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005790:	7dfb      	ldrb	r3, [r7, #23]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3718      	adds	r7, #24
 8005796:	46bd      	mov	sp, r7
 8005798:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800579c:	b004      	add	sp, #16
 800579e:	4770      	bx	lr
 80057a0:	803c3800 	.word	0x803c3800

080057a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057ae:	2300      	movs	r3, #0
 80057b0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	019b      	lsls	r3, r3, #6
 80057b6:	f043 0220 	orr.w	r2, r3, #32
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	3301      	adds	r3, #1
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	4a08      	ldr	r2, [pc, #32]	; (80057e8 <USB_FlushTxFifo+0x44>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d901      	bls.n	80057ce <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e006      	b.n	80057dc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	f003 0320 	and.w	r3, r3, #32
 80057d6:	2b20      	cmp	r3, #32
 80057d8:	d0f1      	beq.n	80057be <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr
 80057e8:	00030d40 	.word	0x00030d40

080057ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057f4:	2300      	movs	r3, #0
 80057f6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2210      	movs	r2, #16
 80057fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	3301      	adds	r3, #1
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	4a08      	ldr	r2, [pc, #32]	; (8005828 <USB_FlushRxFifo+0x3c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d901      	bls.n	800580e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e006      	b.n	800581c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	f003 0310 	and.w	r3, r3, #16
 8005816:	2b10      	cmp	r3, #16
 8005818:	d0f1      	beq.n	80057fe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr
 8005828:	00030d40 	.word	0x00030d40

0800582c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	460b      	mov	r3, r1
 8005836:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	78fb      	ldrb	r3, [r7, #3]
 8005846:	68f9      	ldr	r1, [r7, #12]
 8005848:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800584c:	4313      	orrs	r3, r2
 800584e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800585e:	b480      	push	{r7}
 8005860:	b087      	sub	sp, #28
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f003 0306 	and.w	r3, r3, #6
 8005876:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d102      	bne.n	8005884 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800587e:	2300      	movs	r3, #0
 8005880:	75fb      	strb	r3, [r7, #23]
 8005882:	e00a      	b.n	800589a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2b02      	cmp	r3, #2
 8005888:	d002      	beq.n	8005890 <USB_GetDevSpeed+0x32>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2b06      	cmp	r3, #6
 800588e:	d102      	bne.n	8005896 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005890:	2302      	movs	r3, #2
 8005892:	75fb      	strb	r3, [r7, #23]
 8005894:	e001      	b.n	800589a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005896:	230f      	movs	r3, #15
 8005898:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800589a:	7dfb      	ldrb	r3, [r7, #23]
}
 800589c:	4618      	mov	r0, r3
 800589e:	371c      	adds	r7, #28
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	785b      	ldrb	r3, [r3, #1]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d13a      	bne.n	800593a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ca:	69da      	ldr	r2, [r3, #28]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	f003 030f 	and.w	r3, r3, #15
 80058d4:	2101      	movs	r1, #1
 80058d6:	fa01 f303 	lsl.w	r3, r1, r3
 80058da:	b29b      	uxth	r3, r3
 80058dc:	68f9      	ldr	r1, [r7, #12]
 80058de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058e2:	4313      	orrs	r3, r2
 80058e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	015a      	lsls	r2, r3, #5
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d155      	bne.n	80059a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	015a      	lsls	r2, r3, #5
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4413      	add	r3, r2
 8005904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	78db      	ldrb	r3, [r3, #3]
 8005916:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005918:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	059b      	lsls	r3, r3, #22
 800591e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005920:	4313      	orrs	r3, r2
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	0151      	lsls	r1, r2, #5
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	440a      	add	r2, r1
 800592a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800592e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005936:	6013      	str	r3, [r2, #0]
 8005938:	e036      	b.n	80059a8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005940:	69da      	ldr	r2, [r3, #28]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	f003 030f 	and.w	r3, r3, #15
 800594a:	2101      	movs	r1, #1
 800594c:	fa01 f303 	lsl.w	r3, r1, r3
 8005950:	041b      	lsls	r3, r3, #16
 8005952:	68f9      	ldr	r1, [r7, #12]
 8005954:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005958:	4313      	orrs	r3, r2
 800595a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	015a      	lsls	r2, r3, #5
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4413      	add	r3, r2
 8005964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d11a      	bne.n	80059a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	4413      	add	r3, r2
 800597a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	78db      	ldrb	r3, [r3, #3]
 800598c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800598e:	430b      	orrs	r3, r1
 8005990:	4313      	orrs	r3, r2
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	0151      	lsls	r1, r2, #5
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	440a      	add	r2, r1
 800599a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800599e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059a6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
	...

080059b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	785b      	ldrb	r3, [r3, #1]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d161      	bne.n	8005a98 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059ea:	d11f      	bne.n	8005a2c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	0151      	lsls	r1, r2, #5
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	440a      	add	r2, r1
 8005a02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a0a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	0151      	lsls	r1, r2, #5
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	440a      	add	r2, r1
 8005a22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	f003 030f 	and.w	r3, r3, #15
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	43db      	mvns	r3, r3
 8005a46:	68f9      	ldr	r1, [r7, #12]
 8005a48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a56:	69da      	ldr	r2, [r3, #28]
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	f003 030f 	and.w	r3, r3, #15
 8005a60:	2101      	movs	r1, #1
 8005a62:	fa01 f303 	lsl.w	r3, r1, r3
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	43db      	mvns	r3, r3
 8005a6a:	68f9      	ldr	r1, [r7, #12]
 8005a6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a70:	4013      	ands	r3, r2
 8005a72:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	0159      	lsls	r1, r3, #5
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	440b      	add	r3, r1
 8005a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a8e:	4619      	mov	r1, r3
 8005a90:	4b35      	ldr	r3, [pc, #212]	; (8005b68 <USB_DeactivateEndpoint+0x1b0>)
 8005a92:	4013      	ands	r3, r2
 8005a94:	600b      	str	r3, [r1, #0]
 8005a96:	e060      	b.n	8005b5a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aae:	d11f      	bne.n	8005af0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	0151      	lsls	r1, r2, #5
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	440a      	add	r2, r1
 8005ac6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ace:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	0151      	lsls	r1, r2, #5
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	440a      	add	r2, r1
 8005ae6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005aee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	f003 030f 	and.w	r3, r3, #15
 8005b00:	2101      	movs	r1, #1
 8005b02:	fa01 f303 	lsl.w	r3, r1, r3
 8005b06:	041b      	lsls	r3, r3, #16
 8005b08:	43db      	mvns	r3, r3
 8005b0a:	68f9      	ldr	r1, [r7, #12]
 8005b0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b10:	4013      	ands	r3, r2
 8005b12:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b1a:	69da      	ldr	r2, [r3, #28]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	f003 030f 	and.w	r3, r3, #15
 8005b24:	2101      	movs	r1, #1
 8005b26:	fa01 f303 	lsl.w	r3, r1, r3
 8005b2a:	041b      	lsls	r3, r3, #16
 8005b2c:	43db      	mvns	r3, r3
 8005b2e:	68f9      	ldr	r1, [r7, #12]
 8005b30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b34:	4013      	ands	r3, r2
 8005b36:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	0159      	lsls	r1, r3, #5
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	440b      	add	r3, r1
 8005b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b52:	4619      	mov	r1, r3
 8005b54:	4b05      	ldr	r3, [pc, #20]	; (8005b6c <USB_DeactivateEndpoint+0x1b4>)
 8005b56:	4013      	ands	r3, r2
 8005b58:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr
 8005b68:	ec337800 	.word	0xec337800
 8005b6c:	eff37800 	.word	0xeff37800

08005b70 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b08a      	sub	sp, #40	; 0x28
 8005b74:	af02      	add	r7, sp, #8
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	785b      	ldrb	r3, [r3, #1]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	f040 815c 	bne.w	8005e4a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d132      	bne.n	8005c00 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	0151      	lsls	r1, r2, #5
 8005bac:	69fa      	ldr	r2, [r7, #28]
 8005bae:	440a      	add	r2, r1
 8005bb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bb4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bb8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	015a      	lsls	r2, r3, #5
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	0151      	lsls	r1, r2, #5
 8005bd0:	69fa      	ldr	r2, [r7, #28]
 8005bd2:	440a      	add	r2, r1
 8005bd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	69ba      	ldr	r2, [r7, #24]
 8005bee:	0151      	lsls	r1, r2, #5
 8005bf0:	69fa      	ldr	r2, [r7, #28]
 8005bf2:	440a      	add	r2, r1
 8005bf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bf8:	0cdb      	lsrs	r3, r3, #19
 8005bfa:	04db      	lsls	r3, r3, #19
 8005bfc:	6113      	str	r3, [r2, #16]
 8005bfe:	e074      	b.n	8005cea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	0151      	lsls	r1, r2, #5
 8005c12:	69fa      	ldr	r2, [r7, #28]
 8005c14:	440a      	add	r2, r1
 8005c16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c1a:	0cdb      	lsrs	r3, r3, #19
 8005c1c:	04db      	lsls	r3, r3, #19
 8005c1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	0151      	lsls	r1, r2, #5
 8005c32:	69fa      	ldr	r2, [r7, #28]
 8005c34:	440a      	add	r2, r1
 8005c36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c3a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c3e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c50:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	6959      	ldr	r1, [r3, #20]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	440b      	add	r3, r1
 8005c5c:	1e59      	subs	r1, r3, #1
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c66:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c68:	4b9d      	ldr	r3, [pc, #628]	; (8005ee0 <USB_EPStartXfer+0x370>)
 8005c6a:	400b      	ands	r3, r1
 8005c6c:	69b9      	ldr	r1, [r7, #24]
 8005c6e:	0148      	lsls	r0, r1, #5
 8005c70:	69f9      	ldr	r1, [r7, #28]
 8005c72:	4401      	add	r1, r0
 8005c74:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	015a      	lsls	r2, r3, #5
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c88:	691a      	ldr	r2, [r3, #16]
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c92:	69b9      	ldr	r1, [r7, #24]
 8005c94:	0148      	lsls	r0, r1, #5
 8005c96:	69f9      	ldr	r1, [r7, #28]
 8005c98:	4401      	add	r1, r0
 8005c9a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	78db      	ldrb	r3, [r3, #3]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d11f      	bne.n	8005cea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	0151      	lsls	r1, r2, #5
 8005cbc:	69fa      	ldr	r2, [r7, #28]
 8005cbe:	440a      	add	r2, r1
 8005cc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cc4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005cc8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	0151      	lsls	r1, r2, #5
 8005cdc:	69fa      	ldr	r2, [r7, #28]
 8005cde:	440a      	add	r2, r1
 8005ce0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ce4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ce8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005cea:	79fb      	ldrb	r3, [r7, #7]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d14b      	bne.n	8005d88 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d009      	beq.n	8005d0c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d04:	461a      	mov	r2, r3
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	78db      	ldrb	r3, [r3, #3]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d128      	bne.n	8005d66 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d110      	bne.n	8005d46 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	0151      	lsls	r1, r2, #5
 8005d36:	69fa      	ldr	r2, [r7, #28]
 8005d38:	440a      	add	r2, r1
 8005d3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d42:	6013      	str	r3, [r2, #0]
 8005d44:	e00f      	b.n	8005d66 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	015a      	lsls	r2, r3, #5
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	0151      	lsls	r1, r2, #5
 8005d58:	69fa      	ldr	r2, [r7, #28]
 8005d5a:	440a      	add	r2, r1
 8005d5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d64:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	69ba      	ldr	r2, [r7, #24]
 8005d76:	0151      	lsls	r1, r2, #5
 8005d78:	69fa      	ldr	r2, [r7, #28]
 8005d7a:	440a      	add	r2, r1
 8005d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d84:	6013      	str	r3, [r2, #0]
 8005d86:	e12f      	b.n	8005fe8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	69ba      	ldr	r2, [r7, #24]
 8005d98:	0151      	lsls	r1, r2, #5
 8005d9a:	69fa      	ldr	r2, [r7, #28]
 8005d9c:	440a      	add	r2, r1
 8005d9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005da2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005da6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	78db      	ldrb	r3, [r3, #3]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d015      	beq.n	8005ddc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	695b      	ldr	r3, [r3, #20]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 8117 	beq.w	8005fe8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	f003 030f 	and.w	r3, r3, #15
 8005dca:	2101      	movs	r1, #1
 8005dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd0:	69f9      	ldr	r1, [r7, #28]
 8005dd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	634b      	str	r3, [r1, #52]	; 0x34
 8005dda:	e105      	b.n	8005fe8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d110      	bne.n	8005e0e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	015a      	lsls	r2, r3, #5
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	0151      	lsls	r1, r2, #5
 8005dfe:	69fa      	ldr	r2, [r7, #28]
 8005e00:	440a      	add	r2, r1
 8005e02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e0a:	6013      	str	r3, [r2, #0]
 8005e0c:	e00f      	b.n	8005e2e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	0151      	lsls	r1, r2, #5
 8005e20:	69fa      	ldr	r2, [r7, #28]
 8005e22:	440a      	add	r2, r1
 8005e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e2c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	68d9      	ldr	r1, [r3, #12]
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	781a      	ldrb	r2, [r3, #0]
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	b298      	uxth	r0, r3
 8005e3c:	79fb      	ldrb	r3, [r7, #7]
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	4603      	mov	r3, r0
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f000 fa2b 	bl	800629e <USB_WritePacket>
 8005e48:	e0ce      	b.n	8005fe8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	69ba      	ldr	r2, [r7, #24]
 8005e5a:	0151      	lsls	r1, r2, #5
 8005e5c:	69fa      	ldr	r2, [r7, #28]
 8005e5e:	440a      	add	r2, r1
 8005e60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e64:	0cdb      	lsrs	r3, r3, #19
 8005e66:	04db      	lsls	r3, r3, #19
 8005e68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	0151      	lsls	r1, r2, #5
 8005e7c:	69fa      	ldr	r2, [r7, #28]
 8005e7e:	440a      	add	r2, r1
 8005e80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e8c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d126      	bne.n	8005ee4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea2:	691a      	ldr	r2, [r3, #16]
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eac:	69b9      	ldr	r1, [r7, #24]
 8005eae:	0148      	lsls	r0, r1, #5
 8005eb0:	69f9      	ldr	r1, [r7, #28]
 8005eb2:	4401      	add	r1, r0
 8005eb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	0151      	lsls	r1, r2, #5
 8005ece:	69fa      	ldr	r2, [r7, #28]
 8005ed0:	440a      	add	r2, r1
 8005ed2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ed6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005eda:	6113      	str	r3, [r2, #16]
 8005edc:	e036      	b.n	8005f4c <USB_EPStartXfer+0x3dc>
 8005ede:	bf00      	nop
 8005ee0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	695a      	ldr	r2, [r3, #20]
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	4413      	add	r3, r2
 8005eee:	1e5a      	subs	r2, r3, #1
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f06:	691a      	ldr	r2, [r3, #16]
 8005f08:	8afb      	ldrh	r3, [r7, #22]
 8005f0a:	04d9      	lsls	r1, r3, #19
 8005f0c:	4b39      	ldr	r3, [pc, #228]	; (8005ff4 <USB_EPStartXfer+0x484>)
 8005f0e:	400b      	ands	r3, r1
 8005f10:	69b9      	ldr	r1, [r7, #24]
 8005f12:	0148      	lsls	r0, r1, #5
 8005f14:	69f9      	ldr	r1, [r7, #28]
 8005f16:	4401      	add	r1, r0
 8005f18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2c:	691a      	ldr	r2, [r3, #16]
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	8af9      	ldrh	r1, [r7, #22]
 8005f34:	fb01 f303 	mul.w	r3, r1, r3
 8005f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f3c:	69b9      	ldr	r1, [r7, #24]
 8005f3e:	0148      	lsls	r0, r1, #5
 8005f40:	69f9      	ldr	r1, [r7, #28]
 8005f42:	4401      	add	r1, r0
 8005f44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f4c:	79fb      	ldrb	r3, [r7, #7]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d10d      	bne.n	8005f6e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d009      	beq.n	8005f6e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	68d9      	ldr	r1, [r3, #12]
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6a:	460a      	mov	r2, r1
 8005f6c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	78db      	ldrb	r3, [r3, #3]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d128      	bne.n	8005fc8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d110      	bne.n	8005fa8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	015a      	lsls	r2, r3, #5
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	69ba      	ldr	r2, [r7, #24]
 8005f96:	0151      	lsls	r1, r2, #5
 8005f98:	69fa      	ldr	r2, [r7, #28]
 8005f9a:	440a      	add	r2, r1
 8005f9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fa0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fa4:	6013      	str	r3, [r2, #0]
 8005fa6:	e00f      	b.n	8005fc8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	69ba      	ldr	r2, [r7, #24]
 8005fb8:	0151      	lsls	r1, r2, #5
 8005fba:	69fa      	ldr	r2, [r7, #28]
 8005fbc:	440a      	add	r2, r1
 8005fbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fc6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	0151      	lsls	r1, r2, #5
 8005fda:	69fa      	ldr	r2, [r7, #28]
 8005fdc:	440a      	add	r2, r1
 8005fde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fe2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fe6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3720      	adds	r7, #32
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	1ff80000 	.word	0x1ff80000

08005ff8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b087      	sub	sp, #28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	4613      	mov	r3, r2
 8006004:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	785b      	ldrb	r3, [r3, #1]
 8006014:	2b01      	cmp	r3, #1
 8006016:	f040 80cd 	bne.w	80061b4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d132      	bne.n	8006088 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	015a      	lsls	r2, r3, #5
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	4413      	add	r3, r2
 800602a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	0151      	lsls	r1, r2, #5
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	440a      	add	r2, r1
 8006038:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800603c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006040:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006044:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	4413      	add	r3, r2
 800604e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	0151      	lsls	r1, r2, #5
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	440a      	add	r2, r1
 800605c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006060:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006064:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	015a      	lsls	r2, r3, #5
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	4413      	add	r3, r2
 800606e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	0151      	lsls	r1, r2, #5
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	440a      	add	r2, r1
 800607c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006080:	0cdb      	lsrs	r3, r3, #19
 8006082:	04db      	lsls	r3, r3, #19
 8006084:	6113      	str	r3, [r2, #16]
 8006086:	e04e      	b.n	8006126 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	015a      	lsls	r2, r3, #5
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	4413      	add	r3, r2
 8006090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	0151      	lsls	r1, r2, #5
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	440a      	add	r2, r1
 800609e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060a2:	0cdb      	lsrs	r3, r3, #19
 80060a4:	04db      	lsls	r3, r3, #19
 80060a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	015a      	lsls	r2, r3, #5
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	4413      	add	r3, r2
 80060b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	0151      	lsls	r1, r2, #5
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	440a      	add	r2, r1
 80060be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060ca:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	695a      	ldr	r2, [r3, #20]
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d903      	bls.n	80060e0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	689a      	ldr	r2, [r3, #8]
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	015a      	lsls	r2, r3, #5
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	0151      	lsls	r1, r2, #5
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	440a      	add	r2, r1
 80060f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	4413      	add	r3, r2
 8006108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800610c:	691a      	ldr	r2, [r3, #16]
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006116:	6939      	ldr	r1, [r7, #16]
 8006118:	0148      	lsls	r0, r1, #5
 800611a:	6979      	ldr	r1, [r7, #20]
 800611c:	4401      	add	r1, r0
 800611e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006122:	4313      	orrs	r3, r2
 8006124:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006126:	79fb      	ldrb	r3, [r7, #7]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d11e      	bne.n	800616a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d009      	beq.n	8006148 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006140:	461a      	mov	r2, r3
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	0151      	lsls	r1, r2, #5
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	440a      	add	r2, r1
 800615e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006162:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006166:	6013      	str	r3, [r2, #0]
 8006168:	e092      	b.n	8006290 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	4413      	add	r3, r2
 8006172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	0151      	lsls	r1, r2, #5
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	440a      	add	r2, r1
 8006180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006184:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006188:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d07e      	beq.n	8006290 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006198:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	f003 030f 	and.w	r3, r3, #15
 80061a2:	2101      	movs	r1, #1
 80061a4:	fa01 f303 	lsl.w	r3, r1, r3
 80061a8:	6979      	ldr	r1, [r7, #20]
 80061aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061ae:	4313      	orrs	r3, r2
 80061b0:	634b      	str	r3, [r1, #52]	; 0x34
 80061b2:	e06d      	b.n	8006290 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	0151      	lsls	r1, r2, #5
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	440a      	add	r2, r1
 80061ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061ce:	0cdb      	lsrs	r3, r3, #19
 80061d0:	04db      	lsls	r3, r3, #19
 80061d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	0151      	lsls	r1, r2, #5
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	440a      	add	r2, r1
 80061ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061f6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d003      	beq.n	8006208 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	4413      	add	r3, r2
 8006210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	0151      	lsls	r1, r2, #5
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	440a      	add	r2, r1
 800621e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006222:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006226:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	4413      	add	r3, r2
 8006230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006234:	691a      	ldr	r2, [r3, #16]
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800623e:	6939      	ldr	r1, [r7, #16]
 8006240:	0148      	lsls	r0, r1, #5
 8006242:	6979      	ldr	r1, [r7, #20]
 8006244:	4401      	add	r1, r0
 8006246:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800624a:	4313      	orrs	r3, r2
 800624c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800624e:	79fb      	ldrb	r3, [r7, #7]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d10d      	bne.n	8006270 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d009      	beq.n	8006270 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	68d9      	ldr	r1, [r3, #12]
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	4413      	add	r3, r2
 8006268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626c:	460a      	mov	r2, r1
 800626e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	0151      	lsls	r1, r2, #5
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	440a      	add	r2, r1
 8006286:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800628a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800628e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	371c      	adds	r7, #28
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr

0800629e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800629e:	b480      	push	{r7}
 80062a0:	b089      	sub	sp, #36	; 0x24
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	60f8      	str	r0, [r7, #12]
 80062a6:	60b9      	str	r1, [r7, #8]
 80062a8:	4611      	mov	r1, r2
 80062aa:	461a      	mov	r2, r3
 80062ac:	460b      	mov	r3, r1
 80062ae:	71fb      	strb	r3, [r7, #7]
 80062b0:	4613      	mov	r3, r2
 80062b2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80062bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d123      	bne.n	800630c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80062c4:	88bb      	ldrh	r3, [r7, #4]
 80062c6:	3303      	adds	r3, #3
 80062c8:	089b      	lsrs	r3, r3, #2
 80062ca:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80062cc:	2300      	movs	r3, #0
 80062ce:	61bb      	str	r3, [r7, #24]
 80062d0:	e018      	b.n	8006304 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80062d2:	79fb      	ldrb	r3, [r7, #7]
 80062d4:	031a      	lsls	r2, r3, #12
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062de:	461a      	mov	r2, r3
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	3301      	adds	r3, #1
 80062ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	3301      	adds	r3, #1
 80062f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	3301      	adds	r3, #1
 80062f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	3301      	adds	r3, #1
 80062fc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	3301      	adds	r3, #1
 8006302:	61bb      	str	r3, [r7, #24]
 8006304:	69ba      	ldr	r2, [r7, #24]
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	429a      	cmp	r2, r3
 800630a:	d3e2      	bcc.n	80062d2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3724      	adds	r7, #36	; 0x24
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800631a:	b480      	push	{r7}
 800631c:	b08b      	sub	sp, #44	; 0x2c
 800631e:	af00      	add	r7, sp, #0
 8006320:	60f8      	str	r0, [r7, #12]
 8006322:	60b9      	str	r1, [r7, #8]
 8006324:	4613      	mov	r3, r2
 8006326:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006330:	88fb      	ldrh	r3, [r7, #6]
 8006332:	089b      	lsrs	r3, r3, #2
 8006334:	b29b      	uxth	r3, r3
 8006336:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006338:	88fb      	ldrh	r3, [r7, #6]
 800633a:	f003 0303 	and.w	r3, r3, #3
 800633e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006340:	2300      	movs	r3, #0
 8006342:	623b      	str	r3, [r7, #32]
 8006344:	e014      	b.n	8006370 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006350:	601a      	str	r2, [r3, #0]
    pDest++;
 8006352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006354:	3301      	adds	r3, #1
 8006356:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635a:	3301      	adds	r3, #1
 800635c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	3301      	adds	r3, #1
 8006362:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006366:	3301      	adds	r3, #1
 8006368:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	3301      	adds	r3, #1
 800636e:	623b      	str	r3, [r7, #32]
 8006370:	6a3a      	ldr	r2, [r7, #32]
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	429a      	cmp	r2, r3
 8006376:	d3e6      	bcc.n	8006346 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006378:	8bfb      	ldrh	r3, [r7, #30]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d01e      	beq.n	80063bc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800637e:	2300      	movs	r3, #0
 8006380:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006388:	461a      	mov	r2, r3
 800638a:	f107 0310 	add.w	r3, r7, #16
 800638e:	6812      	ldr	r2, [r2, #0]
 8006390:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	b2db      	uxtb	r3, r3
 8006398:	00db      	lsls	r3, r3, #3
 800639a:	fa22 f303 	lsr.w	r3, r2, r3
 800639e:	b2da      	uxtb	r2, r3
 80063a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a2:	701a      	strb	r2, [r3, #0]
      i++;
 80063a4:	6a3b      	ldr	r3, [r7, #32]
 80063a6:	3301      	adds	r3, #1
 80063a8:	623b      	str	r3, [r7, #32]
      pDest++;
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	3301      	adds	r3, #1
 80063ae:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80063b0:	8bfb      	ldrh	r3, [r7, #30]
 80063b2:	3b01      	subs	r3, #1
 80063b4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80063b6:	8bfb      	ldrh	r3, [r7, #30]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1ea      	bne.n	8006392 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80063be:	4618      	mov	r0, r3
 80063c0:	372c      	adds	r7, #44	; 0x2c
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b085      	sub	sp, #20
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	785b      	ldrb	r3, [r3, #1]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d12c      	bne.n	8006440 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	db12      	blt.n	800641e <USB_EPSetStall+0x54>
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00f      	beq.n	800641e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4413      	add	r3, r2
 8006406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	0151      	lsls	r1, r2, #5
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	440a      	add	r2, r1
 8006414:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006418:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800641c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	4413      	add	r3, r2
 8006426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	0151      	lsls	r1, r2, #5
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	440a      	add	r2, r1
 8006434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006438:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800643c:	6013      	str	r3, [r2, #0]
 800643e:	e02b      	b.n	8006498 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	4413      	add	r3, r2
 8006448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	db12      	blt.n	8006478 <USB_EPSetStall+0xae>
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00f      	beq.n	8006478 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	0151      	lsls	r1, r2, #5
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	440a      	add	r2, r1
 800646e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006472:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006476:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	015a      	lsls	r2, r3, #5
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	4413      	add	r3, r2
 8006480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	0151      	lsls	r1, r2, #5
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	440a      	add	r2, r1
 800648e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006492:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006496:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b085      	sub	sp, #20
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
 80064ae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	785b      	ldrb	r3, [r3, #1]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d128      	bne.n	8006514 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	015a      	lsls	r2, r3, #5
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	4413      	add	r3, r2
 80064ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	0151      	lsls	r1, r2, #5
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	440a      	add	r2, r1
 80064d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	78db      	ldrb	r3, [r3, #3]
 80064e6:	2b03      	cmp	r3, #3
 80064e8:	d003      	beq.n	80064f2 <USB_EPClearStall+0x4c>
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	78db      	ldrb	r3, [r3, #3]
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d138      	bne.n	8006564 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	015a      	lsls	r2, r3, #5
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4413      	add	r3, r2
 80064fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	0151      	lsls	r1, r2, #5
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	440a      	add	r2, r1
 8006508:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800650c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006510:	6013      	str	r3, [r2, #0]
 8006512:	e027      	b.n	8006564 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4413      	add	r3, r2
 800651c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	0151      	lsls	r1, r2, #5
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	440a      	add	r2, r1
 800652a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800652e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006532:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	78db      	ldrb	r3, [r3, #3]
 8006538:	2b03      	cmp	r3, #3
 800653a:	d003      	beq.n	8006544 <USB_EPClearStall+0x9e>
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	78db      	ldrb	r3, [r3, #3]
 8006540:	2b02      	cmp	r3, #2
 8006542:	d10f      	bne.n	8006564 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	4413      	add	r3, r2
 800654c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	0151      	lsls	r1, r2, #5
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	440a      	add	r2, r1
 800655a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800655e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006562:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006572:	b480      	push	{r7}
 8006574:	b085      	sub	sp, #20
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	460b      	mov	r3, r1
 800657c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006590:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006594:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	78fb      	ldrb	r3, [r7, #3]
 80065a0:	011b      	lsls	r3, r3, #4
 80065a2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80065a6:	68f9      	ldr	r1, [r7, #12]
 80065a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065ac:	4313      	orrs	r3, r2
 80065ae:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3714      	adds	r7, #20
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80065be:	b480      	push	{r7}
 80065c0:	b085      	sub	sp, #20
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80065d8:	f023 0303 	bic.w	r3, r3, #3
 80065dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065ec:	f023 0302 	bic.w	r3, r3, #2
 80065f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800661a:	f023 0303 	bic.w	r3, r3, #3
 800661e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800662e:	f043 0302 	orr.w	r3, r3, #2
 8006632:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006642:	b480      	push	{r7}
 8006644:	b085      	sub	sp, #20
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	4013      	ands	r3, r2
 8006658:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800665a:	68fb      	ldr	r3, [r7, #12]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800667a:	699b      	ldr	r3, [r3, #24]
 800667c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006684:	69db      	ldr	r3, [r3, #28]
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	4013      	ands	r3, r2
 800668a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	0c1b      	lsrs	r3, r3, #16
}
 8006690:	4618      	mov	r0, r3
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b8:	69db      	ldr	r3, [r3, #28]
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	4013      	ands	r3, r2
 80066be:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	b29b      	uxth	r3, r3
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3714      	adds	r7, #20
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	460b      	mov	r3, r1
 80066da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80066e0:	78fb      	ldrb	r3, [r7, #3]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	4013      	ands	r3, r2
 80066fc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066fe:	68bb      	ldr	r3, [r7, #8]
}
 8006700:	4618      	mov	r0, r3
 8006702:	3714      	adds	r7, #20
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800670c:	b480      	push	{r7}
 800670e:	b087      	sub	sp, #28
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	460b      	mov	r3, r1
 8006716:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800672c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800672e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006730:	78fb      	ldrb	r3, [r7, #3]
 8006732:	f003 030f 	and.w	r3, r3, #15
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	fa22 f303 	lsr.w	r3, r2, r3
 800673c:	01db      	lsls	r3, r3, #7
 800673e:	b2db      	uxtb	r3, r3
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	4313      	orrs	r3, r2
 8006744:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006746:	78fb      	ldrb	r3, [r7, #3]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	4413      	add	r3, r2
 800674e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	4013      	ands	r3, r2
 8006758:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800675a:	68bb      	ldr	r3, [r7, #8]
}
 800675c:	4618      	mov	r0, r3
 800675e:	371c      	adds	r7, #28
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	f003 0301 	and.w	r3, r3, #1
}
 8006778:	4618      	mov	r0, r3
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800679e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80067a2:	f023 0307 	bic.w	r3, r3, #7
 80067a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3714      	adds	r7, #20
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
	...

080067cc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b087      	sub	sp, #28
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	460b      	mov	r3, r1
 80067d6:	607a      	str	r2, [r7, #4]
 80067d8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	333c      	adds	r3, #60	; 0x3c
 80067e2:	3304      	adds	r3, #4
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	4a26      	ldr	r2, [pc, #152]	; (8006884 <USB_EP0_OutStart+0xb8>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d90a      	bls.n	8006806 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006800:	d101      	bne.n	8006806 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006802:	2300      	movs	r3, #0
 8006804:	e037      	b.n	8006876 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800680c:	461a      	mov	r2, r3
 800680e:	2300      	movs	r3, #0
 8006810:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006820:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006824:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006834:	f043 0318 	orr.w	r3, r3, #24
 8006838:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006848:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800684c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800684e:	7afb      	ldrb	r3, [r7, #11]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d10f      	bne.n	8006874 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800685a:	461a      	mov	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800686e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006872:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	371c      	adds	r7, #28
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	4f54300a 	.word	0x4f54300a

08006888 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006890:	2300      	movs	r3, #0
 8006892:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	3301      	adds	r3, #1
 8006898:	60fb      	str	r3, [r7, #12]
 800689a:	4a13      	ldr	r2, [pc, #76]	; (80068e8 <USB_CoreReset+0x60>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d901      	bls.n	80068a4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80068a0:	2303      	movs	r3, #3
 80068a2:	e01a      	b.n	80068da <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	daf3      	bge.n	8006894 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80068ac:	2300      	movs	r3, #0
 80068ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	f043 0201 	orr.w	r2, r3, #1
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	3301      	adds	r3, #1
 80068c0:	60fb      	str	r3, [r7, #12]
 80068c2:	4a09      	ldr	r2, [pc, #36]	; (80068e8 <USB_CoreReset+0x60>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d901      	bls.n	80068cc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e006      	b.n	80068da <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d0f1      	beq.n	80068bc <USB_CoreReset+0x34>

  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	00030d40 	.word	0x00030d40

080068ec <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	460b      	mov	r3, r1
 80068f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

  /* Allocate Audio structure */
  haudio = USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 80068f8:	f643 4050 	movw	r0, #15440	; 0x3c50
 80068fc:	f002 f9fe 	bl	8008cfc <USBD_static_malloc>
 8006900:	60f8      	str	r0, [r7, #12]

  if (haudio == NULL)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d105      	bne.n	8006914 <USBD_AUDIO_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006910:	2302      	movs	r3, #2
 8006912:	e04b      	b.n	80069ac <USBD_AUDIO_Init+0xc0>
  }

  pdev->pClassData = (void *)haudio;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	7c1b      	ldrb	r3, [r3, #16]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d104      	bne.n	800692e <USBD_AUDIO_Init+0x42>
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 800692c:	e003      	b.n	8006936 <USBD_AUDIO_Init+0x4a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIO_OUT_EP, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 8006936:	23c0      	movs	r3, #192	; 0xc0
 8006938:	2201      	movs	r2, #1
 800693a:	2101      	movs	r1, #1
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f002 f86c 	bl	8008a1a <USBD_LL_OpenEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 1U;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  haudio->alt_setting = 0U;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006956:	3304      	adds	r3, #4
 8006958:	2203      	movs	r2, #3
 800695a:	701a      	strb	r2, [r3, #0]
  haudio->wr_ptr = 0U;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006962:	3308      	adds	r3, #8
 8006964:	2200      	movs	r2, #0
 8006966:	801a      	strh	r2, [r3, #0]
  haudio->rd_ptr = 0U;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800696e:	3306      	adds	r3, #6
 8006970:	2200      	movs	r2, #0
 8006972:	801a      	strh	r2, [r3, #0]
  haudio->rd_enable = 0U;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800697a:	3305      	adds	r3, #5
 800697c:	2200      	movs	r2, #0
 800697e:	701a      	strb	r2, [r3, #0]

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Init(USBD_AUDIO_FREQ,
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2200      	movs	r2, #0
 800698a:	2146      	movs	r1, #70	; 0x46
 800698c:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8006990:	4798      	blx	r3
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <USBD_AUDIO_Init+0xb0>
                                                       AUDIO_DEFAULT_VOLUME,
                                                       0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 8006998:	2303      	movs	r3, #3
 800699a:	e007      	b.n	80069ac <USBD_AUDIO_Init+0xc0>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, haudio->buffer,
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	1d1a      	adds	r2, r3, #4
 80069a0:	23c0      	movs	r3, #192	; 0xc0
 80069a2:	2101      	movs	r1, #1
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f002 f927 	bl	8008bf8 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	460b      	mov	r3, r1
 80069be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIO_OUT_EP);
 80069c0:	2101      	movs	r1, #1
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f002 f84f 	bl	8008a66 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 0U;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = 0U;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00f      	beq.n	8006a02 <USBD_AUDIO_DeInit+0x4e>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->DeInit(0U);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	2000      	movs	r0, #0
 80069ec:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069f4:	4618      	mov	r0, r3
 80069f6:	f002 f98f 	bl	8008d18 <USBD_static_free>
    pdev->pClassData = NULL;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3708      	adds	r7, #8
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b086      	sub	sp, #24
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8006a16:	2300      	movs	r3, #0
 8006a18:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a24:	613b      	str	r3, [r7, #16]

  if (haudio == NULL)
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d101      	bne.n	8006a30 <USBD_AUDIO_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e0b0      	b.n	8006b92 <USBD_AUDIO_Setup+0x186>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d01a      	beq.n	8006a72 <USBD_AUDIO_Setup+0x66>
 8006a3c:	2b20      	cmp	r3, #32
 8006a3e:	f040 80a0 	bne.w	8006b82 <USBD_AUDIO_Setup+0x176>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	785b      	ldrb	r3, [r3, #1]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d006      	beq.n	8006a58 <USBD_AUDIO_Setup+0x4c>
 8006a4a:	2b81      	cmp	r3, #129	; 0x81
 8006a4c:	d109      	bne.n	8006a62 <USBD_AUDIO_Setup+0x56>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 8006a4e:	6839      	ldr	r1, [r7, #0]
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fa59 	bl	8006f08 <AUDIO_REQ_GetCurrent>
          break;
 8006a56:	e00b      	b.n	8006a70 <USBD_AUDIO_Setup+0x64>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 8006a58:	6839      	ldr	r1, [r7, #0]
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fa78 	bl	8006f50 <AUDIO_REQ_SetCurrent>
          break;
 8006a60:	e006      	b.n	8006a70 <USBD_AUDIO_Setup+0x64>

        default:
          USBD_CtlError(pdev, req);
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f001 fb71 	bl	800814c <USBD_CtlError>
          ret = USBD_FAIL;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	75fb      	strb	r3, [r7, #23]
          break;
 8006a6e:	bf00      	nop
      }
      break;
 8006a70:	e08e      	b.n	8006b90 <USBD_AUDIO_Setup+0x184>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	785b      	ldrb	r3, [r3, #1]
 8006a76:	2b0b      	cmp	r3, #11
 8006a78:	d878      	bhi.n	8006b6c <USBD_AUDIO_Setup+0x160>
 8006a7a:	a201      	add	r2, pc, #4	; (adr r2, 8006a80 <USBD_AUDIO_Setup+0x74>)
 8006a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a80:	08006ab1 	.word	0x08006ab1
 8006a84:	08006b7b 	.word	0x08006b7b
 8006a88:	08006b6d 	.word	0x08006b6d
 8006a8c:	08006b6d 	.word	0x08006b6d
 8006a90:	08006b6d 	.word	0x08006b6d
 8006a94:	08006b6d 	.word	0x08006b6d
 8006a98:	08006adb 	.word	0x08006adb
 8006a9c:	08006b6d 	.word	0x08006b6d
 8006aa0:	08006b6d 	.word	0x08006b6d
 8006aa4:	08006b6d 	.word	0x08006b6d
 8006aa8:	08006b05 	.word	0x08006b05
 8006aac:	08006b2d 	.word	0x08006b2d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	2b03      	cmp	r3, #3
 8006aba:	d107      	bne.n	8006acc <USBD_AUDIO_Setup+0xc0>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006abc:	f107 0308 	add.w	r3, r7, #8
 8006ac0:	2202      	movs	r2, #2
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f001 fbb2 	bl	800822e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006aca:	e059      	b.n	8006b80 <USBD_AUDIO_Setup+0x174>
            USBD_CtlError(pdev, req);
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f001 fb3c 	bl	800814c <USBD_CtlError>
            ret = USBD_FAIL;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	75fb      	strb	r3, [r7, #23]
          break;
 8006ad8:	e052      	b.n	8006b80 <USBD_AUDIO_Setup+0x174>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	885b      	ldrh	r3, [r3, #2]
 8006ade:	0a1b      	lsrs	r3, r3, #8
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	2b21      	cmp	r3, #33	; 0x21
 8006ae4:	d14b      	bne.n	8006b7e <USBD_AUDIO_Setup+0x172>
          {
            pbuf = USBD_AUDIO_CfgDesc + 18;
 8006ae6:	4b2d      	ldr	r3, [pc, #180]	; (8006b9c <USBD_AUDIO_Setup+0x190>)
 8006ae8:	60fb      	str	r3, [r7, #12]
            len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	88db      	ldrh	r3, [r3, #6]
 8006aee:	2b09      	cmp	r3, #9
 8006af0:	bf28      	it	cs
 8006af2:	2309      	movcs	r3, #9
 8006af4:	817b      	strh	r3, [r7, #10]

            (void)USBD_CtlSendData(pdev, pbuf, len);
 8006af6:	897b      	ldrh	r3, [r7, #10]
 8006af8:	461a      	mov	r2, r3
 8006afa:	68f9      	ldr	r1, [r7, #12]
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f001 fb96 	bl	800822e <USBD_CtlSendData>
          }
          break;
 8006b02:	e03c      	b.n	8006b7e <USBD_AUDIO_Setup+0x172>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	2b03      	cmp	r3, #3
 8006b0e:	d106      	bne.n	8006b1e <USBD_AUDIO_Setup+0x112>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	2201      	movs	r2, #1
 8006b14:	4619      	mov	r1, r3
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f001 fb89 	bl	800822e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b1c:	e030      	b.n	8006b80 <USBD_AUDIO_Setup+0x174>
            USBD_CtlError(pdev, req);
 8006b1e:	6839      	ldr	r1, [r7, #0]
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f001 fb13 	bl	800814c <USBD_CtlError>
            ret = USBD_FAIL;
 8006b26:	2303      	movs	r3, #3
 8006b28:	75fb      	strb	r3, [r7, #23]
          break;
 8006b2a:	e029      	b.n	8006b80 <USBD_AUDIO_Setup+0x174>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	2b03      	cmp	r3, #3
 8006b36:	d112      	bne.n	8006b5e <USBD_AUDIO_Setup+0x152>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	885b      	ldrh	r3, [r3, #2]
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d806      	bhi.n	8006b50 <USBD_AUDIO_Setup+0x144>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	885b      	ldrh	r3, [r3, #2]
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	461a      	mov	r2, r3
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b4e:	e017      	b.n	8006b80 <USBD_AUDIO_Setup+0x174>
              USBD_CtlError(pdev, req);
 8006b50:	6839      	ldr	r1, [r7, #0]
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f001 fafa 	bl	800814c <USBD_CtlError>
              ret = USBD_FAIL;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	75fb      	strb	r3, [r7, #23]
          break;
 8006b5c:	e010      	b.n	8006b80 <USBD_AUDIO_Setup+0x174>
            USBD_CtlError(pdev, req);
 8006b5e:	6839      	ldr	r1, [r7, #0]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f001 faf3 	bl	800814c <USBD_CtlError>
            ret = USBD_FAIL;
 8006b66:	2303      	movs	r3, #3
 8006b68:	75fb      	strb	r3, [r7, #23]
          break;
 8006b6a:	e009      	b.n	8006b80 <USBD_AUDIO_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006b6c:	6839      	ldr	r1, [r7, #0]
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f001 faec 	bl	800814c <USBD_CtlError>
          ret = USBD_FAIL;
 8006b74:	2303      	movs	r3, #3
 8006b76:	75fb      	strb	r3, [r7, #23]
          break;
 8006b78:	e002      	b.n	8006b80 <USBD_AUDIO_Setup+0x174>
          break;
 8006b7a:	bf00      	nop
 8006b7c:	e008      	b.n	8006b90 <USBD_AUDIO_Setup+0x184>
          break;
 8006b7e:	bf00      	nop
      }
      break;
 8006b80:	e006      	b.n	8006b90 <USBD_AUDIO_Setup+0x184>
    default:
      USBD_CtlError(pdev, req);
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f001 fae1 	bl	800814c <USBD_CtlError>
      ret = USBD_FAIL;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	75fb      	strb	r3, [r7, #23]
      break;
 8006b8e:	bf00      	nop
  }

  return (uint8_t)ret;
 8006b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3718      	adds	r7, #24
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	20000056 	.word	0x20000056

08006ba0 <USBD_AUDIO_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	226d      	movs	r2, #109	; 0x6d
 8006bac:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 8006bae:	4b03      	ldr	r3, [pc, #12]	; (8006bbc <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	20000044 	.word	0x20000044

08006bc0 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	460b      	mov	r3, r1
 8006bca:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b084      	sub	sp, #16
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006be8:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <USBD_AUDIO_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e025      	b.n	8006c40 <USBD_AUDIO_EP0_RxReady+0x66>
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006bfa:	330a      	adds	r3, #10
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d11d      	bne.n	8006c3e <USBD_AUDIO_EP0_RxReady+0x64>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 8006c08:	330c      	adds	r3, #12
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d116      	bne.n	8006c3e <USBD_AUDIO_EP0_RxReady+0x64>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->MuteCtl(haudio->control.data[0]);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c16:	691a      	ldr	r2, [r3, #16]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006c1e:	330b      	adds	r3, #11
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	4618      	mov	r0, r3
 8006c24:	4790      	blx	r2
      haudio->control.cmd = 0U;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006c2c:	330a      	adds	r3, #10
 8006c2e:	2200      	movs	r2, #0
 8006c30:	701a      	strb	r2, [r3, #0]
      haudio->control.len = 0U;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 8006c38:	330b      	adds	r3, #11
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	701a      	strb	r2, [r3, #0]
    }
  }

  return (uint8_t)USBD_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b083      	sub	sp, #12
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <USBD_AUDIO_Sync>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
void USBD_AUDIO_Sync(USBD_HandleTypeDef *pdev, AUDIO_OffsetTypeDef offset)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint32_t BufferSize = AUDIO_TOTAL_BUF_SIZE / 2U;
 8006c80:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8006c84:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 8099 	beq.w	8006dc4 <USBD_AUDIO_Sync+0x150>
  {
    return;
  }

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c98:	60bb      	str	r3, [r7, #8]

  haudio->offset = offset;
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	78fa      	ldrb	r2, [r7, #3]
 8006ca4:	701a      	strb	r2, [r3, #0]

  if (haudio->rd_enable == 1U)
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006cac:	3305      	adds	r3, #5
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d11b      	bne.n	8006cec <USBD_AUDIO_Sync+0x78>
  {
    haudio->rd_ptr += (uint16_t)BufferSize;
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006cba:	3306      	adds	r3, #6
 8006cbc:	881a      	ldrh	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	4413      	add	r3, r2
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006ccc:	3306      	adds	r3, #6
 8006cce:	801a      	strh	r2, [r3, #0]

    if (haudio->rd_ptr == AUDIO_TOTAL_BUF_SIZE)
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006cd6:	3306      	adds	r3, #6
 8006cd8:	881b      	ldrh	r3, [r3, #0]
 8006cda:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 8006cde:	d105      	bne.n	8006cec <USBD_AUDIO_Sync+0x78>
    {
      /* roll back */
      haudio->rd_ptr = 0U;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006ce6:	3306      	adds	r3, #6
 8006ce8:	2200      	movs	r2, #0
 8006cea:	801a      	strh	r2, [r3, #0]
    }
  }

  if (haudio->rd_ptr > haudio->wr_ptr)
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006cf2:	3306      	adds	r3, #6
 8006cf4:	881a      	ldrh	r2, [r3, #0]
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006cfc:	3308      	adds	r3, #8
 8006cfe:	881b      	ldrh	r3, [r3, #0]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d924      	bls.n	8006d4e <USBD_AUDIO_Sync+0xda>
  {
    if ((haudio->rd_ptr - haudio->wr_ptr) < AUDIO_OUT_PACKET)
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006d0a:	3306      	adds	r3, #6
 8006d0c:	881b      	ldrh	r3, [r3, #0]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006d16:	3308      	adds	r3, #8
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	2bbf      	cmp	r3, #191	; 0xbf
 8006d1e:	dc03      	bgt.n	8006d28 <USBD_AUDIO_Sync+0xb4>
    {
      BufferSize += 4U;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	3304      	adds	r3, #4
 8006d24:	60fb      	str	r3, [r7, #12]
 8006d26:	e036      	b.n	8006d96 <USBD_AUDIO_Sync+0x122>
    }
    else
    {
      if ((haudio->rd_ptr - haudio->wr_ptr) > (AUDIO_TOTAL_BUF_SIZE - AUDIO_OUT_PACKET))
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006d2e:	3306      	adds	r3, #6
 8006d30:	881b      	ldrh	r3, [r3, #0]
 8006d32:	461a      	mov	r2, r3
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006d3a:	3308      	adds	r3, #8
 8006d3c:	881b      	ldrh	r3, [r3, #0]
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	f5b3 5f6d 	cmp.w	r3, #15168	; 0x3b40
 8006d44:	dd27      	ble.n	8006d96 <USBD_AUDIO_Sync+0x122>
      {
        BufferSize -= 4U;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	3b04      	subs	r3, #4
 8006d4a:	60fb      	str	r3, [r7, #12]
 8006d4c:	e023      	b.n	8006d96 <USBD_AUDIO_Sync+0x122>
      }
    }
  }
  else
  {
    if ((haudio->wr_ptr - haudio->rd_ptr) < AUDIO_OUT_PACKET)
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006d54:	3308      	adds	r3, #8
 8006d56:	881b      	ldrh	r3, [r3, #0]
 8006d58:	461a      	mov	r2, r3
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006d60:	3306      	adds	r3, #6
 8006d62:	881b      	ldrh	r3, [r3, #0]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	2bbf      	cmp	r3, #191	; 0xbf
 8006d68:	dc03      	bgt.n	8006d72 <USBD_AUDIO_Sync+0xfe>
    {
      BufferSize -= 4U;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	3b04      	subs	r3, #4
 8006d6e:	60fb      	str	r3, [r7, #12]
 8006d70:	e011      	b.n	8006d96 <USBD_AUDIO_Sync+0x122>
    }
    else
    {
      if ((haudio->wr_ptr - haudio->rd_ptr) > (AUDIO_TOTAL_BUF_SIZE - AUDIO_OUT_PACKET))
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006d78:	3308      	adds	r3, #8
 8006d7a:	881b      	ldrh	r3, [r3, #0]
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006d84:	3306      	adds	r3, #6
 8006d86:	881b      	ldrh	r3, [r3, #0]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	f5b3 5f6d 	cmp.w	r3, #15168	; 0x3b40
 8006d8e:	dd02      	ble.n	8006d96 <USBD_AUDIO_Sync+0x122>
      {
        BufferSize += 4U;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	3304      	adds	r3, #4
 8006d94:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  if (haudio->offset == AUDIO_OFFSET_FULL)
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006d9c:	3304      	adds	r3, #4
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d110      	bne.n	8006dc6 <USBD_AUDIO_Sync+0x152>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	1d10      	adds	r0, r2, #4
 8006db0:	2202      	movs	r2, #2
 8006db2:	68f9      	ldr	r1, [r7, #12]
 8006db4:	4798      	blx	r3
                                                         BufferSize, AUDIO_CMD_PLAY);
    haudio->offset = AUDIO_OFFSET_NONE;
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006dbc:	3304      	adds	r3, #4
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	701a      	strb	r2, [r3, #0]
 8006dc2:	e000      	b.n	8006dc6 <USBD_AUDIO_Sync+0x152>
    return;
 8006dc4:	bf00      	nop
  }
}
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b083      	sub	sp, #12
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
 8006dee:	460b      	mov	r3, r1
 8006df0:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e00:	b590      	push	{r4, r7, lr}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	70fb      	strb	r3, [r7, #3]
  uint16_t PacketSize;
  USBD_AUDIO_HandleTypeDef *haudio;

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e12:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <USBD_AUDIO_DataOut+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e070      	b.n	8006f00 <USBD_AUDIO_DataOut+0x100>
  }

  if (epnum == AUDIO_OUT_EP)
 8006e1e:	78fb      	ldrb	r3, [r7, #3]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d16c      	bne.n	8006efe <USBD_AUDIO_DataOut+0xfe>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 8006e24:	78fb      	ldrb	r3, [r7, #3]
 8006e26:	4619      	mov	r1, r3
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f001 ff06 	bl	8008c3a <USBD_LL_GetRxDataSize>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e38:	695c      	ldr	r4, [r3, #20]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006e40:	3308      	adds	r3, #8
 8006e42:	881b      	ldrh	r3, [r3, #0]
 8006e44:	461a      	mov	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	4413      	add	r3, r2
 8006e4a:	3304      	adds	r3, #4
 8006e4c:	8979      	ldrh	r1, [r7, #10]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	4618      	mov	r0, r3
 8006e52:	47a0      	blx	r4
                                                           PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006e5a:	3308      	adds	r3, #8
 8006e5c:	881a      	ldrh	r2, [r3, #0]
 8006e5e:	897b      	ldrh	r3, [r7, #10]
 8006e60:	4413      	add	r3, r2
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006e6a:	3308      	adds	r3, #8
 8006e6c:	801a      	strh	r2, [r3, #0]

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006e74:	3308      	adds	r3, #8
 8006e76:	881b      	ldrh	r3, [r3, #0]
 8006e78:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 8006e7c:	d11c      	bne.n	8006eb8 <USBD_AUDIO_DataOut+0xb8>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006e84:	3308      	adds	r3, #8
 8006e86:	2200      	movs	r2, #0
 8006e88:	801a      	strh	r2, [r3, #0]

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006e90:	3304      	adds	r3, #4
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	2b03      	cmp	r3, #3
 8006e96:	d10f      	bne.n	8006eb8 <USBD_AUDIO_DataOut+0xb8>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	1d10      	adds	r0, r2, #4
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8006eaa:	4798      	blx	r3
                                                             AUDIO_TOTAL_BUF_SIZE / 2U,
                                                             AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006eb2:	3304      	adds	r3, #4
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	701a      	strb	r2, [r3, #0]
      }
    }

    if (haudio->rd_enable == 0U)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006ebe:	3305      	adds	r3, #5
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10d      	bne.n	8006ee2 <USBD_AUDIO_DataOut+0xe2>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006ecc:	3308      	adds	r3, #8
 8006ece:	881b      	ldrh	r3, [r3, #0]
 8006ed0:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8006ed4:	d105      	bne.n	8006ee2 <USBD_AUDIO_DataOut+0xe2>
      {
        haudio->rd_enable = 1U;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006edc:	3305      	adds	r3, #5
 8006ede:	2201      	movs	r2, #1
 8006ee0:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
                                 &haudio->buffer[haudio->wr_ptr],
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006ee8:	3308      	adds	r3, #8
 8006eea:	881b      	ldrh	r3, [r3, #0]
 8006eec:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	1d1a      	adds	r2, r3, #4
 8006ef4:	23c0      	movs	r3, #192	; 0xc0
 8006ef6:	2101      	movs	r1, #1
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f001 fe7d 	bl	8008bf8 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd90      	pop	{r4, r7, pc}

08006f08 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f18:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d013      	beq.n	8006f48 <AUDIO_REQ_GetCurrent+0x40>
  {
    return;
  }

  (void)USBD_memset(haudio->control.data, 0, 64U);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006f26:	330b      	adds	r3, #11
 8006f28:	2240      	movs	r2, #64	; 0x40
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f001 ff4d 	bl	8008dcc <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data, req->wLength);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006f38:	330b      	adds	r3, #11
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	88d2      	ldrh	r2, [r2, #6]
 8006f3e:	4619      	mov	r1, r3
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f001 f974 	bl	800822e <USBD_CtlSendData>
 8006f46:	e000      	b.n	8006f4a <AUDIO_REQ_GetCurrent+0x42>
    return;
 8006f48:	bf00      	nop
}
 8006f4a:	3710      	adds	r7, #16
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f60:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d026      	beq.n	8006fb6 <AUDIO_REQ_SetCurrent+0x66>
  {
    return;
  }

  if (req->wLength != 0U)
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	88db      	ldrh	r3, [r3, #6]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d023      	beq.n	8006fb8 <AUDIO_REQ_SetCurrent+0x68>
  {
    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, req->wLength);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006f76:	330b      	adds	r3, #11
 8006f78:	683a      	ldr	r2, [r7, #0]
 8006f7a:	88d2      	ldrh	r2, [r2, #6]
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f001 f981 	bl	8008286 <USBD_CtlPrepareRx>

    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006f8a:	330a      	adds	r3, #10
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	701a      	strb	r2, [r3, #0]
    haudio->control.len = (uint8_t)req->wLength; /* Set the request data length */
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	88db      	ldrh	r3, [r3, #6]
 8006f94:	b2da      	uxtb	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 8006f9c:	330b      	adds	r3, #11
 8006f9e:	701a      	strb	r2, [r3, #0]
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	889b      	ldrh	r3, [r3, #4]
 8006fa4:	0a1b      	lsrs	r3, r3, #8
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	b2da      	uxtb	r2, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 8006fb0:	330c      	adds	r3, #12
 8006fb2:	701a      	strb	r2, [r3, #0]
 8006fb4:	e000      	b.n	8006fb8 <AUDIO_REQ_SetCurrent+0x68>
    return;
 8006fb6:	bf00      	nop
  }
}
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
	...

08006fc0 <USBD_AUDIO_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	220a      	movs	r2, #10
 8006fcc:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 8006fce:	4b03      	ldr	r3, [pc, #12]	; (8006fdc <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr
 8006fdc:	200000b4 	.word	0x200000b4

08006fe0 <USBD_AUDIO_RegisterInterface>:
  * @param  fops: Audio interface callback
  * @retval status
  */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d101      	bne.n	8006ff4 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e004      	b.n	8006ffe <USBD_AUDIO_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	370c      	adds	r7, #12
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr

0800700a <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b086      	sub	sp, #24
 800700e:	af00      	add	r7, sp, #0
 8007010:	60f8      	str	r0, [r7, #12]
 8007012:	60b9      	str	r1, [r7, #8]
 8007014:	4613      	mov	r3, r2
 8007016:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800701e:	2303      	movs	r3, #3
 8007020:	e01f      	b.n	8007062 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d003      	beq.n	8007048 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	79fa      	ldrb	r2, [r7, #7]
 8007054:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f001 fc78 	bl	800894c <USBD_LL_Init>
 800705c:	4603      	mov	r3, r0
 800705e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007060:	7dfb      	ldrb	r3, [r7, #23]
}
 8007062:	4618      	mov	r0, r3
 8007064:	3718      	adds	r7, #24
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b084      	sub	sp, #16
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
 8007072:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007074:	2300      	movs	r3, #0
 8007076:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800707e:	2303      	movs	r3, #3
 8007080:	e016      	b.n	80070b0 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	683a      	ldr	r2, [r7, #0]
 8007086:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00b      	beq.n	80070ae <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800709c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709e:	f107 020e 	add.w	r2, r7, #14
 80070a2:	4610      	mov	r0, r2
 80070a4:	4798      	blx	r3
 80070a6:	4602      	mov	r2, r0
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f001 fc8f 	bl	80089e4 <USBD_LL_Start>
 80070c6:	4603      	mov	r3, r0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3708      	adds	r7, #8
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	370c      	adds	r7, #12
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b084      	sub	sp, #16
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
 80070ee:	460b      	mov	r3, r1
 80070f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80070f2:	2303      	movs	r3, #3
 80070f4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d009      	beq.n	8007114 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	78fa      	ldrb	r2, [r7, #3]
 800710a:	4611      	mov	r1, r2
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	4798      	blx	r3
 8007110:	4603      	mov	r3, r0
 8007112:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007114:	7bfb      	ldrb	r3, [r7, #15]
}
 8007116:	4618      	mov	r0, r3
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b082      	sub	sp, #8
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
 8007126:	460b      	mov	r3, r1
 8007128:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007130:	2b00      	cmp	r3, #0
 8007132:	d007      	beq.n	8007144 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	78fa      	ldrb	r2, [r7, #3]
 800713e:	4611      	mov	r1, r2
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	4798      	blx	r3
  }

  return USBD_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3708      	adds	r7, #8
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b084      	sub	sp, #16
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
 8007156:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800715e:	6839      	ldr	r1, [r7, #0]
 8007160:	4618      	mov	r0, r3
 8007162:	f000 ffb9 	bl	80080d8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2201      	movs	r2, #1
 800716a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007174:	461a      	mov	r2, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007182:	f003 031f 	and.w	r3, r3, #31
 8007186:	2b02      	cmp	r3, #2
 8007188:	d01a      	beq.n	80071c0 <USBD_LL_SetupStage+0x72>
 800718a:	2b02      	cmp	r3, #2
 800718c:	d822      	bhi.n	80071d4 <USBD_LL_SetupStage+0x86>
 800718e:	2b00      	cmp	r3, #0
 8007190:	d002      	beq.n	8007198 <USBD_LL_SetupStage+0x4a>
 8007192:	2b01      	cmp	r3, #1
 8007194:	d00a      	beq.n	80071ac <USBD_LL_SetupStage+0x5e>
 8007196:	e01d      	b.n	80071d4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 fa61 	bl	8007668 <USBD_StdDevReq>
 80071a6:	4603      	mov	r3, r0
 80071a8:	73fb      	strb	r3, [r7, #15]
      break;
 80071aa:	e020      	b.n	80071ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fac5 	bl	8007744 <USBD_StdItfReq>
 80071ba:	4603      	mov	r3, r0
 80071bc:	73fb      	strb	r3, [r7, #15]
      break;
 80071be:	e016      	b.n	80071ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071c6:	4619      	mov	r1, r3
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 fb04 	bl	80077d6 <USBD_StdEPReq>
 80071ce:	4603      	mov	r3, r0
 80071d0:	73fb      	strb	r3, [r7, #15]
      break;
 80071d2:	e00c      	b.n	80071ee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80071da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	4619      	mov	r1, r3
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f001 fc5e 	bl	8008aa4 <USBD_LL_StallEP>
 80071e8:	4603      	mov	r3, r0
 80071ea:	73fb      	strb	r3, [r7, #15]
      break;
 80071ec:	bf00      	nop
  }

  return ret;
 80071ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	460b      	mov	r3, r1
 8007202:	607a      	str	r2, [r7, #4]
 8007204:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007206:	7afb      	ldrb	r3, [r7, #11]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d138      	bne.n	800727e <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007212:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800721a:	2b03      	cmp	r3, #3
 800721c:	d14a      	bne.n	80072b4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	689a      	ldr	r2, [r3, #8]
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	429a      	cmp	r2, r3
 8007228:	d913      	bls.n	8007252 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	689a      	ldr	r2, [r3, #8]
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	1ad2      	subs	r2, r2, r3
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	68da      	ldr	r2, [r3, #12]
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	4293      	cmp	r3, r2
 8007242:	bf28      	it	cs
 8007244:	4613      	movcs	r3, r2
 8007246:	461a      	mov	r2, r3
 8007248:	6879      	ldr	r1, [r7, #4]
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f001 f838 	bl	80082c0 <USBD_CtlContinueRx>
 8007250:	e030      	b.n	80072b4 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b03      	cmp	r3, #3
 800725c:	d10b      	bne.n	8007276 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d005      	beq.n	8007276 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f001 f833 	bl	80082e2 <USBD_CtlSendStatus>
 800727c:	e01a      	b.n	80072b4 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b03      	cmp	r3, #3
 8007288:	d114      	bne.n	80072b4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00e      	beq.n	80072b4 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	7afa      	ldrb	r2, [r7, #11]
 80072a0:	4611      	mov	r1, r2
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	4798      	blx	r3
 80072a6:	4603      	mov	r3, r0
 80072a8:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80072aa:	7dfb      	ldrb	r3, [r7, #23]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d001      	beq.n	80072b4 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80072b0:	7dfb      	ldrb	r3, [r7, #23]
 80072b2:	e000      	b.n	80072b6 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3718      	adds	r7, #24
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b086      	sub	sp, #24
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	60f8      	str	r0, [r7, #12]
 80072c6:	460b      	mov	r3, r1
 80072c8:	607a      	str	r2, [r7, #4]
 80072ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80072cc:	7afb      	ldrb	r3, [r7, #11]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d16b      	bne.n	80073aa <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	3314      	adds	r3, #20
 80072d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d156      	bne.n	8007390 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	689a      	ldr	r2, [r3, #8]
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d914      	bls.n	8007318 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	689a      	ldr	r2, [r3, #8]
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	1ad2      	subs	r2, r2, r3
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	461a      	mov	r2, r3
 8007302:	6879      	ldr	r1, [r7, #4]
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f000 ffad 	bl	8008264 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800730a:	2300      	movs	r3, #0
 800730c:	2200      	movs	r2, #0
 800730e:	2100      	movs	r1, #0
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f001 fc71 	bl	8008bf8 <USBD_LL_PrepareReceive>
 8007316:	e03b      	b.n	8007390 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	68da      	ldr	r2, [r3, #12]
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	429a      	cmp	r2, r3
 8007322:	d11c      	bne.n	800735e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800732c:	429a      	cmp	r2, r3
 800732e:	d316      	bcc.n	800735e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	685a      	ldr	r2, [r3, #4]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800733a:	429a      	cmp	r2, r3
 800733c:	d20f      	bcs.n	800735e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800733e:	2200      	movs	r2, #0
 8007340:	2100      	movs	r1, #0
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	f000 ff8e 	bl	8008264 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007350:	2300      	movs	r3, #0
 8007352:	2200      	movs	r2, #0
 8007354:	2100      	movs	r1, #0
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	f001 fc4e 	bl	8008bf8 <USBD_LL_PrepareReceive>
 800735c:	e018      	b.n	8007390 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b03      	cmp	r3, #3
 8007368:	d10b      	bne.n	8007382 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d005      	beq.n	8007382 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	68f8      	ldr	r0, [r7, #12]
 8007380:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007382:	2180      	movs	r1, #128	; 0x80
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f001 fb8d 	bl	8008aa4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f000 ffbc 	bl	8008308 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007396:	2b01      	cmp	r3, #1
 8007398:	d122      	bne.n	80073e0 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f7ff fe98 	bl	80070d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80073a8:	e01a      	b.n	80073e0 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	2b03      	cmp	r3, #3
 80073b4:	d114      	bne.n	80073e0 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00e      	beq.n	80073e0 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	7afa      	ldrb	r2, [r7, #11]
 80073cc:	4611      	mov	r1, r2
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	4798      	blx	r3
 80073d2:	4603      	mov	r3, r0
 80073d4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80073d6:	7dfb      	ldrb	r3, [r7, #23]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80073dc:	7dfb      	ldrb	r3, [r7, #23]
 80073de:	e000      	b.n	80073e2 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3718      	adds	r7, #24
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b082      	sub	sp, #8
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007416:	2b00      	cmp	r3, #0
 8007418:	d101      	bne.n	800741e <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800741a:	2303      	movs	r3, #3
 800741c:	e02f      	b.n	800747e <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00f      	beq.n	8007448 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d009      	beq.n	8007448 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	6852      	ldr	r2, [r2, #4]
 8007440:	b2d2      	uxtb	r2, r2
 8007442:	4611      	mov	r1, r2
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007448:	2340      	movs	r3, #64	; 0x40
 800744a:	2200      	movs	r2, #0
 800744c:	2100      	movs	r1, #0
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f001 fae3 	bl	8008a1a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2240      	movs	r2, #64	; 0x40
 8007460:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007464:	2340      	movs	r3, #64	; 0x40
 8007466:	2200      	movs	r2, #0
 8007468:	2180      	movs	r1, #128	; 0x80
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f001 fad5 	bl	8008a1a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2240      	movs	r2, #64	; 0x40
 800747a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3708      	adds	r7, #8
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007486:	b480      	push	{r7}
 8007488:	b083      	sub	sp, #12
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
 800748e:	460b      	mov	r3, r1
 8007490:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	78fa      	ldrb	r2, [r7, #3]
 8007496:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b083      	sub	sp, #12
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074b4:	b2da      	uxtb	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2204      	movs	r2, #4
 80074c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	370c      	adds	r7, #12
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b083      	sub	sp, #12
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b04      	cmp	r3, #4
 80074e4:	d106      	bne.n	80074f4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80074ec:	b2da      	uxtb	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	370c      	adds	r7, #12
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b082      	sub	sp, #8
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007510:	2b00      	cmp	r3, #0
 8007512:	d101      	bne.n	8007518 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007514:	2303      	movs	r3, #3
 8007516:	e012      	b.n	800753e <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800751e:	b2db      	uxtb	r3, r3
 8007520:	2b03      	cmp	r3, #3
 8007522:	d10b      	bne.n	800753c <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800752a:	69db      	ldr	r3, [r3, #28]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d005      	beq.n	800753c <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007536:	69db      	ldr	r3, [r3, #28]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3708      	adds	r7, #8
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b082      	sub	sp, #8
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	460b      	mov	r3, r1
 8007550:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007558:	2b00      	cmp	r3, #0
 800755a:	d101      	bne.n	8007560 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800755c:	2303      	movs	r3, #3
 800755e:	e014      	b.n	800758a <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b03      	cmp	r3, #3
 800756a:	d10d      	bne.n	8007588 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007572:	6a1b      	ldr	r3, [r3, #32]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d007      	beq.n	8007588 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800757e:	6a1b      	ldr	r3, [r3, #32]
 8007580:	78fa      	ldrb	r2, [r7, #3]
 8007582:	4611      	mov	r1, r2
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b082      	sub	sp, #8
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	460b      	mov	r3, r1
 800759c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d101      	bne.n	80075ac <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80075a8:	2303      	movs	r3, #3
 80075aa:	e014      	b.n	80075d6 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	2b03      	cmp	r3, #3
 80075b6:	d10d      	bne.n	80075d4 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d007      	beq.n	80075d4 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075cc:	78fa      	ldrb	r2, [r7, #3]
 80075ce:	4611      	mov	r1, r2
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80075de:	b480      	push	{r7}
 80075e0:	b083      	sub	sp, #12
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800760a:	2b00      	cmp	r3, #0
 800760c:	d009      	beq.n	8007622 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	6852      	ldr	r2, [r2, #4]
 800761a:	b2d2      	uxtb	r2, r2
 800761c:	4611      	mov	r1, r2
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	4798      	blx	r3
  }

  return USBD_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3708      	adds	r7, #8
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800762c:	b480      	push	{r7}
 800762e:	b087      	sub	sp, #28
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	3301      	adds	r3, #1
 8007642:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800764a:	8a3b      	ldrh	r3, [r7, #16]
 800764c:	021b      	lsls	r3, r3, #8
 800764e:	b21a      	sxth	r2, r3
 8007650:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007654:	4313      	orrs	r3, r2
 8007656:	b21b      	sxth	r3, r3
 8007658:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800765a:	89fb      	ldrh	r3, [r7, #14]
}
 800765c:	4618      	mov	r0, r3
 800765e:	371c      	adds	r7, #28
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800767e:	2b40      	cmp	r3, #64	; 0x40
 8007680:	d005      	beq.n	800768e <USBD_StdDevReq+0x26>
 8007682:	2b40      	cmp	r3, #64	; 0x40
 8007684:	d853      	bhi.n	800772e <USBD_StdDevReq+0xc6>
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00b      	beq.n	80076a2 <USBD_StdDevReq+0x3a>
 800768a:	2b20      	cmp	r3, #32
 800768c:	d14f      	bne.n	800772e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	6839      	ldr	r1, [r7, #0]
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	4798      	blx	r3
 800769c:	4603      	mov	r3, r0
 800769e:	73fb      	strb	r3, [r7, #15]
      break;
 80076a0:	e04a      	b.n	8007738 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	785b      	ldrb	r3, [r3, #1]
 80076a6:	2b09      	cmp	r3, #9
 80076a8:	d83b      	bhi.n	8007722 <USBD_StdDevReq+0xba>
 80076aa:	a201      	add	r2, pc, #4	; (adr r2, 80076b0 <USBD_StdDevReq+0x48>)
 80076ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b0:	08007705 	.word	0x08007705
 80076b4:	08007719 	.word	0x08007719
 80076b8:	08007723 	.word	0x08007723
 80076bc:	0800770f 	.word	0x0800770f
 80076c0:	08007723 	.word	0x08007723
 80076c4:	080076e3 	.word	0x080076e3
 80076c8:	080076d9 	.word	0x080076d9
 80076cc:	08007723 	.word	0x08007723
 80076d0:	080076fb 	.word	0x080076fb
 80076d4:	080076ed 	.word	0x080076ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80076d8:	6839      	ldr	r1, [r7, #0]
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 f9de 	bl	8007a9c <USBD_GetDescriptor>
          break;
 80076e0:	e024      	b.n	800772c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80076e2:	6839      	ldr	r1, [r7, #0]
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 fb6d 	bl	8007dc4 <USBD_SetAddress>
          break;
 80076ea:	e01f      	b.n	800772c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80076ec:	6839      	ldr	r1, [r7, #0]
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fbac 	bl	8007e4c <USBD_SetConfig>
 80076f4:	4603      	mov	r3, r0
 80076f6:	73fb      	strb	r3, [r7, #15]
          break;
 80076f8:	e018      	b.n	800772c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80076fa:	6839      	ldr	r1, [r7, #0]
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 fc4b 	bl	8007f98 <USBD_GetConfig>
          break;
 8007702:	e013      	b.n	800772c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007704:	6839      	ldr	r1, [r7, #0]
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fc7c 	bl	8008004 <USBD_GetStatus>
          break;
 800770c:	e00e      	b.n	800772c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800770e:	6839      	ldr	r1, [r7, #0]
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 fcab 	bl	800806c <USBD_SetFeature>
          break;
 8007716:	e009      	b.n	800772c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007718:	6839      	ldr	r1, [r7, #0]
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fcba 	bl	8008094 <USBD_ClrFeature>
          break;
 8007720:	e004      	b.n	800772c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007722:	6839      	ldr	r1, [r7, #0]
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fd11 	bl	800814c <USBD_CtlError>
          break;
 800772a:	bf00      	nop
      }
      break;
 800772c:	e004      	b.n	8007738 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800772e:	6839      	ldr	r1, [r7, #0]
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 fd0b 	bl	800814c <USBD_CtlError>
      break;
 8007736:	bf00      	nop
  }

  return ret;
 8007738:	7bfb      	ldrb	r3, [r7, #15]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop

08007744 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800775a:	2b40      	cmp	r3, #64	; 0x40
 800775c:	d005      	beq.n	800776a <USBD_StdItfReq+0x26>
 800775e:	2b40      	cmp	r3, #64	; 0x40
 8007760:	d82f      	bhi.n	80077c2 <USBD_StdItfReq+0x7e>
 8007762:	2b00      	cmp	r3, #0
 8007764:	d001      	beq.n	800776a <USBD_StdItfReq+0x26>
 8007766:	2b20      	cmp	r3, #32
 8007768:	d12b      	bne.n	80077c2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007770:	b2db      	uxtb	r3, r3
 8007772:	3b01      	subs	r3, #1
 8007774:	2b02      	cmp	r3, #2
 8007776:	d81d      	bhi.n	80077b4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	889b      	ldrh	r3, [r3, #4]
 800777c:	b2db      	uxtb	r3, r3
 800777e:	2b01      	cmp	r3, #1
 8007780:	d813      	bhi.n	80077aa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	6839      	ldr	r1, [r7, #0]
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	4798      	blx	r3
 8007790:	4603      	mov	r3, r0
 8007792:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	88db      	ldrh	r3, [r3, #6]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d110      	bne.n	80077be <USBD_StdItfReq+0x7a>
 800779c:	7bfb      	ldrb	r3, [r7, #15]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d10d      	bne.n	80077be <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fd9d 	bl	80082e2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80077a8:	e009      	b.n	80077be <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80077aa:	6839      	ldr	r1, [r7, #0]
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fccd 	bl	800814c <USBD_CtlError>
          break;
 80077b2:	e004      	b.n	80077be <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80077b4:	6839      	ldr	r1, [r7, #0]
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 fcc8 	bl	800814c <USBD_CtlError>
          break;
 80077bc:	e000      	b.n	80077c0 <USBD_StdItfReq+0x7c>
          break;
 80077be:	bf00      	nop
      }
      break;
 80077c0:	e004      	b.n	80077cc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80077c2:	6839      	ldr	r1, [r7, #0]
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 fcc1 	bl	800814c <USBD_CtlError>
      break;
 80077ca:	bf00      	nop
  }

  return ret;
 80077cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b084      	sub	sp, #16
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
 80077de:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80077e0:	2300      	movs	r3, #0
 80077e2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	889b      	ldrh	r3, [r3, #4]
 80077e8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077f2:	2b40      	cmp	r3, #64	; 0x40
 80077f4:	d007      	beq.n	8007806 <USBD_StdEPReq+0x30>
 80077f6:	2b40      	cmp	r3, #64	; 0x40
 80077f8:	f200 8145 	bhi.w	8007a86 <USBD_StdEPReq+0x2b0>
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00c      	beq.n	800781a <USBD_StdEPReq+0x44>
 8007800:	2b20      	cmp	r3, #32
 8007802:	f040 8140 	bne.w	8007a86 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	6839      	ldr	r1, [r7, #0]
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	4798      	blx	r3
 8007814:	4603      	mov	r3, r0
 8007816:	73fb      	strb	r3, [r7, #15]
      break;
 8007818:	e13a      	b.n	8007a90 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	785b      	ldrb	r3, [r3, #1]
 800781e:	2b03      	cmp	r3, #3
 8007820:	d007      	beq.n	8007832 <USBD_StdEPReq+0x5c>
 8007822:	2b03      	cmp	r3, #3
 8007824:	f300 8129 	bgt.w	8007a7a <USBD_StdEPReq+0x2a4>
 8007828:	2b00      	cmp	r3, #0
 800782a:	d07f      	beq.n	800792c <USBD_StdEPReq+0x156>
 800782c:	2b01      	cmp	r3, #1
 800782e:	d03c      	beq.n	80078aa <USBD_StdEPReq+0xd4>
 8007830:	e123      	b.n	8007a7a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007838:	b2db      	uxtb	r3, r3
 800783a:	2b02      	cmp	r3, #2
 800783c:	d002      	beq.n	8007844 <USBD_StdEPReq+0x6e>
 800783e:	2b03      	cmp	r3, #3
 8007840:	d016      	beq.n	8007870 <USBD_StdEPReq+0x9a>
 8007842:	e02c      	b.n	800789e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007844:	7bbb      	ldrb	r3, [r7, #14]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00d      	beq.n	8007866 <USBD_StdEPReq+0x90>
 800784a:	7bbb      	ldrb	r3, [r7, #14]
 800784c:	2b80      	cmp	r3, #128	; 0x80
 800784e:	d00a      	beq.n	8007866 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007850:	7bbb      	ldrb	r3, [r7, #14]
 8007852:	4619      	mov	r1, r3
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f001 f925 	bl	8008aa4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800785a:	2180      	movs	r1, #128	; 0x80
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f001 f921 	bl	8008aa4 <USBD_LL_StallEP>
 8007862:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007864:	e020      	b.n	80078a8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fc6f 	bl	800814c <USBD_CtlError>
              break;
 800786e:	e01b      	b.n	80078a8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	885b      	ldrh	r3, [r3, #2]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d10e      	bne.n	8007896 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007878:	7bbb      	ldrb	r3, [r7, #14]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00b      	beq.n	8007896 <USBD_StdEPReq+0xc0>
 800787e:	7bbb      	ldrb	r3, [r7, #14]
 8007880:	2b80      	cmp	r3, #128	; 0x80
 8007882:	d008      	beq.n	8007896 <USBD_StdEPReq+0xc0>
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	88db      	ldrh	r3, [r3, #6]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d104      	bne.n	8007896 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800788c:	7bbb      	ldrb	r3, [r7, #14]
 800788e:	4619      	mov	r1, r3
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f001 f907 	bl	8008aa4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fd23 	bl	80082e2 <USBD_CtlSendStatus>

              break;
 800789c:	e004      	b.n	80078a8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fc53 	bl	800814c <USBD_CtlError>
              break;
 80078a6:	bf00      	nop
          }
          break;
 80078a8:	e0ec      	b.n	8007a84 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d002      	beq.n	80078bc <USBD_StdEPReq+0xe6>
 80078b6:	2b03      	cmp	r3, #3
 80078b8:	d016      	beq.n	80078e8 <USBD_StdEPReq+0x112>
 80078ba:	e030      	b.n	800791e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078bc:	7bbb      	ldrb	r3, [r7, #14]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00d      	beq.n	80078de <USBD_StdEPReq+0x108>
 80078c2:	7bbb      	ldrb	r3, [r7, #14]
 80078c4:	2b80      	cmp	r3, #128	; 0x80
 80078c6:	d00a      	beq.n	80078de <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
 80078ca:	4619      	mov	r1, r3
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f001 f8e9 	bl	8008aa4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80078d2:	2180      	movs	r1, #128	; 0x80
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f001 f8e5 	bl	8008aa4 <USBD_LL_StallEP>
 80078da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078dc:	e025      	b.n	800792a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80078de:	6839      	ldr	r1, [r7, #0]
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fc33 	bl	800814c <USBD_CtlError>
              break;
 80078e6:	e020      	b.n	800792a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	885b      	ldrh	r3, [r3, #2]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d11b      	bne.n	8007928 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80078f0:	7bbb      	ldrb	r3, [r7, #14]
 80078f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d004      	beq.n	8007904 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80078fa:	7bbb      	ldrb	r3, [r7, #14]
 80078fc:	4619      	mov	r1, r3
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f001 f8ef 	bl	8008ae2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fcec 	bl	80082e2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	6839      	ldr	r1, [r7, #0]
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	4798      	blx	r3
 8007918:	4603      	mov	r3, r0
 800791a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800791c:	e004      	b.n	8007928 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800791e:	6839      	ldr	r1, [r7, #0]
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fc13 	bl	800814c <USBD_CtlError>
              break;
 8007926:	e000      	b.n	800792a <USBD_StdEPReq+0x154>
              break;
 8007928:	bf00      	nop
          }
          break;
 800792a:	e0ab      	b.n	8007a84 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007932:	b2db      	uxtb	r3, r3
 8007934:	2b02      	cmp	r3, #2
 8007936:	d002      	beq.n	800793e <USBD_StdEPReq+0x168>
 8007938:	2b03      	cmp	r3, #3
 800793a:	d032      	beq.n	80079a2 <USBD_StdEPReq+0x1cc>
 800793c:	e097      	b.n	8007a6e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800793e:	7bbb      	ldrb	r3, [r7, #14]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d007      	beq.n	8007954 <USBD_StdEPReq+0x17e>
 8007944:	7bbb      	ldrb	r3, [r7, #14]
 8007946:	2b80      	cmp	r3, #128	; 0x80
 8007948:	d004      	beq.n	8007954 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800794a:	6839      	ldr	r1, [r7, #0]
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fbfd 	bl	800814c <USBD_CtlError>
                break;
 8007952:	e091      	b.n	8007a78 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007954:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007958:	2b00      	cmp	r3, #0
 800795a:	da0b      	bge.n	8007974 <USBD_StdEPReq+0x19e>
 800795c:	7bbb      	ldrb	r3, [r7, #14]
 800795e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007962:	4613      	mov	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	3310      	adds	r3, #16
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	4413      	add	r3, r2
 8007970:	3304      	adds	r3, #4
 8007972:	e00b      	b.n	800798c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007974:	7bbb      	ldrb	r3, [r7, #14]
 8007976:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800797a:	4613      	mov	r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4413      	add	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	4413      	add	r3, r2
 800798a:	3304      	adds	r3, #4
 800798c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	2200      	movs	r2, #0
 8007992:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	2202      	movs	r2, #2
 8007998:	4619      	mov	r1, r3
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fc47 	bl	800822e <USBD_CtlSendData>
              break;
 80079a0:	e06a      	b.n	8007a78 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80079a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	da11      	bge.n	80079ce <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079aa:	7bbb      	ldrb	r3, [r7, #14]
 80079ac:	f003 020f 	and.w	r2, r3, #15
 80079b0:	6879      	ldr	r1, [r7, #4]
 80079b2:	4613      	mov	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4413      	add	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	440b      	add	r3, r1
 80079bc:	3324      	adds	r3, #36	; 0x24
 80079be:	881b      	ldrh	r3, [r3, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d117      	bne.n	80079f4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 fbc0 	bl	800814c <USBD_CtlError>
                  break;
 80079cc:	e054      	b.n	8007a78 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80079ce:	7bbb      	ldrb	r3, [r7, #14]
 80079d0:	f003 020f 	and.w	r2, r3, #15
 80079d4:	6879      	ldr	r1, [r7, #4]
 80079d6:	4613      	mov	r3, r2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	4413      	add	r3, r2
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	440b      	add	r3, r1
 80079e0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80079e4:	881b      	ldrh	r3, [r3, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d104      	bne.n	80079f4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80079ea:	6839      	ldr	r1, [r7, #0]
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fbad 	bl	800814c <USBD_CtlError>
                  break;
 80079f2:	e041      	b.n	8007a78 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	da0b      	bge.n	8007a14 <USBD_StdEPReq+0x23e>
 80079fc:	7bbb      	ldrb	r3, [r7, #14]
 80079fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a02:	4613      	mov	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4413      	add	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	3310      	adds	r3, #16
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	4413      	add	r3, r2
 8007a10:	3304      	adds	r3, #4
 8007a12:	e00b      	b.n	8007a2c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a14:	7bbb      	ldrb	r3, [r7, #14]
 8007a16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	4413      	add	r3, r2
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	4413      	add	r3, r2
 8007a2a:	3304      	adds	r3, #4
 8007a2c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a2e:	7bbb      	ldrb	r3, [r7, #14]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d002      	beq.n	8007a3a <USBD_StdEPReq+0x264>
 8007a34:	7bbb      	ldrb	r3, [r7, #14]
 8007a36:	2b80      	cmp	r3, #128	; 0x80
 8007a38:	d103      	bne.n	8007a42 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	601a      	str	r2, [r3, #0]
 8007a40:	e00e      	b.n	8007a60 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007a42:	7bbb      	ldrb	r3, [r7, #14]
 8007a44:	4619      	mov	r1, r3
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f001 f86a 	bl	8008b20 <USBD_LL_IsStallEP>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d003      	beq.n	8007a5a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	2201      	movs	r2, #1
 8007a56:	601a      	str	r2, [r3, #0]
 8007a58:	e002      	b.n	8007a60 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	2202      	movs	r2, #2
 8007a64:	4619      	mov	r1, r3
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fbe1 	bl	800822e <USBD_CtlSendData>
              break;
 8007a6c:	e004      	b.n	8007a78 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fb6b 	bl	800814c <USBD_CtlError>
              break;
 8007a76:	bf00      	nop
          }
          break;
 8007a78:	e004      	b.n	8007a84 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007a7a:	6839      	ldr	r1, [r7, #0]
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 fb65 	bl	800814c <USBD_CtlError>
          break;
 8007a82:	bf00      	nop
      }
      break;
 8007a84:	e004      	b.n	8007a90 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fb5f 	bl	800814c <USBD_CtlError>
      break;
 8007a8e:	bf00      	nop
  }

  return ret;
 8007a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
	...

08007a9c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	885b      	ldrh	r3, [r3, #2]
 8007ab6:	0a1b      	lsrs	r3, r3, #8
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	3b01      	subs	r3, #1
 8007abc:	2b0e      	cmp	r3, #14
 8007abe:	f200 8152 	bhi.w	8007d66 <USBD_GetDescriptor+0x2ca>
 8007ac2:	a201      	add	r2, pc, #4	; (adr r2, 8007ac8 <USBD_GetDescriptor+0x2c>)
 8007ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac8:	08007b39 	.word	0x08007b39
 8007acc:	08007b51 	.word	0x08007b51
 8007ad0:	08007b91 	.word	0x08007b91
 8007ad4:	08007d67 	.word	0x08007d67
 8007ad8:	08007d67 	.word	0x08007d67
 8007adc:	08007d07 	.word	0x08007d07
 8007ae0:	08007d33 	.word	0x08007d33
 8007ae4:	08007d67 	.word	0x08007d67
 8007ae8:	08007d67 	.word	0x08007d67
 8007aec:	08007d67 	.word	0x08007d67
 8007af0:	08007d67 	.word	0x08007d67
 8007af4:	08007d67 	.word	0x08007d67
 8007af8:	08007d67 	.word	0x08007d67
 8007afc:	08007d67 	.word	0x08007d67
 8007b00:	08007b05 	.word	0x08007b05
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b0a:	69db      	ldr	r3, [r3, #28]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00b      	beq.n	8007b28 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b16:	69db      	ldr	r3, [r3, #28]
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	7c12      	ldrb	r2, [r2, #16]
 8007b1c:	f107 0108 	add.w	r1, r7, #8
 8007b20:	4610      	mov	r0, r2
 8007b22:	4798      	blx	r3
 8007b24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b26:	e126      	b.n	8007d76 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007b28:	6839      	ldr	r1, [r7, #0]
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fb0e 	bl	800814c <USBD_CtlError>
        err++;
 8007b30:	7afb      	ldrb	r3, [r7, #11]
 8007b32:	3301      	adds	r3, #1
 8007b34:	72fb      	strb	r3, [r7, #11]
      break;
 8007b36:	e11e      	b.n	8007d76 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	7c12      	ldrb	r2, [r2, #16]
 8007b44:	f107 0108 	add.w	r1, r7, #8
 8007b48:	4610      	mov	r0, r2
 8007b4a:	4798      	blx	r3
 8007b4c:	60f8      	str	r0, [r7, #12]
      break;
 8007b4e:	e112      	b.n	8007d76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	7c1b      	ldrb	r3, [r3, #16]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d10d      	bne.n	8007b74 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b60:	f107 0208 	add.w	r2, r7, #8
 8007b64:	4610      	mov	r0, r2
 8007b66:	4798      	blx	r3
 8007b68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	2202      	movs	r2, #2
 8007b70:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007b72:	e100      	b.n	8007d76 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7c:	f107 0208 	add.w	r2, r7, #8
 8007b80:	4610      	mov	r0, r2
 8007b82:	4798      	blx	r3
 8007b84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	2202      	movs	r2, #2
 8007b8c:	701a      	strb	r2, [r3, #0]
      break;
 8007b8e:	e0f2      	b.n	8007d76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	885b      	ldrh	r3, [r3, #2]
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b05      	cmp	r3, #5
 8007b98:	f200 80ac 	bhi.w	8007cf4 <USBD_GetDescriptor+0x258>
 8007b9c:	a201      	add	r2, pc, #4	; (adr r2, 8007ba4 <USBD_GetDescriptor+0x108>)
 8007b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba2:	bf00      	nop
 8007ba4:	08007bbd 	.word	0x08007bbd
 8007ba8:	08007bf1 	.word	0x08007bf1
 8007bac:	08007c25 	.word	0x08007c25
 8007bb0:	08007c59 	.word	0x08007c59
 8007bb4:	08007c8d 	.word	0x08007c8d
 8007bb8:	08007cc1 	.word	0x08007cc1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00b      	beq.n	8007be0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	7c12      	ldrb	r2, [r2, #16]
 8007bd4:	f107 0108 	add.w	r1, r7, #8
 8007bd8:	4610      	mov	r0, r2
 8007bda:	4798      	blx	r3
 8007bdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bde:	e091      	b.n	8007d04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007be0:	6839      	ldr	r1, [r7, #0]
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fab2 	bl	800814c <USBD_CtlError>
            err++;
 8007be8:	7afb      	ldrb	r3, [r7, #11]
 8007bea:	3301      	adds	r3, #1
 8007bec:	72fb      	strb	r3, [r7, #11]
          break;
 8007bee:	e089      	b.n	8007d04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00b      	beq.n	8007c14 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	7c12      	ldrb	r2, [r2, #16]
 8007c08:	f107 0108 	add.w	r1, r7, #8
 8007c0c:	4610      	mov	r0, r2
 8007c0e:	4798      	blx	r3
 8007c10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c12:	e077      	b.n	8007d04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c14:	6839      	ldr	r1, [r7, #0]
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 fa98 	bl	800814c <USBD_CtlError>
            err++;
 8007c1c:	7afb      	ldrb	r3, [r7, #11]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	72fb      	strb	r3, [r7, #11]
          break;
 8007c22:	e06f      	b.n	8007d04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00b      	beq.n	8007c48 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	7c12      	ldrb	r2, [r2, #16]
 8007c3c:	f107 0108 	add.w	r1, r7, #8
 8007c40:	4610      	mov	r0, r2
 8007c42:	4798      	blx	r3
 8007c44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c46:	e05d      	b.n	8007d04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c48:	6839      	ldr	r1, [r7, #0]
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fa7e 	bl	800814c <USBD_CtlError>
            err++;
 8007c50:	7afb      	ldrb	r3, [r7, #11]
 8007c52:	3301      	adds	r3, #1
 8007c54:	72fb      	strb	r3, [r7, #11]
          break;
 8007c56:	e055      	b.n	8007d04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00b      	beq.n	8007c7c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	7c12      	ldrb	r2, [r2, #16]
 8007c70:	f107 0108 	add.w	r1, r7, #8
 8007c74:	4610      	mov	r0, r2
 8007c76:	4798      	blx	r3
 8007c78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c7a:	e043      	b.n	8007d04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fa64 	bl	800814c <USBD_CtlError>
            err++;
 8007c84:	7afb      	ldrb	r3, [r7, #11]
 8007c86:	3301      	adds	r3, #1
 8007c88:	72fb      	strb	r3, [r7, #11]
          break;
 8007c8a:	e03b      	b.n	8007d04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c92:	695b      	ldr	r3, [r3, #20]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00b      	beq.n	8007cb0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c9e:	695b      	ldr	r3, [r3, #20]
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	7c12      	ldrb	r2, [r2, #16]
 8007ca4:	f107 0108 	add.w	r1, r7, #8
 8007ca8:	4610      	mov	r0, r2
 8007caa:	4798      	blx	r3
 8007cac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cae:	e029      	b.n	8007d04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007cb0:	6839      	ldr	r1, [r7, #0]
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fa4a 	bl	800814c <USBD_CtlError>
            err++;
 8007cb8:	7afb      	ldrb	r3, [r7, #11]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	72fb      	strb	r3, [r7, #11]
          break;
 8007cbe:	e021      	b.n	8007d04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00b      	beq.n	8007ce4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	7c12      	ldrb	r2, [r2, #16]
 8007cd8:	f107 0108 	add.w	r1, r7, #8
 8007cdc:	4610      	mov	r0, r2
 8007cde:	4798      	blx	r3
 8007ce0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ce2:	e00f      	b.n	8007d04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ce4:	6839      	ldr	r1, [r7, #0]
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fa30 	bl	800814c <USBD_CtlError>
            err++;
 8007cec:	7afb      	ldrb	r3, [r7, #11]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	72fb      	strb	r3, [r7, #11]
          break;
 8007cf2:	e007      	b.n	8007d04 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007cf4:	6839      	ldr	r1, [r7, #0]
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fa28 	bl	800814c <USBD_CtlError>
          err++;
 8007cfc:	7afb      	ldrb	r3, [r7, #11]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007d02:	bf00      	nop
      }
      break;
 8007d04:	e037      	b.n	8007d76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	7c1b      	ldrb	r3, [r3, #16]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d109      	bne.n	8007d22 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d16:	f107 0208 	add.w	r2, r7, #8
 8007d1a:	4610      	mov	r0, r2
 8007d1c:	4798      	blx	r3
 8007d1e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d20:	e029      	b.n	8007d76 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007d22:	6839      	ldr	r1, [r7, #0]
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fa11 	bl	800814c <USBD_CtlError>
        err++;
 8007d2a:	7afb      	ldrb	r3, [r7, #11]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	72fb      	strb	r3, [r7, #11]
      break;
 8007d30:	e021      	b.n	8007d76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	7c1b      	ldrb	r3, [r3, #16]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10d      	bne.n	8007d56 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d42:	f107 0208 	add.w	r2, r7, #8
 8007d46:	4610      	mov	r0, r2
 8007d48:	4798      	blx	r3
 8007d4a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	2207      	movs	r2, #7
 8007d52:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d54:	e00f      	b.n	8007d76 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007d56:	6839      	ldr	r1, [r7, #0]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f9f7 	bl	800814c <USBD_CtlError>
        err++;
 8007d5e:	7afb      	ldrb	r3, [r7, #11]
 8007d60:	3301      	adds	r3, #1
 8007d62:	72fb      	strb	r3, [r7, #11]
      break;
 8007d64:	e007      	b.n	8007d76 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007d66:	6839      	ldr	r1, [r7, #0]
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 f9ef 	bl	800814c <USBD_CtlError>
      err++;
 8007d6e:	7afb      	ldrb	r3, [r7, #11]
 8007d70:	3301      	adds	r3, #1
 8007d72:	72fb      	strb	r3, [r7, #11]
      break;
 8007d74:	bf00      	nop
  }

  if (err != 0U)
 8007d76:	7afb      	ldrb	r3, [r7, #11]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d11e      	bne.n	8007dba <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	88db      	ldrh	r3, [r3, #6]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d016      	beq.n	8007db2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007d84:	893b      	ldrh	r3, [r7, #8]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00e      	beq.n	8007da8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	88da      	ldrh	r2, [r3, #6]
 8007d8e:	893b      	ldrh	r3, [r7, #8]
 8007d90:	4293      	cmp	r3, r2
 8007d92:	bf28      	it	cs
 8007d94:	4613      	movcs	r3, r2
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d9a:	893b      	ldrh	r3, [r7, #8]
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	68f9      	ldr	r1, [r7, #12]
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fa44 	bl	800822e <USBD_CtlSendData>
 8007da6:	e009      	b.n	8007dbc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f9ce 	bl	800814c <USBD_CtlError>
 8007db0:	e004      	b.n	8007dbc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fa95 	bl	80082e2 <USBD_CtlSendStatus>
 8007db8:	e000      	b.n	8007dbc <USBD_GetDescriptor+0x320>
    return;
 8007dba:	bf00      	nop
  }
}
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop

08007dc4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	889b      	ldrh	r3, [r3, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d131      	bne.n	8007e3a <USBD_SetAddress+0x76>
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	88db      	ldrh	r3, [r3, #6]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d12d      	bne.n	8007e3a <USBD_SetAddress+0x76>
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	885b      	ldrh	r3, [r3, #2]
 8007de2:	2b7f      	cmp	r3, #127	; 0x7f
 8007de4:	d829      	bhi.n	8007e3a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	885b      	ldrh	r3, [r3, #2]
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007df0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	2b03      	cmp	r3, #3
 8007dfc:	d104      	bne.n	8007e08 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007dfe:	6839      	ldr	r1, [r7, #0]
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 f9a3 	bl	800814c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e06:	e01d      	b.n	8007e44 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	7bfa      	ldrb	r2, [r7, #15]
 8007e0c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e10:	7bfb      	ldrb	r3, [r7, #15]
 8007e12:	4619      	mov	r1, r3
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 feaf 	bl	8008b78 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 fa61 	bl	80082e2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e20:	7bfb      	ldrb	r3, [r7, #15]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d004      	beq.n	8007e30 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2202      	movs	r2, #2
 8007e2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e2e:	e009      	b.n	8007e44 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e38:	e004      	b.n	8007e44 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f985 	bl	800814c <USBD_CtlError>
  }
}
 8007e42:	bf00      	nop
 8007e44:	bf00      	nop
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e56:	2300      	movs	r3, #0
 8007e58:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	885b      	ldrh	r3, [r3, #2]
 8007e5e:	b2da      	uxtb	r2, r3
 8007e60:	4b4c      	ldr	r3, [pc, #304]	; (8007f94 <USBD_SetConfig+0x148>)
 8007e62:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e64:	4b4b      	ldr	r3, [pc, #300]	; (8007f94 <USBD_SetConfig+0x148>)
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d905      	bls.n	8007e78 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f96c 	bl	800814c <USBD_CtlError>
    return USBD_FAIL;
 8007e74:	2303      	movs	r3, #3
 8007e76:	e088      	b.n	8007f8a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	d002      	beq.n	8007e8a <USBD_SetConfig+0x3e>
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d025      	beq.n	8007ed4 <USBD_SetConfig+0x88>
 8007e88:	e071      	b.n	8007f6e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007e8a:	4b42      	ldr	r3, [pc, #264]	; (8007f94 <USBD_SetConfig+0x148>)
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d01c      	beq.n	8007ecc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007e92:	4b40      	ldr	r3, [pc, #256]	; (8007f94 <USBD_SetConfig+0x148>)
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	461a      	mov	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e9c:	4b3d      	ldr	r3, [pc, #244]	; (8007f94 <USBD_SetConfig+0x148>)
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7ff f91f 	bl	80070e6 <USBD_SetClassConfig>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007eac:	7bfb      	ldrb	r3, [r7, #15]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d004      	beq.n	8007ebc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007eb2:	6839      	ldr	r1, [r7, #0]
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f949 	bl	800814c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007eba:	e065      	b.n	8007f88 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 fa10 	bl	80082e2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2203      	movs	r2, #3
 8007ec6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007eca:	e05d      	b.n	8007f88 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 fa08 	bl	80082e2 <USBD_CtlSendStatus>
      break;
 8007ed2:	e059      	b.n	8007f88 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007ed4:	4b2f      	ldr	r3, [pc, #188]	; (8007f94 <USBD_SetConfig+0x148>)
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d112      	bne.n	8007f02 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2202      	movs	r2, #2
 8007ee0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007ee4:	4b2b      	ldr	r3, [pc, #172]	; (8007f94 <USBD_SetConfig+0x148>)
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	461a      	mov	r2, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007eee:	4b29      	ldr	r3, [pc, #164]	; (8007f94 <USBD_SetConfig+0x148>)
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f7ff f912 	bl	800711e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 f9f1 	bl	80082e2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f00:	e042      	b.n	8007f88 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007f02:	4b24      	ldr	r3, [pc, #144]	; (8007f94 <USBD_SetConfig+0x148>)
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	461a      	mov	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d02a      	beq.n	8007f66 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	4619      	mov	r1, r3
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f7ff f900 	bl	800711e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007f1e:	4b1d      	ldr	r3, [pc, #116]	; (8007f94 <USBD_SetConfig+0x148>)
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	461a      	mov	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f28:	4b1a      	ldr	r3, [pc, #104]	; (8007f94 <USBD_SetConfig+0x148>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f7ff f8d9 	bl	80070e6 <USBD_SetClassConfig>
 8007f34:	4603      	mov	r3, r0
 8007f36:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007f38:	7bfb      	ldrb	r3, [r7, #15]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00f      	beq.n	8007f5e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007f3e:	6839      	ldr	r1, [r7, #0]
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f903 	bl	800814c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7ff f8e5 	bl	800711e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2202      	movs	r2, #2
 8007f58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007f5c:	e014      	b.n	8007f88 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f9bf 	bl	80082e2 <USBD_CtlSendStatus>
      break;
 8007f64:	e010      	b.n	8007f88 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f9bb 	bl	80082e2 <USBD_CtlSendStatus>
      break;
 8007f6c:	e00c      	b.n	8007f88 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007f6e:	6839      	ldr	r1, [r7, #0]
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 f8eb 	bl	800814c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f76:	4b07      	ldr	r3, [pc, #28]	; (8007f94 <USBD_SetConfig+0x148>)
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f7ff f8ce 	bl	800711e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007f82:	2303      	movs	r3, #3
 8007f84:	73fb      	strb	r3, [r7, #15]
      break;
 8007f86:	bf00      	nop
  }

  return ret;
 8007f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3710      	adds	r7, #16
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	2000015c 	.word	0x2000015c

08007f98 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	88db      	ldrh	r3, [r3, #6]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d004      	beq.n	8007fb4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 f8cd 	bl	800814c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007fb2:	e023      	b.n	8007ffc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	dc02      	bgt.n	8007fc6 <USBD_GetConfig+0x2e>
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	dc03      	bgt.n	8007fcc <USBD_GetConfig+0x34>
 8007fc4:	e015      	b.n	8007ff2 <USBD_GetConfig+0x5a>
 8007fc6:	2b03      	cmp	r3, #3
 8007fc8:	d00b      	beq.n	8007fe2 <USBD_GetConfig+0x4a>
 8007fca:	e012      	b.n	8007ff2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	3308      	adds	r3, #8
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	4619      	mov	r1, r3
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 f927 	bl	800822e <USBD_CtlSendData>
        break;
 8007fe0:	e00c      	b.n	8007ffc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	3304      	adds	r3, #4
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	4619      	mov	r1, r3
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f91f 	bl	800822e <USBD_CtlSendData>
        break;
 8007ff0:	e004      	b.n	8007ffc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007ff2:	6839      	ldr	r1, [r7, #0]
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 f8a9 	bl	800814c <USBD_CtlError>
        break;
 8007ffa:	bf00      	nop
}
 8007ffc:	bf00      	nop
 8007ffe:	3708      	adds	r7, #8
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008014:	b2db      	uxtb	r3, r3
 8008016:	3b01      	subs	r3, #1
 8008018:	2b02      	cmp	r3, #2
 800801a:	d81e      	bhi.n	800805a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	88db      	ldrh	r3, [r3, #6]
 8008020:	2b02      	cmp	r3, #2
 8008022:	d004      	beq.n	800802e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008024:	6839      	ldr	r1, [r7, #0]
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 f890 	bl	800814c <USBD_CtlError>
        break;
 800802c:	e01a      	b.n	8008064 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2201      	movs	r2, #1
 8008032:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800803a:	2b00      	cmp	r3, #0
 800803c:	d005      	beq.n	800804a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	f043 0202 	orr.w	r2, r3, #2
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	330c      	adds	r3, #12
 800804e:	2202      	movs	r2, #2
 8008050:	4619      	mov	r1, r3
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 f8eb 	bl	800822e <USBD_CtlSendData>
      break;
 8008058:	e004      	b.n	8008064 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 f875 	bl	800814c <USBD_CtlError>
      break;
 8008062:	bf00      	nop
  }
}
 8008064:	bf00      	nop
 8008066:	3708      	adds	r7, #8
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	885b      	ldrh	r3, [r3, #2]
 800807a:	2b01      	cmp	r3, #1
 800807c:	d106      	bne.n	800808c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2201      	movs	r2, #1
 8008082:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f92b 	bl	80082e2 <USBD_CtlSendStatus>
  }
}
 800808c:	bf00      	nop
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	3b01      	subs	r3, #1
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d80b      	bhi.n	80080c4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	885b      	ldrh	r3, [r3, #2]
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d10c      	bne.n	80080ce <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f910 	bl	80082e2 <USBD_CtlSendStatus>
      }
      break;
 80080c2:	e004      	b.n	80080ce <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80080c4:	6839      	ldr	r1, [r7, #0]
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f840 	bl	800814c <USBD_CtlError>
      break;
 80080cc:	e000      	b.n	80080d0 <USBD_ClrFeature+0x3c>
      break;
 80080ce:	bf00      	nop
  }
}
 80080d0:	bf00      	nop
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	781a      	ldrb	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	3301      	adds	r3, #1
 80080f2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	781a      	ldrb	r2, [r3, #0]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	3301      	adds	r3, #1
 8008100:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f7ff fa92 	bl	800762c <SWAPBYTE>
 8008108:	4603      	mov	r3, r0
 800810a:	461a      	mov	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	3301      	adds	r3, #1
 8008114:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	3301      	adds	r3, #1
 800811a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800811c:	68f8      	ldr	r0, [r7, #12]
 800811e:	f7ff fa85 	bl	800762c <SWAPBYTE>
 8008122:	4603      	mov	r3, r0
 8008124:	461a      	mov	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	3301      	adds	r3, #1
 800812e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	3301      	adds	r3, #1
 8008134:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f7ff fa78 	bl	800762c <SWAPBYTE>
 800813c:	4603      	mov	r3, r0
 800813e:	461a      	mov	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	80da      	strh	r2, [r3, #6]
}
 8008144:	bf00      	nop
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008156:	2180      	movs	r1, #128	; 0x80
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 fca3 	bl	8008aa4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800815e:	2100      	movs	r1, #0
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 fc9f 	bl	8008aa4 <USBD_LL_StallEP>
}
 8008166:	bf00      	nop
 8008168:	3708      	adds	r7, #8
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b086      	sub	sp, #24
 8008172:	af00      	add	r7, sp, #0
 8008174:	60f8      	str	r0, [r7, #12]
 8008176:	60b9      	str	r1, [r7, #8]
 8008178:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800817a:	2300      	movs	r3, #0
 800817c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d036      	beq.n	80081f2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008188:	6938      	ldr	r0, [r7, #16]
 800818a:	f000 f836 	bl	80081fa <USBD_GetLen>
 800818e:	4603      	mov	r3, r0
 8008190:	3301      	adds	r3, #1
 8008192:	b29b      	uxth	r3, r3
 8008194:	005b      	lsls	r3, r3, #1
 8008196:	b29a      	uxth	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800819c:	7dfb      	ldrb	r3, [r7, #23]
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	4413      	add	r3, r2
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	7812      	ldrb	r2, [r2, #0]
 80081a6:	701a      	strb	r2, [r3, #0]
  idx++;
 80081a8:	7dfb      	ldrb	r3, [r7, #23]
 80081aa:	3301      	adds	r3, #1
 80081ac:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80081ae:	7dfb      	ldrb	r3, [r7, #23]
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	4413      	add	r3, r2
 80081b4:	2203      	movs	r2, #3
 80081b6:	701a      	strb	r2, [r3, #0]
  idx++;
 80081b8:	7dfb      	ldrb	r3, [r7, #23]
 80081ba:	3301      	adds	r3, #1
 80081bc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80081be:	e013      	b.n	80081e8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80081c0:	7dfb      	ldrb	r3, [r7, #23]
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	4413      	add	r3, r2
 80081c6:	693a      	ldr	r2, [r7, #16]
 80081c8:	7812      	ldrb	r2, [r2, #0]
 80081ca:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	3301      	adds	r3, #1
 80081d0:	613b      	str	r3, [r7, #16]
    idx++;
 80081d2:	7dfb      	ldrb	r3, [r7, #23]
 80081d4:	3301      	adds	r3, #1
 80081d6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80081d8:	7dfb      	ldrb	r3, [r7, #23]
 80081da:	68ba      	ldr	r2, [r7, #8]
 80081dc:	4413      	add	r3, r2
 80081de:	2200      	movs	r2, #0
 80081e0:	701a      	strb	r2, [r3, #0]
    idx++;
 80081e2:	7dfb      	ldrb	r3, [r7, #23]
 80081e4:	3301      	adds	r3, #1
 80081e6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1e7      	bne.n	80081c0 <USBD_GetString+0x52>
 80081f0:	e000      	b.n	80081f4 <USBD_GetString+0x86>
    return;
 80081f2:	bf00      	nop
  }
}
 80081f4:	3718      	adds	r7, #24
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80081fa:	b480      	push	{r7}
 80081fc:	b085      	sub	sp, #20
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008202:	2300      	movs	r3, #0
 8008204:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800820a:	e005      	b.n	8008218 <USBD_GetLen+0x1e>
  {
    len++;
 800820c:	7bfb      	ldrb	r3, [r7, #15]
 800820e:	3301      	adds	r3, #1
 8008210:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	3301      	adds	r3, #1
 8008216:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d1f5      	bne.n	800820c <USBD_GetLen+0x12>
  }

  return len;
 8008220:	7bfb      	ldrb	r3, [r7, #15]
}
 8008222:	4618      	mov	r0, r3
 8008224:	3714      	adds	r7, #20
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr

0800822e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b084      	sub	sp, #16
 8008232:	af00      	add	r7, sp, #0
 8008234:	60f8      	str	r0, [r7, #12]
 8008236:	60b9      	str	r1, [r7, #8]
 8008238:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2202      	movs	r2, #2
 800823e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	68ba      	ldr	r2, [r7, #8]
 8008252:	2100      	movs	r1, #0
 8008254:	68f8      	ldr	r0, [r7, #12]
 8008256:	f000 fcae 	bl	8008bb6 <USBD_LL_Transmit>

  return USBD_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	68ba      	ldr	r2, [r7, #8]
 8008274:	2100      	movs	r1, #0
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	f000 fc9d 	bl	8008bb6 <USBD_LL_Transmit>

  return USBD_OK;
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b084      	sub	sp, #16
 800828a:	af00      	add	r7, sp, #0
 800828c:	60f8      	str	r0, [r7, #12]
 800828e:	60b9      	str	r1, [r7, #8]
 8008290:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2203      	movs	r2, #3
 8008296:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	68ba      	ldr	r2, [r7, #8]
 80082ae:	2100      	movs	r1, #0
 80082b0:	68f8      	ldr	r0, [r7, #12]
 80082b2:	f000 fca1 	bl	8008bf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	68ba      	ldr	r2, [r7, #8]
 80082d0:	2100      	movs	r1, #0
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f000 fc90 	bl	8008bf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b082      	sub	sp, #8
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2204      	movs	r2, #4
 80082ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80082f2:	2300      	movs	r3, #0
 80082f4:	2200      	movs	r2, #0
 80082f6:	2100      	movs	r1, #0
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 fc5c 	bl	8008bb6 <USBD_LL_Transmit>

  return USBD_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2205      	movs	r2, #5
 8008314:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008318:	2300      	movs	r3, #0
 800831a:	2200      	movs	r2, #0
 800831c:	2100      	movs	r1, #0
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fc6a 	bl	8008bf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
	...

08008330 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008334:	2200      	movs	r2, #0
 8008336:	4912      	ldr	r1, [pc, #72]	; (8008380 <MX_USB_DEVICE_Init+0x50>)
 8008338:	4812      	ldr	r0, [pc, #72]	; (8008384 <MX_USB_DEVICE_Init+0x54>)
 800833a:	f7fe fe66 	bl	800700a <USBD_Init>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d001      	beq.n	8008348 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008344:	f7f8 fa8c 	bl	8000860 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 8008348:	490f      	ldr	r1, [pc, #60]	; (8008388 <MX_USB_DEVICE_Init+0x58>)
 800834a:	480e      	ldr	r0, [pc, #56]	; (8008384 <MX_USB_DEVICE_Init+0x54>)
 800834c:	f7fe fe8d 	bl	800706a <USBD_RegisterClass>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d001      	beq.n	800835a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008356:	f7f8 fa83 	bl	8000860 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 800835a:	490c      	ldr	r1, [pc, #48]	; (800838c <MX_USB_DEVICE_Init+0x5c>)
 800835c:	4809      	ldr	r0, [pc, #36]	; (8008384 <MX_USB_DEVICE_Init+0x54>)
 800835e:	f7fe fe3f 	bl	8006fe0 <USBD_AUDIO_RegisterInterface>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d001      	beq.n	800836c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008368:	f7f8 fa7a 	bl	8000860 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800836c:	4805      	ldr	r0, [pc, #20]	; (8008384 <MX_USB_DEVICE_Init+0x54>)
 800836e:	f7fe fea3 	bl	80070b8 <USBD_Start>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d001      	beq.n	800837c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008378:	f7f8 fa72 	bl	8000860 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800837c:	bf00      	nop
 800837e:	bd80      	pop	{r7, pc}
 8008380:	200000dc 	.word	0x200000dc
 8008384:	20003ef8 	.word	0x20003ef8
 8008388:	2000000c 	.word	0x2000000c
 800838c:	200000c0 	.word	0x200000c0

08008390 <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  BSP_AUDIO_Init();
 800839c:	f7f8 fc32 	bl	8000c04 <BSP_AUDIO_Init>
  return (USBD_OK);
 80083a0:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b083      	sub	sp, #12
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  return (USBD_OK);
 80083b2:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	4613      	mov	r3, r2
 80083cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 80083ce:	79fb      	ldrb	r3, [r7, #7]
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d002      	beq.n	80083da <AUDIO_AudioCmd_FS+0x1a>
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d005      	beq.n	80083e4 <AUDIO_AudioCmd_FS+0x24>
 80083d8:	e009      	b.n	80083ee <AUDIO_AudioCmd_FS+0x2e>
  {
    case AUDIO_CMD_START:
    	BSP_AUDIO_OUT_Play(pbuf, size);
 80083da:	68b9      	ldr	r1, [r7, #8]
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f7f8 fc1d 	bl	8000c1c <BSP_AUDIO_OUT_Play>
    break;
 80083e2:	e004      	b.n	80083ee <AUDIO_AudioCmd_FS+0x2e>
    case AUDIO_CMD_PLAY:
    	BSP_AUDIO_OUT_ChangeBuffer(pbuf, size);
 80083e4:	68b9      	ldr	r1, [r7, #8]
 80083e6:	68f8      	ldr	r0, [r7, #12]
 80083e8:	f7f8 fc34 	bl	8000c54 <BSP_AUDIO_OUT_ChangeBuffer>
    break;
 80083ec:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 80083ee:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	4603      	mov	r3, r0
 8008400:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
 8008402:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008404:	4618      	mov	r0, r3
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
 8008416:	4603      	mov	r3, r0
 8008418:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  return (USBD_OK);
 800841a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800841c:	4618      	mov	r0, r3
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	4613      	mov	r3, r2
 8008434:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 8008436:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008438:	4618      	mov	r0, r3
 800843a:	3714      	adds	r7, #20
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 8008444:	b480      	push	{r7}
 8008446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8008448:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800844a:	4618      	mov	r0, r3
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <TransferComplete_CallBack_FS>:
/**
  * @brief  Manages the DMA full transfer complete event.
  * @retval None
  */
void TransferComplete_CallBack_FS(void)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 7 */
  USBD_AUDIO_Sync(&hUsbDeviceFS, AUDIO_OFFSET_FULL);
 8008458:	2102      	movs	r1, #2
 800845a:	4802      	ldr	r0, [pc, #8]	; (8008464 <TransferComplete_CallBack_FS+0x10>)
 800845c:	f7fe fc0a 	bl	8006c74 <USBD_AUDIO_Sync>
  /* USER CODE END 7 */
}
 8008460:	bf00      	nop
 8008462:	bd80      	pop	{r7, pc}
 8008464:	20003ef8 	.word	0x20003ef8

08008468 <HalfTransfer_CallBack_FS>:
/**
  * @brief  Manages the DMA Half transfer complete event.
  * @retval None
  */
void HalfTransfer_CallBack_FS(void)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  USBD_AUDIO_Sync(&hUsbDeviceFS, AUDIO_OFFSET_HALF);
 800846c:	2101      	movs	r1, #1
 800846e:	4802      	ldr	r0, [pc, #8]	; (8008478 <HalfTransfer_CallBack_FS+0x10>)
 8008470:	f7fe fc00 	bl	8006c74 <USBD_AUDIO_Sync>
  /* USER CODE END 8 */
}
 8008474:	bf00      	nop
 8008476:	bd80      	pop	{r7, pc}
 8008478:	20003ef8 	.word	0x20003ef8

0800847c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	4603      	mov	r3, r0
 8008484:	6039      	str	r1, [r7, #0]
 8008486:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	2212      	movs	r2, #18
 800848c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800848e:	4b03      	ldr	r3, [pc, #12]	; (800849c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008490:	4618      	mov	r0, r3
 8008492:	370c      	adds	r7, #12
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr
 800849c:	200000fc 	.word	0x200000fc

080084a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	4603      	mov	r3, r0
 80084a8:	6039      	str	r1, [r7, #0]
 80084aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	2204      	movs	r2, #4
 80084b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80084b2:	4b03      	ldr	r3, [pc, #12]	; (80084c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr
 80084c0:	2000011c 	.word	0x2000011c

080084c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	4603      	mov	r3, r0
 80084cc:	6039      	str	r1, [r7, #0]
 80084ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80084d0:	79fb      	ldrb	r3, [r7, #7]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d105      	bne.n	80084e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80084d6:	683a      	ldr	r2, [r7, #0]
 80084d8:	4907      	ldr	r1, [pc, #28]	; (80084f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80084da:	4808      	ldr	r0, [pc, #32]	; (80084fc <USBD_FS_ProductStrDescriptor+0x38>)
 80084dc:	f7ff fe47 	bl	800816e <USBD_GetString>
 80084e0:	e004      	b.n	80084ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80084e2:	683a      	ldr	r2, [r7, #0]
 80084e4:	4904      	ldr	r1, [pc, #16]	; (80084f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80084e6:	4805      	ldr	r0, [pc, #20]	; (80084fc <USBD_FS_ProductStrDescriptor+0x38>)
 80084e8:	f7ff fe41 	bl	800816e <USBD_GetString>
  }
  return USBD_StrDesc;
 80084ec:	4b02      	ldr	r3, [pc, #8]	; (80084f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3708      	adds	r7, #8
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	200041c8 	.word	0x200041c8
 80084fc:	08008df4 	.word	0x08008df4

08008500 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	4603      	mov	r3, r0
 8008508:	6039      	str	r1, [r7, #0]
 800850a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800850c:	683a      	ldr	r2, [r7, #0]
 800850e:	4904      	ldr	r1, [pc, #16]	; (8008520 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008510:	4804      	ldr	r0, [pc, #16]	; (8008524 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008512:	f7ff fe2c 	bl	800816e <USBD_GetString>
  return USBD_StrDesc;
 8008516:	4b02      	ldr	r3, [pc, #8]	; (8008520 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008518:	4618      	mov	r0, r3
 800851a:	3708      	adds	r7, #8
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	200041c8 	.word	0x200041c8
 8008524:	08008e00 	.word	0x08008e00

08008528 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	4603      	mov	r3, r0
 8008530:	6039      	str	r1, [r7, #0]
 8008532:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	221a      	movs	r2, #26
 8008538:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800853a:	f000 f855 	bl	80085e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800853e:	4b02      	ldr	r3, [pc, #8]	; (8008548 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008540:	4618      	mov	r0, r3
 8008542:	3708      	adds	r7, #8
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	20000120 	.word	0x20000120

0800854c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	4603      	mov	r3, r0
 8008554:	6039      	str	r1, [r7, #0]
 8008556:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008558:	79fb      	ldrb	r3, [r7, #7]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d105      	bne.n	800856a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800855e:	683a      	ldr	r2, [r7, #0]
 8008560:	4907      	ldr	r1, [pc, #28]	; (8008580 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008562:	4808      	ldr	r0, [pc, #32]	; (8008584 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008564:	f7ff fe03 	bl	800816e <USBD_GetString>
 8008568:	e004      	b.n	8008574 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800856a:	683a      	ldr	r2, [r7, #0]
 800856c:	4904      	ldr	r1, [pc, #16]	; (8008580 <USBD_FS_ConfigStrDescriptor+0x34>)
 800856e:	4805      	ldr	r0, [pc, #20]	; (8008584 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008570:	f7ff fdfd 	bl	800816e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008574:	4b02      	ldr	r3, [pc, #8]	; (8008580 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008576:	4618      	mov	r0, r3
 8008578:	3708      	adds	r7, #8
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	200041c8 	.word	0x200041c8
 8008584:	08008e14 	.word	0x08008e14

08008588 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	4603      	mov	r3, r0
 8008590:	6039      	str	r1, [r7, #0]
 8008592:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008594:	79fb      	ldrb	r3, [r7, #7]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d105      	bne.n	80085a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800859a:	683a      	ldr	r2, [r7, #0]
 800859c:	4907      	ldr	r1, [pc, #28]	; (80085bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800859e:	4808      	ldr	r0, [pc, #32]	; (80085c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085a0:	f7ff fde5 	bl	800816e <USBD_GetString>
 80085a4:	e004      	b.n	80085b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	4904      	ldr	r1, [pc, #16]	; (80085bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085aa:	4805      	ldr	r0, [pc, #20]	; (80085c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085ac:	f7ff fddf 	bl	800816e <USBD_GetString>
  }
  return USBD_StrDesc;
 80085b0:	4b02      	ldr	r3, [pc, #8]	; (80085bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	200041c8 	.word	0x200041c8
 80085c0:	08008e24 	.word	0x08008e24

080085c4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	4603      	mov	r3, r0
 80085cc:	6039      	str	r1, [r7, #0]
 80085ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	220c      	movs	r2, #12
 80085d4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80085d6:	4b03      	ldr	r3, [pc, #12]	; (80085e4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80085d8:	4618      	mov	r0, r3
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr
 80085e4:	20000110 	.word	0x20000110

080085e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80085ee:	4b0f      	ldr	r3, [pc, #60]	; (800862c <Get_SerialNum+0x44>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80085f4:	4b0e      	ldr	r3, [pc, #56]	; (8008630 <Get_SerialNum+0x48>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80085fa:	4b0e      	ldr	r3, [pc, #56]	; (8008634 <Get_SerialNum+0x4c>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4413      	add	r3, r2
 8008606:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d009      	beq.n	8008622 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800860e:	2208      	movs	r2, #8
 8008610:	4909      	ldr	r1, [pc, #36]	; (8008638 <Get_SerialNum+0x50>)
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f000 f814 	bl	8008640 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008618:	2204      	movs	r2, #4
 800861a:	4908      	ldr	r1, [pc, #32]	; (800863c <Get_SerialNum+0x54>)
 800861c:	68b8      	ldr	r0, [r7, #8]
 800861e:	f000 f80f 	bl	8008640 <IntToUnicode>
  }
}
 8008622:	bf00      	nop
 8008624:	3710      	adds	r7, #16
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	1fff7a10 	.word	0x1fff7a10
 8008630:	1fff7a14 	.word	0x1fff7a14
 8008634:	1fff7a18 	.word	0x1fff7a18
 8008638:	20000122 	.word	0x20000122
 800863c:	20000132 	.word	0x20000132

08008640 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008640:	b480      	push	{r7}
 8008642:	b087      	sub	sp, #28
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	4613      	mov	r3, r2
 800864c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800864e:	2300      	movs	r3, #0
 8008650:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008652:	2300      	movs	r3, #0
 8008654:	75fb      	strb	r3, [r7, #23]
 8008656:	e027      	b.n	80086a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	0f1b      	lsrs	r3, r3, #28
 800865c:	2b09      	cmp	r3, #9
 800865e:	d80b      	bhi.n	8008678 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	0f1b      	lsrs	r3, r3, #28
 8008664:	b2da      	uxtb	r2, r3
 8008666:	7dfb      	ldrb	r3, [r7, #23]
 8008668:	005b      	lsls	r3, r3, #1
 800866a:	4619      	mov	r1, r3
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	440b      	add	r3, r1
 8008670:	3230      	adds	r2, #48	; 0x30
 8008672:	b2d2      	uxtb	r2, r2
 8008674:	701a      	strb	r2, [r3, #0]
 8008676:	e00a      	b.n	800868e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	0f1b      	lsrs	r3, r3, #28
 800867c:	b2da      	uxtb	r2, r3
 800867e:	7dfb      	ldrb	r3, [r7, #23]
 8008680:	005b      	lsls	r3, r3, #1
 8008682:	4619      	mov	r1, r3
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	440b      	add	r3, r1
 8008688:	3237      	adds	r2, #55	; 0x37
 800868a:	b2d2      	uxtb	r2, r2
 800868c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	011b      	lsls	r3, r3, #4
 8008692:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008694:	7dfb      	ldrb	r3, [r7, #23]
 8008696:	005b      	lsls	r3, r3, #1
 8008698:	3301      	adds	r3, #1
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	4413      	add	r3, r2
 800869e:	2200      	movs	r2, #0
 80086a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80086a2:	7dfb      	ldrb	r3, [r7, #23]
 80086a4:	3301      	adds	r3, #1
 80086a6:	75fb      	strb	r3, [r7, #23]
 80086a8:	7dfa      	ldrb	r2, [r7, #23]
 80086aa:	79fb      	ldrb	r3, [r7, #7]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d3d3      	bcc.n	8008658 <IntToUnicode+0x18>
  }
}
 80086b0:	bf00      	nop
 80086b2:	bf00      	nop
 80086b4:	371c      	adds	r7, #28
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
	...

080086c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b08a      	sub	sp, #40	; 0x28
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086c8:	f107 0314 	add.w	r3, r7, #20
 80086cc:	2200      	movs	r2, #0
 80086ce:	601a      	str	r2, [r3, #0]
 80086d0:	605a      	str	r2, [r3, #4]
 80086d2:	609a      	str	r2, [r3, #8]
 80086d4:	60da      	str	r2, [r3, #12]
 80086d6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086e0:	d13a      	bne.n	8008758 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086e2:	2300      	movs	r3, #0
 80086e4:	613b      	str	r3, [r7, #16]
 80086e6:	4b1e      	ldr	r3, [pc, #120]	; (8008760 <HAL_PCD_MspInit+0xa0>)
 80086e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ea:	4a1d      	ldr	r2, [pc, #116]	; (8008760 <HAL_PCD_MspInit+0xa0>)
 80086ec:	f043 0301 	orr.w	r3, r3, #1
 80086f0:	6313      	str	r3, [r2, #48]	; 0x30
 80086f2:	4b1b      	ldr	r3, [pc, #108]	; (8008760 <HAL_PCD_MspInit+0xa0>)
 80086f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	613b      	str	r3, [r7, #16]
 80086fc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80086fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008704:	2302      	movs	r3, #2
 8008706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008708:	2300      	movs	r3, #0
 800870a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800870c:	2303      	movs	r3, #3
 800870e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008710:	230a      	movs	r3, #10
 8008712:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008714:	f107 0314 	add.w	r3, r7, #20
 8008718:	4619      	mov	r1, r3
 800871a:	4812      	ldr	r0, [pc, #72]	; (8008764 <HAL_PCD_MspInit+0xa4>)
 800871c:	f7f8 ffd8 	bl	80016d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008720:	4b0f      	ldr	r3, [pc, #60]	; (8008760 <HAL_PCD_MspInit+0xa0>)
 8008722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008724:	4a0e      	ldr	r2, [pc, #56]	; (8008760 <HAL_PCD_MspInit+0xa0>)
 8008726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800872a:	6353      	str	r3, [r2, #52]	; 0x34
 800872c:	2300      	movs	r3, #0
 800872e:	60fb      	str	r3, [r7, #12]
 8008730:	4b0b      	ldr	r3, [pc, #44]	; (8008760 <HAL_PCD_MspInit+0xa0>)
 8008732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008734:	4a0a      	ldr	r2, [pc, #40]	; (8008760 <HAL_PCD_MspInit+0xa0>)
 8008736:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800873a:	6453      	str	r3, [r2, #68]	; 0x44
 800873c:	4b08      	ldr	r3, [pc, #32]	; (8008760 <HAL_PCD_MspInit+0xa0>)
 800873e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008744:	60fb      	str	r3, [r7, #12]
 8008746:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008748:	2200      	movs	r2, #0
 800874a:	2100      	movs	r1, #0
 800874c:	2043      	movs	r0, #67	; 0x43
 800874e:	f7f8 fc18 	bl	8000f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008752:	2043      	movs	r0, #67	; 0x43
 8008754:	f7f8 fc31 	bl	8000fba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008758:	bf00      	nop
 800875a:	3728      	adds	r7, #40	; 0x28
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	40023800 	.word	0x40023800
 8008764:	40020000 	.word	0x40020000

08008768 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800877c:	4619      	mov	r1, r3
 800877e:	4610      	mov	r0, r2
 8008780:	f7fe fce5 	bl	800714e <USBD_LL_SetupStage>
}
 8008784:	bf00      	nop
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	460b      	mov	r3, r1
 8008796:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800879e:	78fa      	ldrb	r2, [r7, #3]
 80087a0:	6879      	ldr	r1, [r7, #4]
 80087a2:	4613      	mov	r3, r2
 80087a4:	00db      	lsls	r3, r3, #3
 80087a6:	1a9b      	subs	r3, r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	440b      	add	r3, r1
 80087ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	78fb      	ldrb	r3, [r7, #3]
 80087b4:	4619      	mov	r1, r3
 80087b6:	f7fe fd1f 	bl	80071f8 <USBD_LL_DataOutStage>
}
 80087ba:	bf00      	nop
 80087bc:	3708      	adds	r7, #8
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b082      	sub	sp, #8
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
 80087ca:	460b      	mov	r3, r1
 80087cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80087d4:	78fa      	ldrb	r2, [r7, #3]
 80087d6:	6879      	ldr	r1, [r7, #4]
 80087d8:	4613      	mov	r3, r2
 80087da:	00db      	lsls	r3, r3, #3
 80087dc:	1a9b      	subs	r3, r3, r2
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	440b      	add	r3, r1
 80087e2:	3348      	adds	r3, #72	; 0x48
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	78fb      	ldrb	r3, [r7, #3]
 80087e8:	4619      	mov	r1, r3
 80087ea:	f7fe fd68 	bl	80072be <USBD_LL_DataInStage>
}
 80087ee:	bf00      	nop
 80087f0:	3708      	adds	r7, #8
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b082      	sub	sp, #8
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008804:	4618      	mov	r0, r3
 8008806:	f7fe fe7c 	bl	8007502 <USBD_LL_SOF>
}
 800880a:	bf00      	nop
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b084      	sub	sp, #16
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800881a:	2301      	movs	r3, #1
 800881c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d102      	bne.n	800882c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008826:	2300      	movs	r3, #0
 8008828:	73fb      	strb	r3, [r7, #15]
 800882a:	e008      	b.n	800883e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	2b02      	cmp	r3, #2
 8008832:	d102      	bne.n	800883a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008834:	2301      	movs	r3, #1
 8008836:	73fb      	strb	r3, [r7, #15]
 8008838:	e001      	b.n	800883e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800883a:	f7f8 f811 	bl	8000860 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008844:	7bfa      	ldrb	r2, [r7, #15]
 8008846:	4611      	mov	r1, r2
 8008848:	4618      	mov	r0, r3
 800884a:	f7fe fe1c 	bl	8007486 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008854:	4618      	mov	r0, r3
 8008856:	f7fe fdc8 	bl	80073ea <USBD_LL_Reset>
}
 800885a:	bf00      	nop
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
	...

08008864 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008872:	4618      	mov	r0, r3
 8008874:	f7fe fe17 	bl	80074a6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	6812      	ldr	r2, [r2, #0]
 8008886:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800888a:	f043 0301 	orr.w	r3, r3, #1
 800888e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a1b      	ldr	r3, [r3, #32]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d005      	beq.n	80088a4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008898:	4b04      	ldr	r3, [pc, #16]	; (80088ac <HAL_PCD_SuspendCallback+0x48>)
 800889a:	691b      	ldr	r3, [r3, #16]
 800889c:	4a03      	ldr	r2, [pc, #12]	; (80088ac <HAL_PCD_SuspendCallback+0x48>)
 800889e:	f043 0306 	orr.w	r3, r3, #6
 80088a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80088a4:	bf00      	nop
 80088a6:	3708      	adds	r7, #8
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	e000ed00 	.word	0xe000ed00

080088b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088be:	4618      	mov	r0, r3
 80088c0:	f7fe fe07 	bl	80074d2 <USBD_LL_Resume>
}
 80088c4:	bf00      	nop
 80088c6:	3708      	adds	r7, #8
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	460b      	mov	r3, r1
 80088d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088de:	78fa      	ldrb	r2, [r7, #3]
 80088e0:	4611      	mov	r1, r2
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fe fe55 	bl	8007592 <USBD_LL_IsoOUTIncomplete>
}
 80088e8:	bf00      	nop
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	460b      	mov	r3, r1
 80088fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008902:	78fa      	ldrb	r2, [r7, #3]
 8008904:	4611      	mov	r1, r2
 8008906:	4618      	mov	r0, r3
 8008908:	f7fe fe1d 	bl	8007546 <USBD_LL_IsoINIncomplete>
}
 800890c:	bf00      	nop
 800890e:	3708      	adds	r7, #8
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008922:	4618      	mov	r0, r3
 8008924:	f7fe fe5b 	bl	80075de <USBD_LL_DevConnected>
}
 8008928:	bf00      	nop
 800892a:	3708      	adds	r7, #8
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800893e:	4618      	mov	r0, r3
 8008940:	f7fe fe58 	bl	80075f4 <USBD_LL_DevDisconnected>
}
 8008944:	bf00      	nop
 8008946:	3708      	adds	r7, #8
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d13c      	bne.n	80089d6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800895c:	4a20      	ldr	r2, [pc, #128]	; (80089e0 <USBD_LL_Init+0x94>)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4a1e      	ldr	r2, [pc, #120]	; (80089e0 <USBD_LL_Init+0x94>)
 8008968:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800896c:	4b1c      	ldr	r3, [pc, #112]	; (80089e0 <USBD_LL_Init+0x94>)
 800896e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008972:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008974:	4b1a      	ldr	r3, [pc, #104]	; (80089e0 <USBD_LL_Init+0x94>)
 8008976:	2206      	movs	r2, #6
 8008978:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800897a:	4b19      	ldr	r3, [pc, #100]	; (80089e0 <USBD_LL_Init+0x94>)
 800897c:	2202      	movs	r2, #2
 800897e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008980:	4b17      	ldr	r3, [pc, #92]	; (80089e0 <USBD_LL_Init+0x94>)
 8008982:	2200      	movs	r2, #0
 8008984:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008986:	4b16      	ldr	r3, [pc, #88]	; (80089e0 <USBD_LL_Init+0x94>)
 8008988:	2202      	movs	r2, #2
 800898a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800898c:	4b14      	ldr	r3, [pc, #80]	; (80089e0 <USBD_LL_Init+0x94>)
 800898e:	2200      	movs	r2, #0
 8008990:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008992:	4b13      	ldr	r3, [pc, #76]	; (80089e0 <USBD_LL_Init+0x94>)
 8008994:	2200      	movs	r2, #0
 8008996:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008998:	4b11      	ldr	r3, [pc, #68]	; (80089e0 <USBD_LL_Init+0x94>)
 800899a:	2200      	movs	r2, #0
 800899c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800899e:	4b10      	ldr	r3, [pc, #64]	; (80089e0 <USBD_LL_Init+0x94>)
 80089a0:	2200      	movs	r2, #0
 80089a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80089a4:	4b0e      	ldr	r3, [pc, #56]	; (80089e0 <USBD_LL_Init+0x94>)
 80089a6:	2200      	movs	r2, #0
 80089a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80089aa:	480d      	ldr	r0, [pc, #52]	; (80089e0 <USBD_LL_Init+0x94>)
 80089ac:	f7f9 f83d 	bl	8001a2a <HAL_PCD_Init>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d001      	beq.n	80089ba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80089b6:	f7f7 ff53 	bl	8000860 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80089ba:	2180      	movs	r1, #128	; 0x80
 80089bc:	4808      	ldr	r0, [pc, #32]	; (80089e0 <USBD_LL_Init+0x94>)
 80089be:	f7fa f9ce 	bl	8002d5e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80089c2:	2240      	movs	r2, #64	; 0x40
 80089c4:	2100      	movs	r1, #0
 80089c6:	4806      	ldr	r0, [pc, #24]	; (80089e0 <USBD_LL_Init+0x94>)
 80089c8:	f7fa f982 	bl	8002cd0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80089cc:	2280      	movs	r2, #128	; 0x80
 80089ce:	2101      	movs	r1, #1
 80089d0:	4803      	ldr	r0, [pc, #12]	; (80089e0 <USBD_LL_Init+0x94>)
 80089d2:	f7fa f97d 	bl	8002cd0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3708      	adds	r7, #8
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	200043c8 	.word	0x200043c8

080089e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089ec:	2300      	movs	r3, #0
 80089ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089f0:	2300      	movs	r3, #0
 80089f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7f9 f939 	bl	8001c72 <HAL_PCD_Start>
 8008a00:	4603      	mov	r3, r0
 8008a02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
 8008a06:	4618      	mov	r0, r3
 8008a08:	f000 f990 	bl	8008d2c <USBD_Get_USB_Status>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a10:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b084      	sub	sp, #16
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
 8008a22:	4608      	mov	r0, r1
 8008a24:	4611      	mov	r1, r2
 8008a26:	461a      	mov	r2, r3
 8008a28:	4603      	mov	r3, r0
 8008a2a:	70fb      	strb	r3, [r7, #3]
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	70bb      	strb	r3, [r7, #2]
 8008a30:	4613      	mov	r3, r2
 8008a32:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a34:	2300      	movs	r3, #0
 8008a36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a42:	78bb      	ldrb	r3, [r7, #2]
 8008a44:	883a      	ldrh	r2, [r7, #0]
 8008a46:	78f9      	ldrb	r1, [r7, #3]
 8008a48:	f7f9 fd4a 	bl	80024e0 <HAL_PCD_EP_Open>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a50:	7bfb      	ldrb	r3, [r7, #15]
 8008a52:	4618      	mov	r0, r3
 8008a54:	f000 f96a 	bl	8008d2c <USBD_Get_USB_Status>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b084      	sub	sp, #16
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
 8008a6e:	460b      	mov	r3, r1
 8008a70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a72:	2300      	movs	r3, #0
 8008a74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a76:	2300      	movs	r3, #0
 8008a78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a80:	78fa      	ldrb	r2, [r7, #3]
 8008a82:	4611      	mov	r1, r2
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7f9 fd93 	bl	80025b0 <HAL_PCD_EP_Close>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a8e:	7bfb      	ldrb	r3, [r7, #15]
 8008a90:	4618      	mov	r0, r3
 8008a92:	f000 f94b 	bl	8008d2c <USBD_Get_USB_Status>
 8008a96:	4603      	mov	r3, r0
 8008a98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	460b      	mov	r3, r1
 8008aae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008abe:	78fa      	ldrb	r2, [r7, #3]
 8008ac0:	4611      	mov	r1, r2
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7f9 fe6b 	bl	800279e <HAL_PCD_EP_SetStall>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008acc:	7bfb      	ldrb	r3, [r7, #15]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f000 f92c 	bl	8008d2c <USBD_Get_USB_Status>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ad8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b084      	sub	sp, #16
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
 8008aea:	460b      	mov	r3, r1
 8008aec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aee:	2300      	movs	r3, #0
 8008af0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008af2:	2300      	movs	r3, #0
 8008af4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008afc:	78fa      	ldrb	r2, [r7, #3]
 8008afe:	4611      	mov	r1, r2
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7f9 feb0 	bl	8002866 <HAL_PCD_EP_ClrStall>
 8008b06:	4603      	mov	r3, r0
 8008b08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b0a:	7bfb      	ldrb	r3, [r7, #15]
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f000 f90d 	bl	8008d2c <USBD_Get_USB_Status>
 8008b12:	4603      	mov	r3, r0
 8008b14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b16:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3710      	adds	r7, #16
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b085      	sub	sp, #20
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	460b      	mov	r3, r1
 8008b2a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b32:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008b34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	da0b      	bge.n	8008b54 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008b3c:	78fb      	ldrb	r3, [r7, #3]
 8008b3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b42:	68f9      	ldr	r1, [r7, #12]
 8008b44:	4613      	mov	r3, r2
 8008b46:	00db      	lsls	r3, r3, #3
 8008b48:	1a9b      	subs	r3, r3, r2
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	440b      	add	r3, r1
 8008b4e:	333e      	adds	r3, #62	; 0x3e
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	e00b      	b.n	8008b6c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008b54:	78fb      	ldrb	r3, [r7, #3]
 8008b56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b5a:	68f9      	ldr	r1, [r7, #12]
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	00db      	lsls	r3, r3, #3
 8008b60:	1a9b      	subs	r3, r3, r2
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	440b      	add	r3, r1
 8008b66:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008b6a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3714      	adds	r7, #20
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	460b      	mov	r3, r1
 8008b82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b84:	2300      	movs	r3, #0
 8008b86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b92:	78fa      	ldrb	r2, [r7, #3]
 8008b94:	4611      	mov	r1, r2
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7f9 fc7d 	bl	8002496 <HAL_PCD_SetAddress>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f000 f8c2 	bl	8008d2c <USBD_Get_USB_Status>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bac:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b086      	sub	sp, #24
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	60f8      	str	r0, [r7, #12]
 8008bbe:	607a      	str	r2, [r7, #4]
 8008bc0:	603b      	str	r3, [r7, #0]
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008bd4:	7af9      	ldrb	r1, [r7, #11]
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	f7f9 fd96 	bl	800270a <HAL_PCD_EP_Transmit>
 8008bde:	4603      	mov	r3, r0
 8008be0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008be2:	7dfb      	ldrb	r3, [r7, #23]
 8008be4:	4618      	mov	r0, r3
 8008be6:	f000 f8a1 	bl	8008d2c <USBD_Get_USB_Status>
 8008bea:	4603      	mov	r3, r0
 8008bec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008bee:	7dbb      	ldrb	r3, [r7, #22]
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3718      	adds	r7, #24
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b086      	sub	sp, #24
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	607a      	str	r2, [r7, #4]
 8008c02:	603b      	str	r3, [r7, #0]
 8008c04:	460b      	mov	r3, r1
 8008c06:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008c16:	7af9      	ldrb	r1, [r7, #11]
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	f7f9 fd12 	bl	8002644 <HAL_PCD_EP_Receive>
 8008c20:	4603      	mov	r3, r0
 8008c22:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c24:	7dfb      	ldrb	r3, [r7, #23]
 8008c26:	4618      	mov	r0, r3
 8008c28:	f000 f880 	bl	8008d2c <USBD_Get_USB_Status>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c30:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3718      	adds	r7, #24
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b082      	sub	sp, #8
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
 8008c42:	460b      	mov	r3, r1
 8008c44:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c4c:	78fa      	ldrb	r2, [r7, #3]
 8008c4e:	4611      	mov	r1, r2
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7f9 fd42 	bl	80026da <HAL_PCD_EP_GetRxCount>
 8008c56:	4603      	mov	r3, r0
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3708      	adds	r7, #8
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	460b      	mov	r3, r1
 8008c6a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008c6c:	78fb      	ldrb	r3, [r7, #3]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d002      	beq.n	8008c78 <HAL_PCDEx_LPM_Callback+0x18>
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d01f      	beq.n	8008cb6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008c76:	e03b      	b.n	8008cf0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6a1b      	ldr	r3, [r3, #32]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d007      	beq.n	8008c90 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8008c80:	f7f7 fc4e 	bl	8000520 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008c84:	4b1c      	ldr	r3, [pc, #112]	; (8008cf8 <HAL_PCDEx_LPM_Callback+0x98>)
 8008c86:	691b      	ldr	r3, [r3, #16]
 8008c88:	4a1b      	ldr	r2, [pc, #108]	; (8008cf8 <HAL_PCDEx_LPM_Callback+0x98>)
 8008c8a:	f023 0306 	bic.w	r3, r3, #6
 8008c8e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	6812      	ldr	r2, [r2, #0]
 8008c9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ca2:	f023 0301 	bic.w	r3, r3, #1
 8008ca6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fe fc0f 	bl	80074d2 <USBD_LL_Resume>
    break;
 8008cb4:	e01c      	b.n	8008cf0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	6812      	ldr	r2, [r2, #0]
 8008cc4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008cc8:	f043 0301 	orr.w	r3, r3, #1
 8008ccc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7fe fbe6 	bl	80074a6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a1b      	ldr	r3, [r3, #32]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d005      	beq.n	8008cee <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ce2:	4b05      	ldr	r3, [pc, #20]	; (8008cf8 <HAL_PCDEx_LPM_Callback+0x98>)
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	4a04      	ldr	r2, [pc, #16]	; (8008cf8 <HAL_PCDEx_LPM_Callback+0x98>)
 8008ce8:	f043 0306 	orr.w	r3, r3, #6
 8008cec:	6113      	str	r3, [r2, #16]
    break;
 8008cee:	bf00      	nop
}
 8008cf0:	bf00      	nop
 8008cf2:	3708      	adds	r7, #8
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	e000ed00 	.word	0xe000ed00

08008cfc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d04:	4b03      	ldr	r3, [pc, #12]	; (8008d14 <USBD_static_malloc+0x18>)
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	370c      	adds	r7, #12
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop
 8008d14:	20000160 	.word	0x20000160

08008d18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]

}
 8008d20:	bf00      	nop
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	4603      	mov	r3, r0
 8008d34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d36:	2300      	movs	r3, #0
 8008d38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d3a:	79fb      	ldrb	r3, [r7, #7]
 8008d3c:	2b03      	cmp	r3, #3
 8008d3e:	d817      	bhi.n	8008d70 <USBD_Get_USB_Status+0x44>
 8008d40:	a201      	add	r2, pc, #4	; (adr r2, 8008d48 <USBD_Get_USB_Status+0x1c>)
 8008d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d46:	bf00      	nop
 8008d48:	08008d59 	.word	0x08008d59
 8008d4c:	08008d5f 	.word	0x08008d5f
 8008d50:	08008d65 	.word	0x08008d65
 8008d54:	08008d6b 	.word	0x08008d6b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d5c:	e00b      	b.n	8008d76 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	73fb      	strb	r3, [r7, #15]
    break;
 8008d62:	e008      	b.n	8008d76 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d64:	2301      	movs	r3, #1
 8008d66:	73fb      	strb	r3, [r7, #15]
    break;
 8008d68:	e005      	b.n	8008d76 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d6e:	e002      	b.n	8008d76 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008d70:	2303      	movs	r3, #3
 8008d72:	73fb      	strb	r3, [r7, #15]
    break;
 8008d74:	bf00      	nop
  }
  return usb_status;
 8008d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3714      	adds	r7, #20
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <__libc_init_array>:
 8008d84:	b570      	push	{r4, r5, r6, lr}
 8008d86:	4d0d      	ldr	r5, [pc, #52]	; (8008dbc <__libc_init_array+0x38>)
 8008d88:	4c0d      	ldr	r4, [pc, #52]	; (8008dc0 <__libc_init_array+0x3c>)
 8008d8a:	1b64      	subs	r4, r4, r5
 8008d8c:	10a4      	asrs	r4, r4, #2
 8008d8e:	2600      	movs	r6, #0
 8008d90:	42a6      	cmp	r6, r4
 8008d92:	d109      	bne.n	8008da8 <__libc_init_array+0x24>
 8008d94:	4d0b      	ldr	r5, [pc, #44]	; (8008dc4 <__libc_init_array+0x40>)
 8008d96:	4c0c      	ldr	r4, [pc, #48]	; (8008dc8 <__libc_init_array+0x44>)
 8008d98:	f000 f820 	bl	8008ddc <_init>
 8008d9c:	1b64      	subs	r4, r4, r5
 8008d9e:	10a4      	asrs	r4, r4, #2
 8008da0:	2600      	movs	r6, #0
 8008da2:	42a6      	cmp	r6, r4
 8008da4:	d105      	bne.n	8008db2 <__libc_init_array+0x2e>
 8008da6:	bd70      	pop	{r4, r5, r6, pc}
 8008da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dac:	4798      	blx	r3
 8008dae:	3601      	adds	r6, #1
 8008db0:	e7ee      	b.n	8008d90 <__libc_init_array+0xc>
 8008db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008db6:	4798      	blx	r3
 8008db8:	3601      	adds	r6, #1
 8008dba:	e7f2      	b.n	8008da2 <__libc_init_array+0x1e>
 8008dbc:	08008e54 	.word	0x08008e54
 8008dc0:	08008e54 	.word	0x08008e54
 8008dc4:	08008e54 	.word	0x08008e54
 8008dc8:	08008e58 	.word	0x08008e58

08008dcc <memset>:
 8008dcc:	4402      	add	r2, r0
 8008dce:	4603      	mov	r3, r0
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d100      	bne.n	8008dd6 <memset+0xa>
 8008dd4:	4770      	bx	lr
 8008dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8008dda:	e7f9      	b.n	8008dd0 <memset+0x4>

08008ddc <_init>:
 8008ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dde:	bf00      	nop
 8008de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008de2:	bc08      	pop	{r3}
 8008de4:	469e      	mov	lr, r3
 8008de6:	4770      	bx	lr

08008de8 <_fini>:
 8008de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dea:	bf00      	nop
 8008dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dee:	bc08      	pop	{r3}
 8008df0:	469e      	mov	lr, r3
 8008df2:	4770      	bx	lr
